openapi: 3.0.2
info:
  description: "\n## Introduction\n[Fiken.no](https://fiken.no) is an online accounting\
    \ system aimed at making accounting easy for small businesses. The API Module\
    \ allows other systems to integrate with Fiken. This document describes Fiken's\
    \ API.\n\n## Using the API\nUse of this API in production environments on live\
    \ data is normally associated with a fee for the end user (company). API access\
    \ costs 99kr per month and can be ordered through the Module access page under\
    \ Settings in your Fiken account. If you have any questions regarding the API\
    \ pricing, contact us at <api@fiken.no>.\n\nThe API provides two different ways\
    \ of authorizing requests.\n\n  1. OAuth2\n  2. Personal API tokens\n\nThird parties\
    \ that wish to integrate with Fiken on behalf of their customers should use the\
    \ OAuth2 authorization method. In order to develop OAuth2 applications that integrate\
    \ with this API you must log into your Fiken account and check the box saying\
    \ that you are a developer (**Rediger konto -> Profil -> Andre innstillinger**).\
    \ This will allow you to create an App by clicking on the \"API\" tab under Brukerinnstillinger.\
    \ If you don't have an existing Fiken account you can create a new user and demo\
    \ company (demoforetak) at no charge. Send an email to <api@fiken.no> to get free\
    \ access to Fiken for longer than the included 30 day free trial period. \n\n\
    Upon creation of the new App you will be provided a Client ID and Client Secret\
    \ that are needed for the OAuth2 authorization flow.\n\nThis will allow you to\
    \ use the API during development with up to 5 users. If you would like to use\
    \ the API with more than 5 users and gain production status, you will need to\
    \ send an email to <api@fiken.no> to gain full access to the API module.\n\nFiken\
    \ customers that wish to integrate their own solutions with this API can use personal\
    \ API tokens. Personal API tokens can be created in **Rediger konto -> API ->\
    \ Personlige API-nÃ¸kler**. Note that personal API tokens do not expire.\n\n##\
    \ Base URL\nAll URLs start with https://api.fiken.no/api/v2. Note that TLS is\
    \ required, unencrypted HTTP is not supported. Although we currently redirect\
    \ HTTP requests to HTTPS, you are not allowed to this with your application as\
    \ using HTTP is a security risk. In the future we might respond with 403 Forbidden\
    \ instead.\n\n## Concurrent requests / rate limiting\nYou are only allowed to\
    \ make a single concurrent API-request. Sending multiple requests concurrently\
    \ may result in a 429 error response. If you break this rule you might be banned.\
    \ In case of a ban please contact us to be unbanned.\n\nAPI calls may be slowed\
    \ if you execute more than 4 requests per second.\n\n## Personal API tokens\n\n\
    Personal API tokens can be created in **Rediger konto -> API**. Personal API tokens\
    \ never expire and can be revoked from the same place.\n\nTo use a personal API\
    \ token simply send it as a bearer token in the `Authorization` header:\n\n  \
    \  GET https://api.fiken.no/api/v2/companies\n    Authorization: Bearer <api token>\n\
    \n## Authorization with OAuth2\nFiken API V2 uses OAuth 2.0 for authorizing API\
    \ requests. Authorized requests to the API should use an `Authorization` header\
    \ with the value `Bearer <TOKEN>` where `<TOKEN>` is an access token obtained\
    \ through the OAuth flow.\n\n### Authorize Endpoint\n\nTo start the OAuth flow\
    \ in order to obtain an access token for a user, you will first have to get consent\
    \ from the user. To do this, direct your user to the authorization endpoint:\n\
    \n    GET https://fiken.no/oauth/authorize?response_type=code&client_id=CLIENT_ID&redirect_uri=REDIRECT_URI&state=STATE\n\
    \nIf the user is logged in and accepts your request, the user is redirected back\
    \ to your redirect url. If the user is not logged in, the regular Fiken.no login\
    \ form is presented first, requiring the user to authenticate before accepting\
    \ or rejecting your request.\n\nIf the user rejects the request or if there is\
    \ an error in your request, the user is redirected back to your redirect url with\
    \ the parameters `error` and `error_description`. If the user rejected the request\
    \ the error code will be `access_denied`.\n\n#### Parameters\n\n| Name       \
    \   | Description                                                            \
    \                                          |\n| :------------ | :---------------------------------------------------------------------------------------------------------------\
    \ |\n| response_type | **Required** Should always be the value `code`        \
    \                                             |\n| client_id     | **Required**\
    \ The client id you received from Fiken when you registered your application \
    \                         |\n| redirect_uri  | **Required** The URL in your application\
    \ where users will be sent with an authorization code after authorization |\n\
    | state         | **Required** An unguessable random string, used to protect against\
    \ CSRF attacks                                  |\n\n\n### Token Endpoint\n\n\
    If the user accepts your request, Fiken redirects the user back to your `redirect_uri`\
    \ with a parameter named `code` as well as the state you provided in the previous\
    \ step in the `state` parameter. This temporary code will expire after a short\
    \ while.\n\nThe temporary authorization code can be exchanged for an access token\
    \ at the token endpoint.\n\nThe token endpoint is protected with Http Basic Authentication\
    \ and you should use your application client id and client secret as credentials\
    \ to authenticate.\n\n    POST https://fiken.no/oauth/token\n    Content-Type:\
    \ application/x-www-form-urlencoded\n    Authorization: Basic dXNlIHlvdXIgY2xpZW50IGlkOmFuZCBjbGllbnQgc2VjcmV0\n\
    \n    grant_type=authorization_code&code=AUTHCODE&redirect_uri=REDIRECT_URI&state=STATE\n\
    \nThe response will contain the access token, a refresh token (see below) as well\
    \ as information about the expiry time for the token.\n\n    {\n      \"access_token\"\
    : \"K2QwoFp4ZfugWLWk7Ipu9kni5cyv3luXKQ-GDShvV2g=\",\n      \"refresh_token\":\
    \ \"naFOD_j8m6PFGcP0pfImVZlSxKklHLbgj9Hzao4rhg8=\",\n      \"token_type\": \"\
    bearer\",\n      \"expires_in\": 86157\n    }\n\nIf an error occurs during the\
    \ token exchange request, an error object is returned with an error and an error\
    \ description.\n\n    {\n        \"error\": \"invalid_grant\",\n        \"error_description\"\
    : \"The authorization code is invalid or expired.\"\n    }\n\n#### Parameters\n\
    \n| Name         | Description                                               \
    \                                                       |\n| :----------- | :---------------------------------------------------------------------------------------------------------------\
    \ |\n| grant_type   | **Required** Should be the value `authorization_code`  \
    \                                                          |\n| code         |\
    \ **Required** The authorization code that was received in the redirect from the\
    \ authorize endpoint                |\n| redirect_uri | **Required** The URL in\
    \ your application where users will be sent with an authorization code after authorization\
    \ |\n| state        | **Required** An unguessable random string, used to protect\
    \ against CSRF attacks                                  |\n\n### Refresh Tokens\n\
    \nIf an access token has expired you can use the refresh token that was sent in\
    \ the response from the token endpoint to get a new access token.\n\nNote that\
    \ if the user has revoked the consent to your app, the refresh token will no longer\
    \ be valid.\n\nTo get a new access token from the refresh token, use the token\
    \ endpoint with the grant type `refresh_token`:\n\n    POST https://fiken.no/oauth/token\n\
    \    Content-Type: application/x-www-form-urlencoded\n    Authorization: Basic\
    \ dXNlIHlvdXIgY2xpZW50IGlkOmFuZCBjbGllbnQgc2VjcmV0\n\n    grant_type=refresh_token&refresh_token=REFRESH_TOKEN\n\
    \nThe response contains a fresh access token along with a possibly updated refresh\
    \ token:\n\n    {\n      \"access_token\": \"K2QwoFp4ZfugWLWk7Ipu9kni5cyv3luXKQ-GDShvV2g=\"\
    ,\n      \"refresh_token\": \"naFOD_j8m6PFGcP0pfImVZlSxKklHLbgj9Hzao4rhg8=\",\n\
    \      \"token_type\": \"bearer\",\n      \"expires_in\": 86157\n    }\n\n####\
    \ Parameters\n\n| Name         | Description                                 \
    \                                                                     |\n| :-----------\
    \ | :---------------------------------------------------------------------------------------------------------------\
    \ |\n| grant_type   | **Required** Should be the value `refresh_token`       \
    \                                                          |\n| refresh_token|\
    \ **Required** The refresh token last returned for this user from the token endpoint\
    \                               |\n\n### Using Access Tokens in API Requests\n\
    \nTo execute API requests on behalf of the end user, send the access token obtained\
    \ at the token endpoint as a bearer token, as in this example:\n\n    GET https://api.fiken.no/api/v2/companies\n\
    \    Authorization: Bearer <access_token_value>\n\n### Revoking tokens\n\nTo revoke\
    \ an access token and refresh token use the Revoke Token endpoint.\n\nThe Revoke\
    \ Token endpoint disables the application grant, the access token and the corresponding\
    \ refresh token used to authenticate the call. Other access tokens obtained from\
    \ the same refresh token are also revoked.\n\n    POST https://fiken.no/oauth/revoke\n\
    \    Authorization: Bearer <access_token_value>\n\nThe response for a successful\
    \ revocation is 200/OK.\n\n### Managing access\n\nThe end user can manage which\
    \ companies a given app has access to under **Rediger konto -> Sikkerhet -> Apper\
    \ du har gitt tilgang til**. \nAll companies created after the initial consent\
    \ has been given need to be actively added so that the app will have access to\
    \ their information. \nAdditionally the end user can revoke access to any of their\
    \ companies' data as well.\n\n\n## Try It Out\n\nFor each endpoint in the documentation\
    \ below there is a button *Try It Out*. To invoke the API from this documentation\
    \ you need an app and you need to authorize usage for you Fiken.no user.\n\nYour\
    \ app needs to be configured with a redirect URL for this documentation, add `https://api.fiken.no/api/v2/docs/oauth2-redirect.html`\
    \ to the list of redirect URLs for your app.\n\nClick the padlock symbol on any\
    \ of the endpoints and enter your `client_id` and `client_secret` and then press\
    \ *Authorize* to start the OAuth2 authorization flow, then click *Close*.\n\n\
    Enter the required parameters for the endpoint, such as `company_slug`, and then\
    \ press *Execute* to test.\n\n## Request\n\nWe recommend sending the `X-Request-ID`\
    \ header with all requests.\n\n### Request Headers\n| Request  Header        \
    \   | Format   | Description                                                 \
    \      |\n| ----------------          | -------- | -----------------------------\
    \                                     |\n| `X-Request-ID`            | UUID  \
    \   | UUID used to identify the request                                 |\n\n\n\
    \n## Response\n### Response code\nAll HTTP codes should be expected with their\
    \ normal semantics. These are some of the common ones:\n\n* **200** for successful\
    \ GET\n* **201** for successful POST where you get a Location-header for the created\
    \ content\n* **400** when invalid content has be sent (for instance a required\
    \ field is missing, unexpected fields, wrong format, etc)\n* **401** when the\
    \ user is not authenticated\n* **403** when the user does not have the proper\
    \ authorization\n* **404** when the requested content is not found\n* **405**\
    \ When you are trying a method to a resource which doesn't support it (i.e. DELETE\
    \ on an account).\n* **415** Wrong media type. we accept application/json only.\n\
    \n### Response Content\nThe default content type on the result of GET requests\
    \ is application/json. On successful POSTs/PUTs/PATCHs and DELETEs an empty body\
    \ is returned.\n\nFor successful POSTs/PUTs/PATCHs a Location header is given\
    \ in all cases.\n\n## Pagination, Sorting & Filtering\nPagination, sorting and\
    \ filtering query parameters are all optional.\n\n\n| URI                    \
    \                                                 | Pagination? | Sortable? |\
    \ Sortable Fields                       | Filterable? | Filtered Fields      \
    \                                                                            \
    \                                       |\n| :---------                      \
    \                                        |:----------- | :-------- | :-------------\
    \                        | :---        | :---                                \
    \                                                                            \
    \                        |\n| https://api.fiken.no/api/v2/companies          \
    \                        | Yes         | Yes       | createdDate, name, organizationNumber\
    \ | No          |                                                            \
    \                                                                            \
    \ |\n| https://api.fiken.no/api/v2/companies/{companySlug}/accounts          \
    \ | No          | No        |                                       | Yes    \
    \     | fromAccount, toAccount                                               \
    \                                                                   |\n| https://api.fiken.no/api/v2/companies/{companySlug}/accountBalances\
    \    | Yes         | No        |                                       | Yes \
    \        | fromAccount, toAccount                                            \
    \                                                                      |\n| https://api.fiken.no/api/v2/companies/{companySlug}/bankAccounts\
    \       | Yes         | No        |                                       | Yes\
    \         | inactive                                                         \
    \                                                                       |\n| https://api.fiken.no/api/v2/companies/{companySlug}/contacts\
    \           | Yes         | Yes       | createdDate, lastModified            \
    \ | Yes         | supplierNumber, customerNumber, memberNumber, memberNumberString,\
    \ name, organizationNumber, email, group, lastModified, createdDate, inactive,\
    \ phoneNumber  |\n| https://api.fiken.no/api/v2/companies/{companySlug}/creditNotes\
    \        | Yes         | No        |                                       | Yes\
    \         | issueDate, lastModified, settled, customerId                     \
    \                                                                       |\n| https://api.fiken.no/api/v2/companies/{companySlug}/inbox\
    \              | Yes         | Yes       | createdDate, name                 \
    \    | Yes         | status, name                                            \
    \                                                                            \
    \    |\n| https://api.fiken.no/api/v2/companies/{companySlug}/invoices       \
    \    | Yes         | No        |                                       | Yes \
    \        | issueDate, lastModified, dueDate, settled, customerId, orderReference,\
    \ invoiceDraftUuid                                                 |\n| https://api.fiken.no/api/v2/companies/{companySlug}/invoices/drafts\
    \    | Yes         | No        |                                       | No  \
    \        |                                                                   \
    \                                                                      |\n| https://api.fiken.no/api/v2/companies/{companySlug}/journalEntries\
    \     | Yes         | No        |                                       | Yes\
    \         | date                                                             \
    \                                                                       |\n| https://api.fiken.no/api/v2/companies/{companySlug}/offers\
    \             | Yes         | No        |                                    \
    \   | No          |                                                          \
    \                                                                            \
    \   |\n| https://api.fiken.no/api/v2/companies/{companySlug}/orderConfirmations\
    \ | Yes         | No        |                                       | No     \
    \     |                                                                      \
    \                                                                   |\n| https://api.fiken.no/api/v2/companies/{companySlug}/products\
    \           | Yes         | No        |                                      \
    \ | Yes         | name, productNumber, active, createdDate, lastModified     \
    \                                                                            \
    \ |\n| https://api.fiken.no/api/v2/companies/{companySlug}/projects          \
    \ | Yes         | No        |                                       | Yes    \
    \     | completed                                                            \
    \                                                                   |\n| https://api.fiken.no/api/v2/companies/{companySlug}/purchases\
    \          | Yes         | Yes       | createdDate                           |\
    \ No          | date                                                         \
    \                                                                           |\n\
    | https://api.fiken.no/api/v2/companies/{companySlug}/purchases/drafts   | Yes\
    \         | No        |                                       | No          |\
    \                                                                            \
    \                                                             |\n| https://api.fiken.no/api/v2/companies/{companySlug}/sales\
    \              | Yes         | No        |                                   \
    \    | Yes         | saleNumber, lastModified, date, contactId               \
    \                                                                            \
    \    |\n| https://api.fiken.no/api/v2/companies/{companySlug}/sales/drafts   \
    \    | Yes         | No        |                                       | No  \
    \        |                                                                   \
    \                                                                      |\n| https://api.fiken.no/api/v2/companies/{companySlug}/transactions\
    \       | Yes         | No        |                                       | Yes\
    \         | createdDate, lastModified                                        \
    \                                                                       |\n\n\
    ### Pagination\nBy default the API sets `page=0` and `pageSize=25` and returns\
    \ the first 25 elements in a collection resource, if nothing else is specified.\n\
    PageSize has a maximum value of 100 meaning that you can only access at most 100\
    \ elements at once.\n\nTo request a collection resource with pagination, query\
    \ the resource with the query filters page and pageSize, note that both query\
    \ parameters need to be set to enable pagination.\nThe page counter starts at\
    \ 0. The response will contain up to Fiken-Api-Page-Size elements and the response\
    \ headers below, detailing how many elements the resource has in total and the\
    \ total number of pages as well.\n\nBy default the API returns the resources in\
    \ the order they were created, if nothing else is specified in the documentation.\n\
    \n#### Pagination Response Headers\n| Response Header           | Format   | Description\
    \                                                       |\n| ----------------\
    \          | -------- | -----------------------------                        \
    \             |\n| `Fiken-Api-Page`          | integer  | From the request header\
    \                                           |\n| `Fiken-Api-Page-Size`     | integer\
    \  | From the request header                                           |\n| `Fiken-Api-Page-Count`\
    \    | integer  | The total number of pages in this resource with this page size\
    \    |\n| `Fiken-Api-Result-Count`  | integer  | The total number of elements\
    \ in this resource                     |\n\n### Sorting\nTo change the sort order\
    \ for a resource, set the sortBy query parameter to a sort field in either ascending\
    \ or descending order. Ex: `https://api.fiken.no/api/v2/companies?sortBy=name%20asc`\n\
    \n### Filtering\nSome collections support filtering, and depending on the type\
    \ of field, different filters can be used. Dates are the most complex, and allow\
    \ you do apply different filters with different parameter names. For instance,\
    \ for a field called date, the following mutations are available:\n\n| Parameter\
    \ | Field | Format    | Description                                   |\n| ---\
    \       |---    | ---       |---                                            |\n\
    |  `date`   |date\t|yyyy-MM-dd\t|date equal to parameter value               \
    \   |\n|  `dateLe`\t|date\t|yyyy-MM-dd\t|date less than or equal to parameter\
    \ value     |\n|  `dateLt`\t|date\t|yyyy-MM-dd\t|date less than parameter value\
    \                 |\n|  `dateGe`\t|date\t|yyyy-MM-dd\t|date greater than or equal\
    \ to parameter value  |\n|  `dateGt`\t|date\t|yyyy-MM-dd\t|date greater than parameter\
    \ value              |\n\nAll date-fields will have these mutations of parameter\
    \ name that applies\n\n## Data Types\nThese are simple data-types that are used\
    \ in several of our objects.\n\n### Date\nDates are represented as strings formatted\
    \ as yyyy-MM-dd.\n\"Last modified\" returns the date of last modification of the\
    \ object. \nIf the object was never modified after creation, last modified date\
    \ is equal to created date. \n\n##### Examples:\nJanuary 2nd, 1970: \"1970-01-02\"\
    \n\n### Amount\nAmounts are always represented as a number, and specifies the\
    \ number of cents in the amount. Fractions will be ignored.\n\n##### Examples:\n\
    One thousand: 100000\n\nOne hundred and twelve cents: 10012\n\n### Account\nAn\
    \ account is a string with either four digits, or four digits, a colon and five\
    \ digits (\"reskontro\").\n\n##### Examples:\n3020\n\n1500:10001\n\n### VAT Code\n\
    Fiken's VAT codes are based upon Sticos mvakoder. To see all VAT codes go to Fiken\
    \ support, check the \"Mva kode\"-selector in the Fiken web interface while creating\
    \ a genereal ledger item (\"Fri postering\"). \nSee below the mapping between\
    \ VAT codes and types (codes are used at the transaction level while types are\
    \ used for sales and purchases).\n\n| Vat Code | Vat Type                    \
    \                                                                            \
    \                                 | Valid for Purchases/Sales    | \n| ---   \
    \   |---                                                                     \
    \                                                                  | ---     \
    \                     |                                         \n|  0/7     |NONE\
    \ (Ingen - KJÃP_INGEN_MVABEHANDLING/SALG_INNTEKTER_UTEN_MVABEHANDLING)\t     \
    \                                                         |Both\t            \
    \             |\n|  1/3\t   |HIGH (HÃ¸y - KJÃP/SALG_MED_HÃY_SATS)\t           \
    \                                                                            \
    \               |Both                          |\n|  11/31   |MEDIUM (Middels\
    \ - KJÃP/SALG_MED_MIDDELS_SATS)\t                                            \
    \                                              |Both         \t             |\n\
    |  12/32   |RAW_FISH (RÃ¥fisk - KJÃP/SALG_MED_RÃFISK_SATS)\t                  \
    \                                                                        |Both\
    \   \t                     |\n|  13/33   |LOW (Lav - KJÃP/SALG_MED_LAV_SATS)\t\
    \                                                                            \
    \                          |Both\t                         |\n|  52\t   |EXEMPT_IMPORT_EXPORT\
    \ (Fritatt import/export - SALG_UTFÃRSEL_AV_VARER_OG_TJENESTER)              \
    \                                          |Sales\t                     |\n| \
    \ 5\t   |EXEMPT (Fritatt - SALG_FRITATT_FOR_MVA_AVGIFTSFRITT)\t              \
    \                                                                    |Sales  \
    \    \t                 |\n|  6\t   |OUTSIDE (Utenfor - SALG_FRITATT_FOR_MVA_UTENFOR_AVGIFTSOMRÃ\
    DET)\t                                                                       \
    \   |Sales\t                     |\n|  51\t   |EXEMPT_REVERSE (Fritatt omvendt\
    \ - SALG_INNENLANDSK_OMSETNING_MED_OMVENDT_AVGIFTPLIKT)\t                    \
    \                              |Sales\t                     |\n|  14\t   |HIGH_DIRECT\
    \ (HÃ¸y direkt - KUN_KJÃPSMVA_HÃY_SATS)\t                                     \
    \                                                 |Purchases\t               \
    \  |\n|  21\t   |HIGH_BASIS (HÃ¸y grunnlag - KUN_GRUNNLAG_KJÃPSMVA_HÃY_SATS)\t\
    \                                                                            \
    \  |Purchases\t                 |\n|  15\t   |MEDIUM_DIRECT (Middels direkte -\
    \ KUN_KJÃPSMVA_MIDDELS_SATS)\t                                               \
    \                               |Purchases\t                 |\n|  22\t   |MEDIUM_BASIS\
    \ (Middels grunnlag - KUN_GRUNNLAG_KJÃPSMVA_MIDDELS_SATS)\t                  \
    \                                                |Purchases\t                \
    \ |\n|  23\t   |NONE_IMPORT_BASIS (Ingen import grunnlag - KUN_GRUNNLAG_KJÃPSMVA_INGEN_SATS)\t\
    \                                                          |Purchases\t      \
    \           |\n|  86\t   |HIGH_FOREIGN_SERVICE_DEDUCTIBLE (Tjeneste utlandet -\
    \ TJENESTER_KJÃPT_FRA_UTLANDET_MED_FRADRAG_FOR_HÃY_MVA)\t                    \
    \          |Purchases\t                 |\n|  87\t   |HIGH_FOREIGN_SERVICE_NONDEDUCTIBLE\
    \ (Tjeneste utlandet uten fradrag - TJENESTER_KJÃPT_FRA_UTLANDET_UTEN_FRADRAG_FOR_HÃ\
    Y_MVA)\t              |Purchases\t                 |\n|  88\t   |LOW_FOREIGN_SERVICE_DEDUCTIBLE\
    \ (Lav tjeneste utlandet - TJENESTER_KJÃPT_FRA_UTLANDET_MED_FRADRAG_FOR_LAV_MVA)\t\
    \                          |Purchases\t                 |\n|  89\t   |LOW_FOREIGN_SERVICE_NONDEDUCTIBLE\
    \ (Lav tjeneste utlandet uten fradrag - TJENESTER_KJÃPT_FRA_UTLANDET_UTEN_FRADRAG_FOR_LAV_MVA)\t\
    \          |Purchases\t                 |\n|  91\t   |HIGH_PURCHASE_OF_EMISSIONSTRADING_OR_GOLD_DEDUCTIBLE\
    \ (Gull - KJÃP_AV_KLIMAKVOTER_ELLER_GULL_MED_FRADRAG_FOR_MVA)\t              \
    \        |Purchases\t                 |\n|  92\t   |HIGH_PURCHASE_OF_EMISSIONSTRADING_OR_GOLD_NONDEDUCTIBLE\
    \ (Gull uten fradrag - KJÃP_AV_KLIMAKVOTER_ELLER_GULL_UTEN_FRADRAG_FOR_MVA)\t\
    \      |Purchases\t                 |\n"
  title: Fiken API
  version: 2.0.0
servers:
- url: https://api.fiken.no/api/v2
security:
- fiken_api_oauth: []
paths:
  /user:
    get:
      description: Returns information about the user
      operationId: getUser
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userinfo'
          description: OK
      tags:
      - user
  /companies:
    get:
      description: "Returns all companies from the system that the user has access\
        \ to. The user can update which companies a given app has \naccess to in Fiken\
        \ under Brukerinnstillinger -> Sikkerhet -> Apper du har gitt tilgang til.\n"
      operationId: getCompanies
      parameters:
      - description: |
          Returns the number of the page to return. Valid page values are integers from 0 to the total number of pages.
          Default value is 0.
        explode: true
        in: query
        name: page
        required: false
        schema:
          default: 0
          minimum: 0
          type: integer
        style: form
      - description: |
          Defines the number of entries to return on each page. Maximum number of results that can be returned at one time are 100.
          Default value is 25.
        explode: true
        in: query
        name: pageSize
        required: false
        schema:
          default: 25
          maximum: 100
          minimum: 1
          type: integer
        style: form
      - explode: true
        in: query
        name: sortBy
        required: false
        schema:
          default: name asc
          description: Sorts results in either ascending (asc) or descending (desc)
            order based on the parameter value.
          enum:
          - createdDate asc
          - createdDate desc
          - name asc
          - name desc
          - organizationNumber asc
          - organizationNumber desc
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/company'
                type: array
          description: OK
          headers:
            Fiken-Api-Page:
              description: From the request header
              explode: false
              schema:
                type: integer
              style: simple
            Fiken-Api-Page-Size:
              description: From the request header
              explode: false
              schema:
                type: integer
              style: simple
            Fiken-Api-Page-Count:
              description: The total number of pages in this resource with this page
                size
              explode: false
              schema:
                type: integer
              style: simple
            Fiken-Api-Result-Count:
              description: The total number of elements in this resource
              explode: false
              schema:
                type: integer
              style: simple
      tags:
      - companies
  /companies/{companySlug}:
    get:
      description: Returns company associated with slug.
      operationId: getCompany
      parameters:
      - description: Slug of company to retrieve
        explode: false
        in: path
        name: companySlug
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/company'
          description: OK
      tags:
      - companies
  /companies/{companySlug}/accounts:
    get:
      description: |
        Retrieves the bookkeeping accounts for the current year
      operationId: getAccounts
      parameters:
      - description: Slug of company to retrieve
        explode: false
        in: path
        name: companySlug
        required: true
        schema:
          type: string
        style: simple
      - description: Filter parameter specifying which account numbers to return.
          Specify using the from and to parameters (excluding subaccount).
        example: 1000
        explode: true
        in: query
        name: fromAccount
        required: false
        schema:
          format: int64
          type: integer
        style: form
      - description: Filter parameter specifying which account numbers to return.
          Specify using the from and to parameters (excluding subaccount).
        example: 2000
        explode: true
        in: query
        name: toAccount
        required: false
        schema:
          format: int64
          type: integer
        style: form
      - description: |
          Returns the number of the page to return. Valid page values are integers from 0 to the total number of pages.
          Default value is 0.
        explode: true
        in: query
        name: page
        required: false
        schema:
          default: 0
          minimum: 0
          type: integer
        style: form
      - description: |
          Defines the number of entries to return on each page. Maximum number of results that can be returned at one time are 100.
          Default value is 25.
        explode: true
        in: query
        name: pageSize
        required: false
        schema:
          default: 25
          maximum: 100
          minimum: 1
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/account'
                type: array
          description: OK
          headers:
            Fiken-Api-Page:
              description: From the request header
              explode: false
              schema:
                type: integer
              style: simple
            Fiken-Api-Page-Size:
              description: From the request header
              explode: false
              schema:
                type: integer
              style: simple
            Fiken-Api-Page-Count:
              description: The total number of pages in this resource with this page
                size
              explode: false
              schema:
                type: integer
              style: simple
            Fiken-Api-Result-Count:
              description: The total number of elements in this resource
              explode: false
              schema:
                type: integer
              style: simple
      tags:
      - accounts
  /companies/{companySlug}/accounts/{accountCode}:
    get:
      description: |
        Retrieves the specified bookkeping account.
        An account is a string with either four digits, or four digits, a colon and five digits ("reskontro").
              Examples:
              3020 and 1500:10001
      operationId: getAccount
      parameters:
      - description: Slug of company to retrieve
        explode: false
        in: path
        name: companySlug
        required: true
        schema:
          type: string
        style: simple
      - description: Code number of the bookkeeping account to retrieve for the current
          year.
        explode: false
        in: path
        name: accountCode
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/account'
          description: OK
      tags:
      - accounts
  /companies/{companySlug}/accountBalances:
    get:
      description: |
        Retrieves the bookkeeping accounts and closing balances for a given date.
        An account is a string with either four digits, or four digits, a colon and five digits ("reskontro").
        Examples:
        3020 and 1500:10001
      operationId: getAccountBalances
      parameters:
      - description: Slug of company to retrieve
        explode: false
        in: path
        name: companySlug
        required: true
        schema:
          type: string
        style: simple
      - description: Filter parameter specifying which account numbers to return.
          Specify using the from and to parameters (excluding subaccount).
        example: 1000
        explode: true
        in: query
        name: fromAccount
        required: false
        schema:
          format: int64
          type: integer
        style: form
      - description: Filter parameter specifying which account numbers to return.
          Specify using the from and to parameters (excluding subaccount).
        example: 2000
        explode: true
        in: query
        name: toAccount
        required: false
        schema:
          format: int64
          type: integer
        style: form
      - description: |
          Returns the number of the page to return. Valid page values are integers from 0 to the total number of pages.
          Default value is 0.
        explode: true
        in: query
        name: page
        required: false
        schema:
          default: 0
          minimum: 0
          type: integer
        style: form
      - description: |
          Defines the number of entries to return on each page. Maximum number of results that can be returned at one time are 100.
          Default value is 25.
        explode: true
        in: query
        name: pageSize
        required: false
        schema:
          default: 25
          maximum: 100
          minimum: 1
          type: integer
        style: form
      - description: |
          Dates are represented as strings formatted as YYYY-MM-DD.
          Example: January 1st, 1970: "1970-01-01"
        explode: true
        in: query
        name: date
        required: true
        schema:
          format: date
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/accountBalance'
                type: array
          description: OK
          headers:
            Fiken-Api-Page:
              description: From the request header
              explode: false
              schema:
                type: integer
              style: simple
            Fiken-Api-Page-Size:
              description: From the request header
              explode: false
              schema:
                type: integer
              style: simple
            Fiken-Api-Page-Count:
              description: The total number of pages in this resource with this page
                size
              explode: false
              schema:
                type: integer
              style: simple
            Fiken-Api-Result-Count:
              description: The total number of elements in this resource
              explode: false
              schema:
                type: integer
              style: simple
      tags:
      - account balances
  /companies/{companySlug}/accountBalances/{accountCode}:
    get:
      description: Retrieves the specified bookkeping account and balance for a given
        date.
      operationId: getAccountBalance
      parameters:
      - description: Slug of company to retrieve
        explode: false
        in: path
        name: companySlug
        required: true
        schema:
          type: string
        style: simple
      - description: Code number of the bookkeeping account to retrieve
        explode: false
        in: path
        name: accountCode
        required: true
        schema:
          type: string
        style: simple
      - description: |
          Dates are represented as strings formatted as YYYY-MM-DD.
          Example: January 1st, 1970: "1970-01-01"
        explode: true
        in: query
        name: date
        required: true
        schema:
          format: date
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/accountBalance'
          description: OK
      tags:
      - account balances
  /companies/{companySlug}/bankAccounts:
    get:
      description: Retrieves all bank accounts associated with the company.
      operationId: getBankAccounts
      parameters:
      - description: Slug of company to retrieve
        explode: false
        in: path
        name: companySlug
        required: true
        schema:
          type: string
        style: simple
      - description: |
          Returns the number of the page to return. Valid page values are integers from 0 to the total number of pages.
          Default value is 0.
        explode: true
        in: query
        name: page
        required: false
        schema:
          default: 0
          minimum: 0
          type: integer
        style: form
      - description: |
          Defines the number of entries to return on each page. Maximum number of results that can be returned at one time are 100.
          Default value is 25.
        explode: true
        in: query
        name: pageSize
        required: false
        schema:
          default: 25
          maximum: 100
          minimum: 1
          type: integer
        style: form
      - description: Return all active bank accounts (false) or all inactive bank
          accounts (true).
        explode: true
        in: query
        name: inactive
        required: false
        schema:
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/bankAccountResult'
                type: array
          description: OK
          headers:
            Fiken-Api-Page:
              description: From the request header
              explode: false
              schema:
                type: integer
              style: simple
            Fiken-Api-Page-Size:
              description: From the request header
              explode: false
              schema:
                type: integer
              style: simple
            Fiken-Api-Page-Count:
              description: The total number of pages in this resource with this page
                size
              explode: false
              schema:
                type: integer
              style: simple
            Fiken-Api-Result-Count:
              description: The total number of elements in this resource
              explode: false
              schema:
                type: integer
              style: simple
      tags:
      - bank accounts
    post:
      description: |
        Creates a new bank account. The Location response header returns the URL of the newly created bank account.
        Possible types of bank accounts are NORMAL, TAX_DEDUCTION, FOREIGN, and CREDIT_CARD. The field "foreignService" should only be filled out for accounts of type FOREIGN.
      operationId: createBankAccount
      parameters:
      - description: Slug of company to retrieve
        explode: false
        in: path
        name: companySlug
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/bankAccountRequest'
        required: true
      responses:
        "201":
          description: Created
          headers:
            Location:
              description: Full URL of newly created bank account
              explode: false
              schema:
                format: uri
                type: string
              style: simple
      tags:
      - bank accounts
  /companies/{companySlug}/bankAccounts/{bankAccountId}:
    get:
      description: Retrieves specified bank account.
      operationId: getBankAccount
      parameters:
      - description: Slug of company to retrieve
        explode: false
        in: path
        name: companySlug
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: bankAccountId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/bankAccountResult'
          description: OK
      tags:
      - bank accounts
  /companies/{companySlug}/contacts:
    get:
      description: Retrieves all contacts for the specified company.
      operationId: getContacts
      parameters:
      - description: Slug of company to retrieve
        explode: false
        in: path
        name: companySlug
        required: true
        schema:
          type: string
        style: simple
      - description: |
          Returns the number of the page to return. Valid page values are integers from 0 to the total number of pages.
          Default value is 0.
        explode: true
        in: query
        name: page
        required: false
        schema:
          default: 0
          minimum: 0
          type: integer
        style: form
      - description: |
          Defines the number of entries to return on each page. Maximum number of results that can be returned at one time are 100.
          Default value is 25.
        explode: true
        in: query
        name: pageSize
        required: false
        schema:
          default: 25
          maximum: 100
          minimum: 1
          type: integer
        style: form
      - description: |
          Filter based on date of last modification. Returns results that were last modified on the date provided as a parameter value.
          Dates are represented as strings formatted as YYYY-MM-DD.
          Example: January 1st, 1970: "1970-01-01"
        explode: true
        in: query
        name: lastModified
        required: false
        schema:
          format: date
          type: string
        style: form
      - description: |
          Returns results that have been last modified before or on the date provided as a parameter value.
          Dates are represented as strings formatted as YYYY-MM-DD.
          Example: January 1st, 1970: "1970-01-01"
        explode: true
        in: query
        name: lastModifiedLe
        required: false
        schema:
          format: date
          type: string
        style: form
      - description: |
          Returns results that have been last modified strictly before the date provided as a parameter value.
          Dates are represented as strings formatted as YYYY-MM-DD.
          Example: January 1st, 1970: "1970-01-01"
        explode: true
        in: query
        name: lastModifiedLt
        required: false
        schema:
          format: date
          type: string
        style: form
      - description: |
          Returns results that have been last modified after or on the date provided as a parameter value.
          Dates are represented as strings formatted as YYYY-MM-DD.
          Example: January 1st, 1970: "1970-01-01"
        explode: true
        in: query
        name: lastModifiedGe
        required: false
        schema:
          format: date
          type: string
        style: form
      - description: |
          Returns results that have been last modified strictly after the date provided as a parameter value.
          Dates are represented as strings formatted as YYYY-MM-DD.
          Example: January 1st, 1970: "1970-01-01"
        explode: true
        in: query
        name: lastModifiedGt
        required: false
        schema:
          format: date
          type: string
        style: form
      - description: |
          Dates are represented as strings formatted as YYYY-MM-DD.
          Example: January 1st, 1970: "1970-01-01"
        explode: true
        in: query
        name: createdDate
        required: false
        schema:
          format: date
          type: string
        style: form
      - description: |
          Returns results that were created before or on the date provided as a parameter value.
          Dates are represented as strings formatted as YYYY-MM-DD.
          Example: January 1st, 1970: "1970-01-01"
        explode: true
        in: query
        name: createdDateLe
        required: false
        schema:
          format: date
          type: string
        style: form
      - description: |
          Returns results that were created strictly before the date provided as a parameter value.
          Dates are represented as strings formatted as YYYY-MM-DD.
          Example: January 1st, 1970: "1970-01-01"
        explode: true
        in: query
        name: createdDateLt
        required: false
        schema:
          format: date
          type: string
        style: form
      - description: |
          Returns results that were created after or on the date provided as a parameter value.
          Dates are represented as strings formatted as YYYY-MM-DD.
          Example: January 1st, 1970: "1970-01-01"
        explode: true
        in: query
        name: createdDateGe
        required: false
        schema:
          format: date
          type: string
        style: form
      - description: |
          Returns results that were created strictly after the date provided as a parameter value.
          Dates are represented as strings formatted as YYYY-MM-DD.
          Example: January 1st, 1970: "1970-01-01"
        explode: true
        in: query
        name: createdDateGt
        required: false
        schema:
          format: date
          type: string
        style: form
      - description: Find all results with the supplier number equal to the specified
          parameter.
        explode: true
        in: query
        name: supplierNumber
        required: false
        schema:
          type: integer
        style: form
      - description: Find all results with the customer number equal to the specified
          parameter.
        explode: true
        in: query
        name: customerNumber
        required: false
        schema:
          type: integer
        style: form
      - deprecated: true
        description: Find all results with the member number equal to the specified
          parameter.
        explode: true
        in: query
        name: memberNumber
        required: false
        schema:
          type: integer
        style: form
      - description: Find all results with the member number equal to the specified
          parameter.
        explode: true
        in: query
        name: memberNumberString
        required: false
        schema:
          type: string
        style: form
      - description: Find all results with the name equal to the specified parameter.
        explode: true
        in: query
        name: name
        required: false
        schema:
          type: string
        style: form
      - description: Find all results with the organization number equal to the specified
          parameter.
        explode: true
        in: query
        name: organizationNumber
        required: false
        schema:
          type: string
        style: form
      - description: Find all results with the email equal to the specified parameter.
        explode: true
        in: query
        name: email
        required: false
        schema:
          type: string
        style: form
      - description: "Returns all contacts that are customers. If filter is set for\
          \ both supplier and customer = true, only contacts that are both supplier\
          \ and customer will be returned."
        explode: true
        in: query
        name: customer
        required: false
        schema:
          type: boolean
        style: form
      - description: "Returns all contacts that are suppliers. If filter is set for\
          \ both supplier and customer = true, only contacts that are both supplier\
          \ and customer will be returned."
        explode: true
        in: query
        name: supplier
        required: false
        schema:
          type: boolean
        style: form
      - description: Return all active contacts (false) or all inactive contacts (true).
        explode: true
        in: query
        name: inactive
        required: false
        schema:
          type: boolean
        style: form
      - description: "Return contacts in contact group, exact match only. Groups are\
          \ only used for customers, not suppliers."
        explode: true
        in: query
        name: group
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: sortBy
        required: false
        schema:
          default: createdDate asc
          description: Sorts results in either ascending (asc) or descending (desc)
            order based on the parameter value.
          enum:
          - lastModified asc
          - lastModified desc
          - createdDate asc
          - createdDate desc
          type: string
        style: form
      - description: Find all results with the phone number equal to the specified
          parameter.
        explode: true
        in: query
        name: phoneNumber
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/contact'
                type: array
          description: OK
          headers:
            Fiken-Api-Page:
              description: From the request header
              explode: false
              schema:
                type: integer
              style: simple
            Fiken-Api-Page-Size:
              description: From the request header
              explode: false
              schema:
                type: integer
              style: simple
            Fiken-Api-Page-Count:
              description: The total number of pages in this resource with this page
                size
              explode: false
              schema:
                type: integer
              style: simple
            Fiken-Api-Result-Count:
              description: The total number of elements in this resource
              explode: false
              schema:
                type: integer
              style: simple
      tags:
      - contacts
    post:
      description: Creates a new contact. The Location response header returns the
        URL of the newly created contact.
      operationId: createContact
      parameters:
      - description: Slug of company to retrieve
        explode: false
        in: path
        name: companySlug
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/contact'
        required: true
      responses:
        "201":
          description: Created
          headers:
            Location:
              description: Full URL of newly created contact
              explode: false
              schema:
                format: uri
                type: string
              style: simple
      tags:
      - contacts
  /companies/{companySlug}/contacts/{contactId}:
    delete:
      description: Deletes the contact if possible (no associated journal entries/sales/invoices/etc).
        If not possible to delete will set the contact to inactive
      operationId: deleteContact
      parameters:
      - description: Slug of company to retrieve
        explode: false
        in: path
        name: companySlug
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: contactId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      responses:
        "204":
          description: Contact deleted successfully.
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/contact'
          description: Contact set to inactive because it has associated journal entries/sales/invoices/etc.
      tags:
      - contacts
    get:
      description: |
        Retrieves specified contact. ContactId is returned with a GET contacts call as the first returned field.
        ContactId is returned in the Location response header for POST contact.
      operationId: getContact
      parameters:
      - description: Slug of company to retrieve
        explode: false
        in: path
        name: companySlug
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: contactId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/contact'
          description: OK
      tags:
      - contacts
    put:
      description: Updates an existing contact.
      operationId: updateContact
      parameters:
      - description: Slug of company to retrieve
        explode: false
        in: path
        name: companySlug
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: contactId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/contact'
        required: true
      responses:
        "200":
          description: Updated
          headers:
            Location:
              description: Full URL of updated contact
              explode: false
              schema:
                format: uri
                type: string
              style: simple
      tags:
      - contacts
  /companies/{companySlug}/contacts/{contactId}/attachments:
    post:
      description: Creates and adds a new attachment/document to a contact
      operationId: addAttachmentToContact
      parameters:
      - description: Slug of company to retrieve
        explode: false
        in: path
        name: companySlug
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: contactId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/addAttachmentToContact_request'
        required: false
      responses:
        "201":
          description: Created
          headers:
            Location:
              description: Full URL of newly created attachment
              explode: false
              schema:
                format: uri
                type: string
              style: simple
      tags:
      - contacts
  /companies/{companySlug}/contacts/{contactId}/contactPerson:
    get:
      description: |
        Retrieves contact person(s) for a specified contact.
      operationId: getContactContactPerson
      parameters:
      - description: Slug of company to retrieve
        explode: false
        in: path
        name: companySlug
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: contactId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/contactPerson'
                type: array
          description: OK
      tags:
      - contacts
    post:
      description: Adds a new contact person to a contact
      operationId: addContactPersonToContact
      parameters:
      - description: Slug of company to retrieve
        explode: false
        in: path
        name: companySlug
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: contactId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/contactPerson'
        required: true
      responses:
        "200":
          description: Created
          headers:
            Location:
              description: Full URL of newly created contact person
              explode: false
              schema:
                format: uri
                type: string
              style: simple
      tags:
      - contacts
  /companies/{companySlug}/contacts/{contactId}/contactPerson/{contactPersonId}:
    delete:
      description: Delete a contact's contact person.
      operationId: deleteContactContactPerson
      parameters:
      - description: Slug of company to retrieve
        explode: false
        in: path
        name: companySlug
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: contactId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      - explode: false
        in: path
        name: contactPersonId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      responses:
        "204":
          description: Deleted
      tags:
      - contacts
    get:
      description: |
        Retrieves specified contact person
      operationId: getContactPerson
      parameters:
      - description: Slug of company to retrieve
        explode: false
        in: path
        name: companySlug
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: contactId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      - explode: false
        in: path
        name: contactPersonId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/contactPerson'
          description: OK
      tags:
      - contacts
    put:
      description: Updates an existing contact person.
      operationId: updateContactContactPerson
      parameters:
      - description: Slug of company to retrieve
        explode: false
        in: path
        name: companySlug
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: contactId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      - explode: false
        in: path
        name: contactPersonId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/contactPerson'
        required: true
      responses:
        "200":
          description: Updated
          headers:
            Location:
              description: Full URL of updated contact person
              explode: false
              schema:
                format: uri
                type: string
              style: simple
      tags:
      - contacts
  /companies/{companySlug}/groups:
    get:
      description: Returns all customer groups for given company
      operationId: getGroups
      parameters:
      - description: Slug of company to retrieve
        explode: false
        in: path
        name: companySlug
        required: true
        schema:
          type: string
        style: simple
      - description: |
          Returns the number of the page to return. Valid page values are integers from 0 to the total number of pages.
          Default value is 0.
        explode: true
        in: query
        name: page
        required: false
        schema:
          default: 0
          minimum: 0
          type: integer
        style: form
      - description: |
          Defines the number of entries to return on each page. Maximum number of results that can be returned at one time are 100.
          Default value is 25.
        explode: true
        in: query
        name: pageSize
        required: false
        schema:
          default: 25
          maximum: 100
          minimum: 1
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  type: string
                type: array
          description: OK
          headers:
            Fiken-Api-Page:
              description: From the request header
              explode: false
              schema:
                type: integer
              style: simple
            Fiken-Api-Page-Size:
              description: From the request header
              explode: false
              schema:
                type: integer
              style: simple
            Fiken-Api-Page-Count:
              description: The total number of pages in this resource with this page
                size
              explode: false
              schema:
                type: integer
              style: simple
            Fiken-Api-Result-Count:
              description: The total number of elements in this resource
              explode: false
              schema:
                type: integer
              style: simple
      tags:
      - groups
  /companies/{companySlug}/products/salesReport:
    post:
      description: Creates a report based on provided specifications.
      operationId: createProductSalesReport
      parameters:
      - description: Slug of company to retrieve
        explode: false
        in: path
        name: companySlug
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/productSalesReportRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/productSalesReportResult'
                type: array
          description: OK
      tags:
      - products
  /companies/{companySlug}/journalEntries:
    get:
      description: Returns all general journal entries (posteringer) for the specified
        company.
      operationId: getJournalEntries
      parameters:
      - description: Slug of company to retrieve
        explode: false
        in: path
        name: companySlug
        required: true
        schema:
          type: string
        style: simple
      - description: |
          Returns the number of the page to return. Valid page values are integers from 0 to the total number of pages.
          Default value is 0.
        explode: true
        in: query
        name: page
        required: false
        schema:
          default: 0
          minimum: 0
          type: integer
        style: form
      - description: |
          Defines the number of entries to return on each page. Maximum number of results that can be returned at one time are 100.
          Default value is 25.
        explode: true
        in: query
        name: pageSize
        required: false
        schema:
          default: 25
          maximum: 100
          minimum: 1
          type: integer
        style: form
      - description: |
          Dates are represented as strings formatted as YYYY-MM-DD.
          Example: January 1st, 1970: "1970-01-01"
        explode: true
        in: query
        name: date
        required: false
        schema:
          format: date
          type: string
        style: form
      - description: |
          Filter based on date less than or equal to parameter value.
          Dates are represented as strings formatted as YYYY-MM-DD.
          Example: January 1st, 1970: "1970-01-01"
        explode: true
        in: query
        name: dateLe
        required: false
        schema:
          format: date
          type: string
        style: form
      - description: |
          Filter based on date strictly less than parameter value.
          Dates are represented as strings formatted as YYYY-MM-DD.
          Example: January 1st, 1970: "1970-01-01"
        explode: true
        in: query
        name: dateLt
        required: false
        schema:
          format: date
          type: string
        style: form
      - description: |
          Filter based on date greater than or equal to parameter value.
          Dates are represented as strings formatted as YYYY-MM-DD.
          Example: January 1st, 1970: "1970-01-01"
        explode: true
        in: query
        name: dateGe
        required: false
        schema:
          format: date
          type: string
        style: form
      - description: |
          Filter based on date strictly greater than parameter value
          Dates are represented as strings formatted as YYYY-MM-DD.
          Example: January 1st, 1970: "1970-01-01"
        explode: true
        in: query
        name: dateGt
        required: false
        schema:
          format: date
          type: string
        style: form
      - description: |
          Filter based on date of last modification. Returns results that were last modified on the date provided as a parameter value.
          Dates are represented as strings formatted as YYYY-MM-DD.
          Example: January 1st, 1970: "1970-01-01"
        explode: true
        in: query
        name: lastModified
        required: false
        schema:
          format: date
          type: string
        style: form
      - description: |
          Returns results that have been last modified before or on the date provided as a parameter value.
          Dates are represented as strings formatted as YYYY-MM-DD.
          Example: January 1st, 1970: "1970-01-01"
        explode: true
        in: query
        name: lastModifiedLe
        required: false
        schema:
          format: date
          type: string
        style: form
      - description: |
          Returns results that have been last modified strictly before the date provided as a parameter value.
          Dates are represented as strings formatted as YYYY-MM-DD.
          Example: January 1st, 1970: "1970-01-01"
        explode: true
        in: query
        name: lastModifiedLt
        required: false
        schema:
          format: date
          type: string
        style: form
      - description: |
          Returns results that have been last modified after or on the date provided as a parameter value.
          Dates are represented as strings formatted as YYYY-MM-DD.
          Example: January 1st, 1970: "1970-01-01"
        explode: true
        in: query
        name: lastModifiedGe
        required: false
        schema:
          format: date
          type: string
        style: form
      - description: |
          Returns results that have been last modified strictly after the date provided as a parameter value.
          Dates are represented as strings formatted as YYYY-MM-DD.
          Example: January 1st, 1970: "1970-01-01"
        explode: true
        in: query
        name: lastModifiedGt
        required: false
        schema:
          format: date
          type: string
        style: form
      - description: |
          Dates are represented as strings formatted as YYYY-MM-DD.
          Example: January 1st, 1970: "1970-01-01"
        explode: true
        in: query
        name: createdDate
        required: false
        schema:
          format: date
          type: string
        style: form
      - description: |
          Returns results that were created before or on the date provided as a parameter value.
          Dates are represented as strings formatted as YYYY-MM-DD.
          Example: January 1st, 1970: "1970-01-01"
        explode: true
        in: query
        name: createdDateLe
        required: false
        schema:
          format: date
          type: string
        style: form
      - description: |
          Returns results that were created strictly before the date provided as a parameter value.
          Dates are represented as strings formatted as YYYY-MM-DD.
          Example: January 1st, 1970: "1970-01-01"
        explode: true
        in: query
        name: createdDateLt
        required: false
        schema:
          format: date
          type: string
        style: form
      - description: |
          Returns results that were created after or on the date provided as a parameter value.
          Dates are represented as strings formatted as YYYY-MM-DD.
          Example: January 1st, 1970: "1970-01-01"
        explode: true
        in: query
        name: createdDateGe
        required: false
        schema:
          format: date
          type: string
        style: form
      - description: |
          Returns results that were created strictly after the date provided as a parameter value.
          Dates are represented as strings formatted as YYYY-MM-DD.
          Example: January 1st, 1970: "1970-01-01"
        explode: true
        in: query
        name: createdDateGt
        required: false
        schema:
          format: date
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/journalEntry'
                type: array
          description: OK
          headers:
            Fiken-Api-Page:
              description: From the request header
              explode: false
              schema:
                type: integer
              style: simple
            Fiken-Api-Page-Size:
              description: From the request header
              explode: false
              schema:
                type: integer
              style: simple
            Fiken-Api-Page-Count:
              description: The total number of pages in this resource with this page
                size
              explode: false
              schema:
                type: integer
              style: simple
            Fiken-Api-Result-Count:
              description: The total number of elements in this resource
              explode: false
              schema:
                type: integer
              style: simple
      tags:
      - journal entries
  /companies/{companySlug}/generalJournalEntries:
    post:
      description: Creates a new general journal entry (fri postering).
      operationId: createGeneralJournalEntry
      parameters:
      - description: Slug of company to retrieve
        explode: false
        in: path
        name: companySlug
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/generalJournalEntryRequest'
        required: true
      responses:
        "201":
          description: Created
          headers:
            Location:
              description: Full URL of newly created General Journal Entry
              explode: false
              schema:
                format: uri
                type: string
              style: simple
      tags:
      - journal entries
  /companies/{companySlug}/journalEntries/{journalEntryId}:
    get:
      description: Returns all journal entries within a given company's Journal Entry
        Service
      operationId: getJournalEntry
      parameters:
      - description: Slug of company to retrieve
        explode: false
        in: path
        name: companySlug
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: journalEntryId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/journalEntry'
          description: OK
      tags:
      - journal entries
  /companies/{companySlug}/journalEntries/{journalEntryId}/attachments:
    get:
      description: Returns all attachments for a given Journal Entry
      operationId: getJournalEntryAttachments
      parameters:
      - description: Slug of company to retrieve
        explode: false
        in: path
        name: companySlug
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: journalEntryId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/attachment'
                type: array
          description: OK
      tags:
      - journal entries
    post:
      description: Creates and adds a new attachment to a Journal Entry
      operationId: addAttachmentToJournalEntry
      parameters:
      - description: Slug of company to retrieve
        explode: false
        in: path
        name: companySlug
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: journalEntryId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/addAttachmentToJournalEntry_request'
        required: false
      responses:
        "201":
          description: Created
          headers:
            Location:
              description: Full URL of newly created attachment
              explode: false
              schema:
                format: uri
                type: string
              style: simple
      tags:
      - journal entries
  /companies/{companySlug}/transactions:
    get:
      description: Returns all transactions for the specified company
      operationId: getTransactions
      parameters:
      - description: Slug of company to retrieve
        explode: false
        in: path
        name: companySlug
        required: true
        schema:
          type: string
        style: simple
      - description: |
          Returns the number of the page to return. Valid page values are integers from 0 to the total number of pages.
          Default value is 0.
        explode: true
        in: query
        name: page
        required: false
        schema:
          default: 0
          minimum: 0
          type: integer
        style: form
      - description: |
          Defines the number of entries to return on each page. Maximum number of results that can be returned at one time are 100.
          Default value is 25.
        explode: true
        in: query
        name: pageSize
        required: false
        schema:
          default: 25
          maximum: 100
          minimum: 1
          type: integer
        style: form
      - description: |
          Filter based on date of last modification. Returns results that were last modified on the date provided as a parameter value.
          Dates are represented as strings formatted as YYYY-MM-DD.
          Example: January 1st, 1970: "1970-01-01"
        explode: true
        in: query
        name: lastModified
        required: false
        schema:
          format: date
          type: string
        style: form
      - description: |
          Returns results that have been last modified before or on the date provided as a parameter value.
          Dates are represented as strings formatted as YYYY-MM-DD.
          Example: January 1st, 1970: "1970-01-01"
        explode: true
        in: query
        name: lastModifiedLe
        required: false
        schema:
          format: date
          type: string
        style: form
      - description: |
          Returns results that have been last modified strictly before the date provided as a parameter value.
          Dates are represented as strings formatted as YYYY-MM-DD.
          Example: January 1st, 1970: "1970-01-01"
        explode: true
        in: query
        name: lastModifiedLt
        required: false
        schema:
          format: date
          type: string
        style: form
      - description: |
          Returns results that have been last modified after or on the date provided as a parameter value.
          Dates are represented as strings formatted as YYYY-MM-DD.
          Example: January 1st, 1970: "1970-01-01"
        explode: true
        in: query
        name: lastModifiedGe
        required: false
        schema:
          format: date
          type: string
        style: form
      - description: |
          Returns results that have been last modified strictly after the date provided as a parameter value.
          Dates are represented as strings formatted as YYYY-MM-DD.
          Example: January 1st, 1970: "1970-01-01"
        explode: true
        in: query
        name: lastModifiedGt
        required: false
        schema:
          format: date
          type: string
        style: form
      - description: |
          Dates are represented as strings formatted as YYYY-MM-DD.
          Example: January 1st, 1970: "1970-01-01"
        explode: true
        in: query
        name: createdDate
        required: false
        schema:
          format: date
          type: string
        style: form
      - description: |
          Returns results that were created before or on the date provided as a parameter value.
          Dates are represented as strings formatted as YYYY-MM-DD.
          Example: January 1st, 1970: "1970-01-01"
        explode: true
        in: query
        name: createdDateLe
        required: false
        schema:
          format: date
          type: string
        style: form
      - description: |
          Returns results that were created strictly before the date provided as a parameter value.
          Dates are represented as strings formatted as YYYY-MM-DD.
          Example: January 1st, 1970: "1970-01-01"
        explode: true
        in: query
        name: createdDateLt
        required: false
        schema:
          format: date
          type: string
        style: form
      - description: |
          Returns results that were created after or on the date provided as a parameter value.
          Dates are represented as strings formatted as YYYY-MM-DD.
          Example: January 1st, 1970: "1970-01-01"
        explode: true
        in: query
        name: createdDateGe
        required: false
        schema:
          format: date
          type: string
        style: form
      - description: |
          Returns results that were created strictly after the date provided as a parameter value.
          Dates are represented as strings formatted as YYYY-MM-DD.
          Example: January 1st, 1970: "1970-01-01"
        explode: true
        in: query
        name: createdDateGt
        required: false
        schema:
          format: date
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/transaction'
                type: array
          description: OK
          headers:
            Fiken-Api-Page:
              description: From the request header
              explode: false
              schema:
                type: integer
              style: simple
            Fiken-Api-Page-Size:
              description: From the request header
              explode: false
              schema:
                type: integer
              style: simple
            Fiken-Api-Page-Count:
              description: The total number of pages in this resource with this page
                size
              explode: false
              schema:
                type: integer
              style: simple
            Fiken-Api-Result-Count:
              description: The total number of elements in this resource
              explode: false
              schema:
                type: integer
              style: simple
      tags:
      - transactions
  /companies/{companySlug}/transactions/{transactionId}:
    get:
      description: |
        Returns given transaction with associated id. Transaction id is returned in GET calls for
        sales, purchases, and journal entries.
      operationId: getTransaction
      parameters:
      - description: Slug of company to retrieve
        explode: false
        in: path
        name: companySlug
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: transactionId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/transaction'
          description: OK
      tags:
      - transactions
  /companies/{companySlug}/invoices:
    get:
      description: "Returns all invoices for given company. You can filter based on\
        \ issue date, last modified date, customer ID, and if the invoice is settled\
        \ or not."
      operationId: getInvoices
      parameters:
      - description: Slug of company to retrieve
        explode: false
        in: path
        name: companySlug
        required: true
        schema:
          type: string
        style: simple
      - description: |
          Returns the number of the page to return. Valid page values are integers from 0 to the total number of pages.
          Default value is 0.
        explode: true
        in: query
        name: page
        required: false
        schema:
          default: 0
          minimum: 0
          type: integer
        style: form
      - description: |
          Defines the number of entries to return on each page. Maximum number of results that can be returned at one time are 100.
          Default value is 25.
        explode: true
        in: query
        name: pageSize
        required: false
        schema:
          default: 25
          maximum: 100
          minimum: 1
          type: integer
        style: form
      - description: |
          Dates are represented as strings formatted as YYYY-MM-DD.
          Example: January 1st, 1970: "1970-01-01"
        explode: true
        in: query
        name: issueDate
        required: false
        schema:
          format: date
          type: string
        style: form
      - description: |
          Filter based on date less than or equal to parameter value.
          Dates are represented as strings formatted as YYYY-MM-DD.
          Example: January 1st, 1970: "1970-01-01"
        explode: true
        in: query
        name: issueDateLe
        required: false
        schema:
          format: date
          type: string
        style: form
      - description: |
          Filter based on date strictly less than parameter value.
          Dates are represented as strings formatted as YYYY-MM-DD.
          Example: January 1st, 1970: "1970-01-01"
        explode: true
        in: query
        name: issueDateLt
        required: false
        schema:
          format: date
          type: string
        style: form
      - description: |
          Filter based on date greater than or equal to parameter value.
          Dates are represented as strings formatted as YYYY-MM-DD.
          Example: January 1st, 1970: "1970-01-01"
        explode: true
        in: query
        name: issueDateGe
        required: false
        schema:
          format: date
          type: string
        style: form
      - description: |
          Filter based on date strictly greater than parameter value
          Dates are represented as strings formatted as YYYY-MM-DD.
          Example: January 1st, 1970: "1970-01-01"
        explode: true
        in: query
        name: issueDateGt
        required: false
        schema:
          format: date
          type: string
        style: form
      - description: |
          Filter based on date of last modification. Returns results that were last modified on the date provided as a parameter value.
          Dates are represented as strings formatted as YYYY-MM-DD.
          Example: January 1st, 1970: "1970-01-01"
        explode: true
        in: query
        name: lastModified
        required: false
        schema:
          format: date
          type: string
        style: form
      - description: |
          Returns results that have been last modified before or on the date provided as a parameter value.
          Dates are represented as strings formatted as YYYY-MM-DD.
          Example: January 1st, 1970: "1970-01-01"
        explode: true
        in: query
        name: lastModifiedLe
        required: false
        schema:
          format: date
          type: string
        style: form
      - description: |
          Returns results that have been last modified strictly before the date provided as a parameter value.
          Dates are represented as strings formatted as YYYY-MM-DD.
          Example: January 1st, 1970: "1970-01-01"
        explode: true
        in: query
        name: lastModifiedLt
        required: false
        schema:
          format: date
          type: string
        style: form
      - description: |
          Returns results that have been last modified after or on the date provided as a parameter value.
          Dates are represented as strings formatted as YYYY-MM-DD.
          Example: January 1st, 1970: "1970-01-01"
        explode: true
        in: query
        name: lastModifiedGe
        required: false
        schema:
          format: date
          type: string
        style: form
      - description: |
          Returns results that have been last modified strictly after the date provided as a parameter value.
          Dates are represented as strings formatted as YYYY-MM-DD.
          Example: January 1st, 1970: "1970-01-01"
        explode: true
        in: query
        name: lastModifiedGt
        required: false
        schema:
          format: date
          type: string
        style: form
      - description: |
          Filter based on due date of invoice. Returns results from the date provided as a parameter value.
          Dates are represented as strings formatted as YYYY-MM-DD.
          Example: January 1st, 1970: "1970-01-01"
        explode: true
        in: query
        name: dueDate
        required: false
        schema:
          format: date
          type: string
        style: form
      - description: |
          Returns invoices with a due date before or on the date provided as a parameter value.
          Dates are represented as strings formatted as YYYY-MM-DD.
          Example: January 1st, 1970: "1970-01-01"
        explode: true
        in: query
        name: dueDateLe
        required: false
        schema:
          format: date
          type: string
        style: form
      - description: |
          Returns invoices with a due date that have been last modified strictly before the date provided as a parameter value.
          Dates are represented as strings formatted as YYYY-MM-DD.
          Example: January 1st, 1970: "1970-01-01"
        explode: true
        in: query
        name: dueDateLt
        required: false
        schema:
          format: date
          type: string
        style: form
      - description: |
          Returns invoices with a due date that have been last modified after or on the date provided as a parameter value.
          Dates are represented as strings formatted as YYYY-MM-DD.
          Example: January 1st, 1970: "1970-01-01"
        explode: true
        in: query
        name: dueDateGe
        required: false
        schema:
          format: date
          type: string
        style: form
      - description: |
          Returns invoices with a due date that have been last modified strictly after the date provided as a parameter value.
          Dates are represented as strings formatted as YYYY-MM-DD.
          Example: January 1st, 1970: "1970-01-01"
        explode: true
        in: query
        name: dueDateGt
        required: false
        schema:
          format: date
          type: string
        style: form
      - description: |
          Returns only invoices sent to specified customer. Must be the contactId provided by a GET contacts call.
        explode: true
        in: query
        name: customerId
        required: false
        schema:
          format: int64
          type: integer
        style: form
      - description: |
          When set to true, returns only invoices that have been settled. Otherwise false returns all invoices
          that have not been fully settled.
        explode: true
        in: query
        name: settled
        required: false
        schema:
          type: boolean
        style: form
      - description: Filter based on order reference for a given invoice
        explode: true
        in: query
        name: orderReference
        required: false
        schema:
          type: string
        style: form
      - description: Filter based on the UUID of the invoice draft that was used to
          create a given invoice
        explode: true
        in: query
        name: invoiceDraftUuid
        required: false
        schema:
          format: uuid
          type: string
        style: form
      - explode: true
        in: query
        name: invoiceNumber
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/invoiceResult'
                type: array
          description: OK
          headers:
            Fiken-Api-Page:
              description: From the request header
              explode: false
              schema:
                type: integer
              style: simple
            Fiken-Api-Page-Size:
              description: From the request header
              explode: false
              schema:
                type: integer
              style: simple
            Fiken-Api-Page-Count:
              description: The total number of pages in this resource with this page
                size
              explode: false
              schema:
                type: integer
              style: simple
            Fiken-Api-Result-Count:
              description: The total number of elements in this resource
              explode: false
              schema:
                type: integer
              style: simple
      tags:
      - invoices
    post:
      description: |
        Creates an invoice. This corresponds to "Ny faktura" in Fiken.
        There are two types of invoice lines that can be added to an invoice line: product line or free text line.
        Provide a product Id if you are invoicing a product. All information regarding the price and VAT for this product will be added to the invoice.
        It is however also possible to override the unit amount by sending information in both fields "productId" and "unitAmount".
        An invoice line can also be a free text line meaning that no existing product will be associated with the invoiced line.
        In this case all information regarding the price and VAT of the product or service to be invoiced must be provided.
      operationId: createInvoice
      parameters:
      - description: Slug of company to retrieve
        explode: false
        in: path
        name: companySlug
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/invoiceRequest'
        required: true
      responses:
        "201":
          description: Created
          headers:
            Location:
              description: Full URL of newly created invoice
              explode: false
              schema:
                format: uri
                type: string
              style: simple
      tags:
      - invoices
  /companies/{companySlug}/invoices/{invoiceId}:
    get:
      description: Returns invoice with specified id.
      operationId: getInvoice
      parameters:
      - description: Slug of company to retrieve
        explode: false
        in: path
        name: companySlug
        required: true
        schema:
          type: string
        style: simple
      - description: |
          The invoiceId (primary key of the returned object) is returned in the GET all
          invoices call; not to be confused with invoiceNumber
        explode: false
        in: path
        name: invoiceId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/invoiceResult'
          description: OK
      tags:
      - invoices
    patch:
      description: |
        Updates invoice with provided id. It is possible to update the due date of an invoice
        as well as if the invoice was sent manually, outside of Fiken.
      operationId: updateInvoice
      parameters:
      - description: Slug of company to retrieve
        explode: false
        in: path
        name: companySlug
        required: true
        schema:
          type: string
        style: simple
      - description: |
          The invoiceId (primary key of the returned object) is returned in the GET all
          invoices call; not to be confused with invoiceNumber
        explode: false
        in: path
        name: invoiceId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/updateInvoiceRequest'
        required: true
      responses:
        "200":
          description: OK
          headers:
            Location:
              description: Full URL of updated invoice
              explode: false
              schema:
                format: uri
                type: string
              style: simple
      tags:
      - invoices
  /companies/{companySlug}/invoices/{invoiceId}/attachments:
    get:
      description: Returns all attachments for a given Invoice
      operationId: getInvoiceAttachments
      parameters:
      - description: Slug of company to retrieve
        explode: false
        in: path
        name: companySlug
        required: true
        schema:
          type: string
        style: simple
      - description: |
          The invoiceId (primary key of the returned object) is returned in the GET all
          invoices call; not to be confused with invoiceNumber
        explode: false
        in: path
        name: invoiceId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/attachment'
                type: array
          description: OK
      tags:
      - invoices
    post:
      description: Creates and adds a new attachment to an Invoice
      operationId: addAttachmentToInvoice
      parameters:
      - description: Slug of company to retrieve
        explode: false
        in: path
        name: companySlug
        required: true
        schema:
          type: string
        style: simple
      - description: |
          The invoiceId (primary key of the returned object) is returned in the GET all
          invoices call; not to be confused with invoiceNumber
        explode: false
        in: path
        name: invoiceId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/addAttachmentToInvoice_request'
        required: false
      responses:
        "201":
          description: Created
          headers:
            Location:
              description: Full URL of newly created attachment
              explode: false
              schema:
                format: uri
                type: string
              style: simple
      tags:
      - invoices
  /companies/{companySlug}/invoices/send:
    post:
      description: Sends the specified document
      operationId: sendInvoice
      parameters:
      - description: Slug of company to retrieve
        explode: false
        in: path
        name: companySlug
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/sendInvoiceRequest'
        required: true
      responses:
        "200":
          description: Sent
      tags:
      - invoices
  /companies/{companySlug}/invoices/counter:
    get:
      description: |
        Retrieves the counter for invoices if it has been created
      operationId: getInvoiceCounter
      parameters:
      - description: Slug of company to retrieve
        explode: false
        in: path
        name: companySlug
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/counter'
          description: OK
      tags:
      - invoices
    post:
      description: "Creates the first invoice number which is then increased by one\
        \ with every new invoice. By sending an empty request body the default is\
        \ base number 10000 (the first invoice number will thus be 10001), but can\
        \ be specified to another starting value."
      operationId: createInvoiceCounter
      parameters:
      - description: Slug of company to retrieve
        explode: false
        in: path
        name: companySlug
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/counter'
        required: false
      responses:
        "201":
          description: Created
      tags:
      - invoices
  /companies/{companySlug}/invoices/drafts:
    get:
      description: Returns all invoice drafts for given company.
      operationId: getInvoiceDrafts
      parameters:
      - description: Slug of company to retrieve
        explode: false
        in: path
        name: companySlug
        required: true
        schema:
          type: string
        style: simple
      - description: |
          Returns the number of the page to return. Valid page values are integers from 0 to the total number of pages.
          Default value is 0.
        explode: true
        in: query
        name: page
        required: false
        schema:
          default: 0
          minimum: 0
          type: integer
        style: form
      - description: |
          Defines the number of entries to return on each page. Maximum number of results that can be returned at one time are 100.
          Default value is 25.
        explode: true
        in: query
        name: pageSize
        required: false
        schema:
          default: 25
          maximum: 100
          minimum: 1
          type: integer
        style: form
      - description: Filter based on order reference for a given invoice draft
        explode: true
        in: query
        name: orderReference
        required: false
        schema:
          type: string
        style: form
      - description: Filter based on the UUID of the draft.
        explode: true
        in: query
        name: uuid
        required: false
        schema:
          format: uuid
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/invoiceishDraftResult'
                type: array
          description: OK
          headers:
            Fiken-Api-Page:
              description: From the request header
              explode: false
              schema:
                type: integer
              style: simple
            Fiken-Api-Page-Size:
              description: From the request header
              explode: false
              schema:
                type: integer
              style: simple
            Fiken-Api-Page-Count:
              description: The total number of pages in this resource with this page
                size
              explode: false
              schema:
                type: integer
              style: simple
            Fiken-Api-Result-Count:
              description: The total number of elements in this resource
              explode: false
              schema:
                type: integer
              style: simple
      tags:
      - invoices
    post:
      description: Creates an invoice draft.
      operationId: createInvoiceDraft
      parameters:
      - description: Slug of company to retrieve
        explode: false
        in: path
        name: companySlug
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/invoiceishDraftRequest'
        required: true
      responses:
        "201":
          description: Created
          headers:
            Location:
              description: Full URL of newly created invoice draft
              explode: false
              schema:
                format: uri
                type: string
              style: simple
      tags:
      - invoices
  /companies/{companySlug}/invoices/drafts/{draftId}:
    delete:
      description: Delete invoice draft with specified id.
      operationId: deleteInvoiceDraft
      parameters:
      - description: Slug of company to retrieve
        explode: false
        in: path
        name: companySlug
        required: true
        schema:
          type: string
        style: simple
      - description: |
          The draftId (primary key of the returned object) is returned in the GET all drafts call.
        explode: false
        in: path
        name: draftId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      responses:
        "204":
          description: Deleted
      tags:
      - invoices
    get:
      description: Returns invoice draft with specified id.
      operationId: getInvoiceDraft
      parameters:
      - description: Slug of company to retrieve
        explode: false
        in: path
        name: companySlug
        required: true
        schema:
          type: string
        style: simple
      - description: |
          The draftId (primary key of the returned object) is returned in the GET all drafts call.
        explode: false
        in: path
        name: draftId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/invoiceishDraftResult'
          description: OK
      tags:
      - invoices
    put:
      description: |
        Updates invoice draft with provided id.
      operationId: updateInvoiceDraft
      parameters:
      - description: Slug of company to retrieve
        explode: false
        in: path
        name: companySlug
        required: true
        schema:
          type: string
        style: simple
      - description: |
          The draftId (primary key of the returned object) is returned in the GET all drafts call.
        explode: false
        in: path
        name: draftId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/invoiceishDraftRequest'
        required: true
      responses:
        "201":
          description: Created
          headers:
            Location:
              description: Full URL of updated invoice draft
              explode: false
              schema:
                format: uri
                type: string
              style: simple
      tags:
      - invoices
  /companies/{companySlug}/invoices/drafts/{draftId}/attachments:
    get:
      description: Returns all attachments for specified draft.
      operationId: getInvoiceDraftAttachments
      parameters:
      - description: Slug of company to retrieve
        explode: false
        in: path
        name: companySlug
        required: true
        schema:
          type: string
        style: simple
      - description: |
          The draftId (primary key of the returned object) is returned in the GET all drafts call.
        explode: false
        in: path
        name: draftId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/attachment'
                type: array
          description: OK
      tags:
      - invoices
    post:
      description: Creates and adds a new attachment to an invoice draft
      operationId: addAttachmentToInvoiceDraft
      parameters:
      - description: Slug of company to retrieve
        explode: false
        in: path
        name: companySlug
        required: true
        schema:
          type: string
        style: simple
      - description: |
          The draftId (primary key of the returned object) is returned in the GET all drafts call.
        explode: false
        in: path
        name: draftId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/addAttachmentToContact_request'
        required: false
      responses:
        "201":
          description: Created
          headers:
            Location:
              description: Full URL of newly created attachment
              explode: false
              schema:
                format: uri
                type: string
              style: simple
      tags:
      - invoices
  /companies/{companySlug}/invoices/drafts/{draftId}/createInvoice:
    post:
      description: Creates an invoice from an already created draft.
      operationId: createInvoiceFromDraft
      parameters:
      - description: Slug of company to retrieve
        explode: false
        in: path
        name: companySlug
        required: true
        schema:
          type: string
        style: simple
      - description: |
          The draftId (primary key of the returned object) is returned in the GET all drafts call.
        explode: false
        in: path
        name: draftId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      responses:
        "201":
          description: Created
          headers:
            Location:
              description: Full URL of newly created invoice
              explode: false
              schema:
                format: uri
                type: string
              style: simple
      tags:
      - invoices
  /companies/{companySlug}/creditNotes:
    get:
      description: Returns all credit notes for given company
      operationId: getCreditNotes
      parameters:
      - description: Slug of company to retrieve
        explode: false
        in: path
        name: companySlug
        required: true
        schema:
          type: string
        style: simple
      - description: |
          Returns the number of the page to return. Valid page values are integers from 0 to the total number of pages.
          Default value is 0.
        explode: true
        in: query
        name: page
        required: false
        schema:
          default: 0
          minimum: 0
          type: integer
        style: form
      - description: |
          Defines the number of entries to return on each page. Maximum number of results that can be returned at one time are 100.
          Default value is 25.
        explode: true
        in: query
        name: pageSize
        required: false
        schema:
          default: 25
          maximum: 100
          minimum: 1
          type: integer
        style: form
      - description: |
          Dates are represented as strings formatted as YYYY-MM-DD.
          Example: January 1st, 1970: "1970-01-01"
        explode: true
        in: query
        name: issueDate
        required: false
        schema:
          format: date
          type: string
        style: form
      - description: |
          Filter based on date less than or equal to parameter value.
          Dates are represented as strings formatted as YYYY-MM-DD.
          Example: January 1st, 1970: "1970-01-01"
        explode: true
        in: query
        name: issueDateLe
        required: false
        schema:
          format: date
          type: string
        style: form
      - description: |
          Filter based on date strictly less than parameter value.
          Dates are represented as strings formatted as YYYY-MM-DD.
          Example: January 1st, 1970: "1970-01-01"
        explode: true
        in: query
        name: issueDateLt
        required: false
        schema:
          format: date
          type: string
        style: form
      - description: |
          Filter based on date greater than or equal to parameter value.
          Dates are represented as strings formatted as YYYY-MM-DD.
          Example: January 1st, 1970: "1970-01-01"
        explode: true
        in: query
        name: issueDateGe
        required: false
        schema:
          format: date
          type: string
        style: form
      - description: |
          Filter based on date strictly greater than parameter value
          Dates are represented as strings formatted as YYYY-MM-DD.
          Example: January 1st, 1970: "1970-01-01"
        explode: true
        in: query
        name: issueDateGt
        required: false
        schema:
          format: date
          type: string
        style: form
      - description: |
          Filter based on date of last modification. Returns results that were last modified on the date provided as a parameter value.
          Dates are represented as strings formatted as YYYY-MM-DD.
          Example: January 1st, 1970: "1970-01-01"
        explode: true
        in: query
        name: lastModified
        required: false
        schema:
          format: date
          type: string
        style: form
      - description: |
          Returns results that have been last modified before or on the date provided as a parameter value.
          Dates are represented as strings formatted as YYYY-MM-DD.
          Example: January 1st, 1970: "1970-01-01"
        explode: true
        in: query
        name: lastModifiedLe
        required: false
        schema:
          format: date
          type: string
        style: form
      - description: |
          Returns results that have been last modified strictly before the date provided as a parameter value.
          Dates are represented as strings formatted as YYYY-MM-DD.
          Example: January 1st, 1970: "1970-01-01"
        explode: true
        in: query
        name: lastModifiedLt
        required: false
        schema:
          format: date
          type: string
        style: form
      - description: |
          Returns results that have been last modified after or on the date provided as a parameter value.
          Dates are represented as strings formatted as YYYY-MM-DD.
          Example: January 1st, 1970: "1970-01-01"
        explode: true
        in: query
        name: lastModifiedGe
        required: false
        schema:
          format: date
          type: string
        style: form
      - description: |
          Returns results that have been last modified strictly after the date provided as a parameter value.
          Dates are represented as strings formatted as YYYY-MM-DD.
          Example: January 1st, 1970: "1970-01-01"
        explode: true
        in: query
        name: lastModifiedGt
        required: false
        schema:
          format: date
          type: string
        style: form
      - description: |
          Returns only credit notes sent to specified customer. Must be the contactId provided by a GET contacts call.
        explode: true
        in: query
        name: customerId
        required: false
        schema:
          format: int64
          type: integer
        style: form
      - description: |
          When set to true, returns only credit notes that have been settled. Otherwise false returns all credit notes
          that have not been fully settled.
        explode: true
        in: query
        name: settled
        required: false
        schema:
          type: boolean
        style: form
      - description: Filter based on the UUID of the credit note draft that was used
          to create a given invoice. Applies only to "uavhengig kreditnotaer".
        explode: true
        in: query
        name: creditNoteDraftUuid
        required: false
        schema:
          format: uuid
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/creditNoteResult'
                type: array
          description: OK
          headers:
            Fiken-Api-Page:
              description: From the request header
              explode: false
              schema:
                type: integer
              style: simple
            Fiken-Api-Page-Size:
              description: From the request header
              explode: false
              schema:
                type: integer
              style: simple
            Fiken-Api-Page-Count:
              description: The total number of pages in this resource with this page
                size
              explode: false
              schema:
                type: integer
              style: simple
            Fiken-Api-Result-Count:
              description: The total number of elements in this resource
              explode: false
              schema:
                type: integer
              style: simple
      tags:
      - credit notes
  /companies/{companySlug}/creditNotes/full:
    post:
      description: Creates a new credit note that covers the full amount of the associated
        invoice.
      operationId: createFullCreditNote
      parameters:
      - description: Slug of company to retrieve
        explode: false
        in: path
        name: companySlug
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/fullCreditNoteRequest'
        required: true
      responses:
        "201":
          description: Created
          headers:
            Location:
              description: Full URL of newly created credit note
              explode: false
              schema:
                format: uri
                type: string
              style: simple
      tags:
      - credit notes
  /companies/{companySlug}/creditNotes/partial:
    post:
      description: Creates a new credit note that doesn't fully cover the total amount
        of the associated invoice.
      operationId: createPartialCreditNote
      parameters:
      - description: Slug of company to retrieve
        explode: false
        in: path
        name: companySlug
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/partialCreditNoteRequest'
        required: true
      responses:
        "201":
          description: Created
          headers:
            Location:
              description: Full URL of newly created credit note
              explode: false
              schema:
                format: uri
                type: string
              style: simple
      tags:
      - credit notes
  /companies/{companySlug}/creditNotes/{creditNoteId}:
    get:
      description: Returns credit note with specified id.
      operationId: getCreditNote
      parameters:
      - description: Slug of company to retrieve
        explode: false
        in: path
        name: companySlug
        required: true
        schema:
          type: string
        style: simple
      - description: |
          The creditNoteId (primary key of the returned object) is returned as the first field in the GET all
          credit notes call; not to be confused with creditNoteNumber
        explode: false
        in: path
        name: creditNoteId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/creditNoteResult'
          description: OK
      tags:
      - credit notes
  /companies/{companySlug}/creditNotes/send:
    post:
      description: Sends the specified document
      operationId: sendCreditNote
      parameters:
      - description: Slug of company to retrieve
        explode: false
        in: path
        name: companySlug
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/sendCreditNoteRequest'
        required: true
      responses:
        "200":
          description: Sent
      tags:
      - credit notes
  /companies/{companySlug}/creditNotes/counter:
    get:
      description: |
        Retrieves the counter for credit notes if it has been created
      operationId: getCreditNoteCounter
      parameters:
      - description: Slug of company to retrieve
        explode: false
        in: path
        name: companySlug
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/counter'
          description: OK
      tags:
      - credit notes
    post:
      description: "Creates the first credit note number which is then increased by\
        \ one with every new credit note. By sending an empty request body the default\
        \ is base number 10000 (the first credit note number will thus be 10001),\
        \ but can be specified to another starting value."
      operationId: createCreditNoteCounter
      parameters:
      - description: Slug of company to retrieve
        explode: false
        in: path
        name: companySlug
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/counter'
        required: false
      responses:
        "201":
          description: Created
      tags:
      - credit notes
  /companies/{companySlug}/creditNotes/drafts:
    get:
      description: Returns all credit note drafts for given company.
      operationId: getCreditNoteDrafts
      parameters:
      - description: Slug of company to retrieve
        explode: false
        in: path
        name: companySlug
        required: true
        schema:
          type: string
        style: simple
      - description: |
          Returns the number of the page to return. Valid page values are integers from 0 to the total number of pages.
          Default value is 0.
        explode: true
        in: query
        name: page
        required: false
        schema:
          default: 0
          minimum: 0
          type: integer
        style: form
      - description: |
          Defines the number of entries to return on each page. Maximum number of results that can be returned at one time are 100.
          Default value is 25.
        explode: true
        in: query
        name: pageSize
        required: false
        schema:
          default: 25
          maximum: 100
          minimum: 1
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/invoiceishDraftResult'
                type: array
          description: OK
          headers:
            Fiken-Api-Page:
              description: From the request header
              explode: false
              schema:
                type: integer
              style: simple
            Fiken-Api-Page-Size:
              description: From the request header
              explode: false
              schema:
                type: integer
              style: simple
            Fiken-Api-Page-Count:
              description: The total number of pages in this resource with this page
                size
              explode: false
              schema:
                type: integer
              style: simple
            Fiken-Api-Result-Count:
              description: The total number of elements in this resource
              explode: false
              schema:
                type: integer
              style: simple
      tags:
      - credit notes
    post:
      description: Creates a credit note draft. This draft corresponds to a draft
        for an "uavhengig kreditnota" in Fiken.
      operationId: createCreditNoteDraft
      parameters:
      - description: Slug of company to retrieve
        explode: false
        in: path
        name: companySlug
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/invoiceishDraftRequest'
        required: true
      responses:
        "201":
          description: Created
          headers:
            Location:
              description: Full URL of newly created credit note draft
              explode: false
              schema:
                format: uri
                type: string
              style: simple
      tags:
      - credit notes
  /companies/{companySlug}/creditNotes/drafts/{draftId}:
    delete:
      description: Delete credit note draft with specified id.
      operationId: deleteCreditNoteDraft
      parameters:
      - description: Slug of company to retrieve
        explode: false
        in: path
        name: companySlug
        required: true
        schema:
          type: string
        style: simple
      - description: |
          The draftId (primary key of the returned object) is returned in the GET all drafts call.
        explode: false
        in: path
        name: draftId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      responses:
        "204":
          description: Deleted
      tags:
      - credit notes
    get:
      description: Returns credit note draft with specified id.
      operationId: getCreditNoteDraft
      parameters:
      - description: Slug of company to retrieve
        explode: false
        in: path
        name: companySlug
        required: true
        schema:
          type: string
        style: simple
      - description: |
          The draftId (primary key of the returned object) is returned in the GET all drafts call.
        explode: false
        in: path
        name: draftId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/invoiceishDraftResult'
          description: OK
      tags:
      - credit notes
    put:
      description: |
        Updates credit note draft with provided id.
      operationId: updateCreditNoteDraft
      parameters:
      - description: Slug of company to retrieve
        explode: false
        in: path
        name: companySlug
        required: true
        schema:
          type: string
        style: simple
      - description: |
          The draftId (primary key of the returned object) is returned in the GET all drafts call.
        explode: false
        in: path
        name: draftId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/invoiceishDraftRequest'
        required: true
      responses:
        "201":
          description: Created
          headers:
            Location:
              description: Full URL of updated credit note draft
              explode: false
              schema:
                format: uri
                type: string
              style: simple
      tags:
      - credit notes
  /companies/{companySlug}/creditNotes/drafts/{draftId}/attachments:
    get:
      description: Returns all attachments for specified draft.
      operationId: getCreditNoteDraftAttachments
      parameters:
      - description: Slug of company to retrieve
        explode: false
        in: path
        name: companySlug
        required: true
        schema:
          type: string
        style: simple
      - description: |
          The draftId (primary key of the returned object) is returned in the GET all drafts call.
        explode: false
        in: path
        name: draftId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/attachment'
                type: array
          description: OK
      tags:
      - credit notes
    post:
      description: Creates and adds a new attachment to a credit note draft
      operationId: addAttachmentToCreditNoteDraft
      parameters:
      - description: Slug of company to retrieve
        explode: false
        in: path
        name: companySlug
        required: true
        schema:
          type: string
        style: simple
      - description: |
          The draftId (primary key of the returned object) is returned in the GET all drafts call.
        explode: false
        in: path
        name: draftId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/addAttachmentToContact_request'
        required: false
      responses:
        "201":
          description: Created
          headers:
            Location:
              description: Full URL of newly created attachment
              explode: false
              schema:
                format: uri
                type: string
              style: simple
      tags:
      - credit notes
  /companies/{companySlug}/creditNotes/drafts/{draftId}/createCreditNote:
    post:
      description: Creates a credit note from an already created draft.
      operationId: createCreditNoteFromDraft
      parameters:
      - description: Slug of company to retrieve
        explode: false
        in: path
        name: companySlug
        required: true
        schema:
          type: string
        style: simple
      - description: |
          The draftId (primary key of the returned object) is returned in the GET all drafts call.
        explode: false
        in: path
        name: draftId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      responses:
        "201":
          description: Created
          headers:
            Location:
              description: Full URL of newly created credit note
              explode: false
              schema:
                format: uri
                type: string
              style: simple
      tags:
      - credit notes
  /companies/{companySlug}/offers:
    get:
      description: Returns all offers for given company
      operationId: getOffers
      parameters:
      - description: Slug of company to retrieve
        explode: false
        in: path
        name: companySlug
        required: true
        schema:
          type: string
        style: simple
      - description: |
          Returns the number of the page to return. Valid page values are integers from 0 to the total number of pages.
          Default value is 0.
        explode: true
        in: query
        name: page
        required: false
        schema:
          default: 0
          minimum: 0
          type: integer
        style: form
      - description: |
          Defines the number of entries to return on each page. Maximum number of results that can be returned at one time are 100.
          Default value is 25.
        explode: true
        in: query
        name: pageSize
        required: false
        schema:
          default: 25
          maximum: 100
          minimum: 1
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/offer'
                type: array
          description: OK
          headers:
            Fiken-Api-Page:
              description: From the request header
              explode: false
              schema:
                type: integer
              style: simple
            Fiken-Api-Page-Size:
              description: From the request header
              explode: false
              schema:
                type: integer
              style: simple
            Fiken-Api-Page-Count:
              description: The total number of pages in this resource with this page
                size
              explode: false
              schema:
                type: integer
              style: simple
            Fiken-Api-Result-Count:
              description: The total number of elements in this resource
              explode: false
              schema:
                type: integer
              style: simple
      tags:
      - offers
  /companies/{companySlug}/offers/{offerId}:
    get:
      description: Returns offer with specified id.
      operationId: getOffer
      parameters:
      - description: Slug of company to retrieve
        explode: false
        in: path
        name: companySlug
        required: true
        schema:
          type: string
        style: simple
      - description: |
          The offerId (primary key of the returned object) is returned as the first field in the GET all
          offers call
        explode: false
        in: path
        name: offerId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/offer'
          description: OK
      tags:
      - offers
  /companies/{companySlug}/offers/counter:
    get:
      description: |
        Retrieves the counter for offers if it has been created
      operationId: getOfferCounter
      parameters:
      - description: Slug of company to retrieve
        explode: false
        in: path
        name: companySlug
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/counter'
          description: OK
      tags:
      - offers
    post:
      description: "Creates the first offer number which is then increased by one\
        \ with every new offer. By sending an empty request body the default is base\
        \ number (the first offer number will thus be 10001), but can be specified\
        \ to another starting value."
      operationId: createOfferCounter
      parameters:
      - description: Slug of company to retrieve
        explode: false
        in: path
        name: companySlug
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/counter'
        required: false
      responses:
        "201":
          description: Created
      tags:
      - offers
  /companies/{companySlug}/offers/drafts:
    get:
      description: Returns all offer drafts for given company.
      operationId: getOfferDrafts
      parameters:
      - description: Slug of company to retrieve
        explode: false
        in: path
        name: companySlug
        required: true
        schema:
          type: string
        style: simple
      - description: |
          Returns the number of the page to return. Valid page values are integers from 0 to the total number of pages.
          Default value is 0.
        explode: true
        in: query
        name: page
        required: false
        schema:
          default: 0
          minimum: 0
          type: integer
        style: form
      - description: |
          Defines the number of entries to return on each page. Maximum number of results that can be returned at one time are 100.
          Default value is 25.
        explode: true
        in: query
        name: pageSize
        required: false
        schema:
          default: 25
          maximum: 100
          minimum: 1
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/invoiceishDraftResult'
                type: array
          description: OK
          headers:
            Fiken-Api-Page:
              description: From the request header
              explode: false
              schema:
                type: integer
              style: simple
            Fiken-Api-Page-Size:
              description: From the request header
              explode: false
              schema:
                type: integer
              style: simple
            Fiken-Api-Page-Count:
              description: The total number of pages in this resource with this page
                size
              explode: false
              schema:
                type: integer
              style: simple
            Fiken-Api-Result-Count:
              description: The total number of elements in this resource
              explode: false
              schema:
                type: integer
              style: simple
      tags:
      - offers
    post:
      description: Creates an offer draft.
      operationId: createOfferDraft
      parameters:
      - description: Slug of company to retrieve
        explode: false
        in: path
        name: companySlug
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/invoiceishDraftRequest'
        required: true
      responses:
        "201":
          description: Created
          headers:
            Location:
              description: Full URL of newly created offer draft
              explode: false
              schema:
                format: uri
                type: string
              style: simple
      tags:
      - offers
  /companies/{companySlug}/offers/drafts/{draftId}:
    delete:
      description: Delete offer draft with specified id.
      operationId: deleteOfferDraft
      parameters:
      - description: Slug of company to retrieve
        explode: false
        in: path
        name: companySlug
        required: true
        schema:
          type: string
        style: simple
      - description: |
          The draftId (primary key of the returned object) is returned in the GET all drafts call.
        explode: false
        in: path
        name: draftId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      responses:
        "204":
          description: Deleted
      tags:
      - offers
    get:
      description: Returns offer draft with specified id.
      operationId: getOfferDraft
      parameters:
      - description: Slug of company to retrieve
        explode: false
        in: path
        name: companySlug
        required: true
        schema:
          type: string
        style: simple
      - description: |
          The draftId (primary key of the returned object) is returned in the GET all drafts call.
        explode: false
        in: path
        name: draftId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/invoiceishDraftResult'
          description: OK
      tags:
      - offers
    put:
      description: |
        Updates offer draft with provided id.
      operationId: updateOfferDraft
      parameters:
      - description: Slug of company to retrieve
        explode: false
        in: path
        name: companySlug
        required: true
        schema:
          type: string
        style: simple
      - description: |
          The draftId (primary key of the returned object) is returned in the GET all drafts call.
        explode: false
        in: path
        name: draftId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/invoiceishDraftRequest'
        required: true
      responses:
        "201":
          description: Created
          headers:
            Location:
              description: Full URL of updated offer draft
              explode: false
              schema:
                format: uri
                type: string
              style: simple
      tags:
      - offers
  /companies/{companySlug}/offers/drafts/{draftId}/attachments:
    get:
      description: Returns all attachments for specified draft.
      operationId: getOfferDraftAttachments
      parameters:
      - description: Slug of company to retrieve
        explode: false
        in: path
        name: companySlug
        required: true
        schema:
          type: string
        style: simple
      - description: |
          The draftId (primary key of the returned object) is returned in the GET all drafts call.
        explode: false
        in: path
        name: draftId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/attachment'
                type: array
          description: OK
      tags:
      - offers
    post:
      description: Creates and adds a new attachment to an offer draft
      operationId: addAttachmentToOfferDraft
      parameters:
      - description: Slug of company to retrieve
        explode: false
        in: path
        name: companySlug
        required: true
        schema:
          type: string
        style: simple
      - description: |
          The draftId (primary key of the returned object) is returned in the GET all drafts call.
        explode: false
        in: path
        name: draftId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/addAttachmentToContact_request'
        required: false
      responses:
        "201":
          description: Created
          headers:
            Location:
              description: Full URL of newly created attachment
              explode: false
              schema:
                format: uri
                type: string
              style: simple
      tags:
      - offers
  /companies/{companySlug}/offers/drafts/{draftId}/createOffer:
    post:
      description: Creates an offer from an already created draft.
      operationId: createOfferFromDraft
      parameters:
      - description: Slug of company to retrieve
        explode: false
        in: path
        name: companySlug
        required: true
        schema:
          type: string
        style: simple
      - description: |
          The draftId (primary key of the returned object) is returned in the GET all drafts call.
        explode: false
        in: path
        name: draftId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      responses:
        "201":
          description: Created
          headers:
            Location:
              description: Full URL of newly created offer
              explode: false
              schema:
                format: uri
                type: string
              style: simple
      tags:
      - offers
  /companies/{companySlug}/orderConfirmations:
    get:
      description: Returns all order confirmations for given company
      operationId: getOrderConfirmations
      parameters:
      - description: Slug of company to retrieve
        explode: false
        in: path
        name: companySlug
        required: true
        schema:
          type: string
        style: simple
      - description: |
          Returns the number of the page to return. Valid page values are integers from 0 to the total number of pages.
          Default value is 0.
        explode: true
        in: query
        name: page
        required: false
        schema:
          default: 0
          minimum: 0
          type: integer
        style: form
      - description: |
          Defines the number of entries to return on each page. Maximum number of results that can be returned at one time are 100.
          Default value is 25.
        explode: true
        in: query
        name: pageSize
        required: false
        schema:
          default: 25
          maximum: 100
          minimum: 1
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/orderConfirmation'
                type: array
          description: OK
          headers:
            Fiken-Api-Page:
              description: From the request header
              explode: false
              schema:
                type: integer
              style: simple
            Fiken-Api-Page-Size:
              description: From the request header
              explode: false
              schema:
                type: integer
              style: simple
            Fiken-Api-Page-Count:
              description: The total number of pages in this resource with this page
                size
              explode: false
              schema:
                type: integer
              style: simple
            Fiken-Api-Result-Count:
              description: The total number of elements in this resource
              explode: false
              schema:
                type: integer
              style: simple
      tags:
      - order confirmations
  /companies/{companySlug}/orderConfirmations/{confirmationId}:
    get:
      description: Returns order confirmation with specified id.
      operationId: getOrderConfirmation
      parameters:
      - description: Slug of company to retrieve
        explode: false
        in: path
        name: companySlug
        required: true
        schema:
          type: string
        style: simple
      - description: |
          The confirmationId (primary key of the returned object) is returned as the first field in the GET all
          order confirmations call
        explode: false
        in: path
        name: confirmationId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/orderConfirmation'
          description: OK
      tags:
      - order confirmations
  /companies/{companySlug}/orderConfirmations/counter:
    get:
      description: |
        Retrieves the counter for order confirmations if it has been created
      operationId: getOrderConfirmationCounter
      parameters:
      - description: Slug of company to retrieve
        explode: false
        in: path
        name: companySlug
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/counter'
          description: OK
      tags:
      - order confirmations
    post:
      description: "Creates the first order confirmation number which is then increased\
        \ by one with every new order confirmation. By sending an empty request body\
        \ the default is base number (the first order confirmation number will thus\
        \ be 10001), but can be specified to another starting value."
      operationId: createOrderConfirmationCounter
      parameters:
      - description: Slug of company to retrieve
        explode: false
        in: path
        name: companySlug
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/counter'
        required: false
      responses:
        "201":
          description: Created
      tags:
      - order confirmations
  /companies/{companySlug}/orderConfirmations/{confirmationId}/createInvoiceDraft:
    post:
      description: Creates an invoice draft from an order confirmation
      operationId: createInvoiceDraftFromOrderConfirmation
      parameters:
      - description: Slug of company to retrieve
        explode: false
        in: path
        name: companySlug
        required: true
        schema:
          type: string
        style: simple
      - description: |
          The confirmationId (primary key of the returned object) is returned as the first field in the GET all
          order confirmations call
        explode: false
        in: path
        name: confirmationId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "201":
          description: Created
          headers:
            Location:
              description: Full URL of newly created invoice draft
              explode: false
              schema:
                format: uri
                type: string
              style: simple
      tags:
      - order confirmations
  /companies/{companySlug}/orderConfirmations/drafts:
    get:
      description: Returns all order confirmation drafts for given company.
      operationId: getOrderConfirmationDrafts
      parameters:
      - description: Slug of company to retrieve
        explode: false
        in: path
        name: companySlug
        required: true
        schema:
          type: string
        style: simple
      - description: |
          Returns the number of the page to return. Valid page values are integers from 0 to the total number of pages.
          Default value is 0.
        explode: true
        in: query
        name: page
        required: false
        schema:
          default: 0
          minimum: 0
          type: integer
        style: form
      - description: |
          Defines the number of entries to return on each page. Maximum number of results that can be returned at one time are 100.
          Default value is 25.
        explode: true
        in: query
        name: pageSize
        required: false
        schema:
          default: 25
          maximum: 100
          minimum: 1
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/invoiceishDraftResult'
                type: array
          description: OK
          headers:
            Fiken-Api-Page:
              description: From the request header
              explode: false
              schema:
                type: integer
              style: simple
            Fiken-Api-Page-Size:
              description: From the request header
              explode: false
              schema:
                type: integer
              style: simple
            Fiken-Api-Page-Count:
              description: The total number of pages in this resource with this page
                size
              explode: false
              schema:
                type: integer
              style: simple
            Fiken-Api-Result-Count:
              description: The total number of elements in this resource
              explode: false
              schema:
                type: integer
              style: simple
      tags:
      - order confirmations
    post:
      description: Creates an order confirmation draft.
      operationId: createOrderConfirmationDraft
      parameters:
      - description: Slug of company to retrieve
        explode: false
        in: path
        name: companySlug
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/invoiceishDraftRequest'
        required: true
      responses:
        "201":
          description: Created
          headers:
            Location:
              description: Full URL of newly created order confirmation draft
              explode: false
              schema:
                format: uri
                type: string
              style: simple
      tags:
      - order confirmations
  /companies/{companySlug}/orderConfirmations/drafts/{draftId}:
    delete:
      description: Delete order confirmation draft with specified id.
      operationId: deleteOrderConfirmationDraft
      parameters:
      - description: Slug of company to retrieve
        explode: false
        in: path
        name: companySlug
        required: true
        schema:
          type: string
        style: simple
      - description: |
          The draftId (primary key of the returned object) is returned in the GET all drafts call.
        explode: false
        in: path
        name: draftId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      responses:
        "204":
          description: Deleted
      tags:
      - order confirmations
    get:
      description: Returns order confirmation draft with specified id.
      operationId: getOrderConfirmationDraft
      parameters:
      - description: Slug of company to retrieve
        explode: false
        in: path
        name: companySlug
        required: true
        schema:
          type: string
        style: simple
      - description: |
          The draftId (primary key of the returned object) is returned in the GET all drafts call.
        explode: false
        in: path
        name: draftId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/invoiceishDraftResult'
          description: OK
      tags:
      - order confirmations
    put:
      description: |
        Updates order confirmation draft with provided id.
      operationId: updateOrderConfirmationDraft
      parameters:
      - description: Slug of company to retrieve
        explode: false
        in: path
        name: companySlug
        required: true
        schema:
          type: string
        style: simple
      - description: |
          The draftId (primary key of the returned object) is returned in the GET all drafts call.
        explode: false
        in: path
        name: draftId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/invoiceishDraftRequest'
        required: true
      responses:
        "201":
          description: Created
          headers:
            Location:
              description: Full URL of updated order confirmation draft
              explode: false
              schema:
                format: uri
                type: string
              style: simple
      tags:
      - order confirmations
  /companies/{companySlug}/orderConfirmations/drafts/{draftId}/attachments:
    get:
      description: Returns all attachments for specified draft.
      operationId: getOrderConfirmationDraftAttachments
      parameters:
      - description: Slug of company to retrieve
        explode: false
        in: path
        name: companySlug
        required: true
        schema:
          type: string
        style: simple
      - description: |
          The draftId (primary key of the returned object) is returned in the GET all drafts call.
        explode: false
        in: path
        name: draftId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/attachment'
                type: array
          description: OK
      tags:
      - order confirmations
    post:
      description: Creates and adds a new attachment to an order confirmation draft
      operationId: addAttachmentToOrderConfirmationDraft
      parameters:
      - description: Slug of company to retrieve
        explode: false
        in: path
        name: companySlug
        required: true
        schema:
          type: string
        style: simple
      - description: |
          The draftId (primary key of the returned object) is returned in the GET all drafts call.
        explode: false
        in: path
        name: draftId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/addAttachmentToContact_request'
        required: false
      responses:
        "201":
          description: Created
          headers:
            Location:
              description: Full URL of newly created attachment
              explode: false
              schema:
                format: uri
                type: string
              style: simple
      tags:
      - order confirmations
  /companies/{companySlug}/orderConfirmations/drafts/{draftId}/createOrderConfirmation:
    post:
      description: Creates an order confirmation from an already created draft.
      operationId: createOrderConfirmationFromDraft
      parameters:
      - description: Slug of company to retrieve
        explode: false
        in: path
        name: companySlug
        required: true
        schema:
          type: string
        style: simple
      - description: |
          The draftId (primary key of the returned object) is returned in the GET all drafts call.
        explode: false
        in: path
        name: draftId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      responses:
        "201":
          description: Created
          headers:
            Location:
              description: Full URL of newly created order confirmation
              explode: false
              schema:
                format: uri
                type: string
              style: simple
      tags:
      - order confirmations
  /companies/{companySlug}/products:
    get:
      description: Returns all products for given company
      operationId: getProducts
      parameters:
      - description: Slug of company to retrieve
        explode: false
        in: path
        name: companySlug
        required: true
        schema:
          type: string
        style: simple
      - description: |
          Returns the number of the page to return. Valid page values are integers from 0 to the total number of pages.
          Default value is 0.
        explode: true
        in: query
        name: page
        required: false
        schema:
          default: 0
          minimum: 0
          type: integer
        style: form
      - description: |
          Defines the number of entries to return on each page. Maximum number of results that can be returned at one time are 100.
          Default value is 25.
        explode: true
        in: query
        name: pageSize
        required: false
        schema:
          default: 25
          maximum: 100
          minimum: 1
          type: integer
        style: form
      - description: |
          Dates are represented as strings formatted as YYYY-MM-DD.
          Example: January 1st, 1970: "1970-01-01"
        explode: true
        in: query
        name: createdDate
        required: false
        schema:
          format: date
          type: string
        style: form
      - description: |
          Returns results that were created before or on the date provided as a parameter value.
          Dates are represented as strings formatted as YYYY-MM-DD.
          Example: January 1st, 1970: "1970-01-01"
        explode: true
        in: query
        name: createdDateLe
        required: false
        schema:
          format: date
          type: string
        style: form
      - description: |
          Returns results that were created strictly before the date provided as a parameter value.
          Dates are represented as strings formatted as YYYY-MM-DD.
          Example: January 1st, 1970: "1970-01-01"
        explode: true
        in: query
        name: createdDateLt
        required: false
        schema:
          format: date
          type: string
        style: form
      - description: |
          Returns results that were created after or on the date provided as a parameter value.
          Dates are represented as strings formatted as YYYY-MM-DD.
          Example: January 1st, 1970: "1970-01-01"
        explode: true
        in: query
        name: createdDateGe
        required: false
        schema:
          format: date
          type: string
        style: form
      - description: |
          Returns results that were created strictly after the date provided as a parameter value.
          Dates are represented as strings formatted as YYYY-MM-DD.
          Example: January 1st, 1970: "1970-01-01"
        explode: true
        in: query
        name: createdDateGt
        required: false
        schema:
          format: date
          type: string
        style: form
      - description: |
          Filter based on date of last modification. Returns results that were last modified on the date provided as a parameter value.
          Dates are represented as strings formatted as YYYY-MM-DD.
          Example: January 1st, 1970: "1970-01-01"
        explode: true
        in: query
        name: lastModified
        required: false
        schema:
          format: date
          type: string
        style: form
      - description: |
          Returns results that have been last modified before or on the date provided as a parameter value.
          Dates are represented as strings formatted as YYYY-MM-DD.
          Example: January 1st, 1970: "1970-01-01"
        explode: true
        in: query
        name: lastModifiedLe
        required: false
        schema:
          format: date
          type: string
        style: form
      - description: |
          Returns results that have been last modified strictly before the date provided as a parameter value.
          Dates are represented as strings formatted as YYYY-MM-DD.
          Example: January 1st, 1970: "1970-01-01"
        explode: true
        in: query
        name: lastModifiedLt
        required: false
        schema:
          format: date
          type: string
        style: form
      - description: |
          Returns results that have been last modified after or on the date provided as a parameter value.
          Dates are represented as strings formatted as YYYY-MM-DD.
          Example: January 1st, 1970: "1970-01-01"
        explode: true
        in: query
        name: lastModifiedGe
        required: false
        schema:
          format: date
          type: string
        style: form
      - description: |
          Returns results that have been last modified strictly after the date provided as a parameter value.
          Dates are represented as strings formatted as YYYY-MM-DD.
          Example: January 1st, 1970: "1970-01-01"
        explode: true
        in: query
        name: lastModifiedGt
        required: false
        schema:
          format: date
          type: string
        style: form
      - description: Find all results with product name equal to the specified parameter.
        explode: true
        in: query
        name: name
        required: false
        schema:
          type: string
        style: form
      - description: Find all results with product number (varenummer) equal to the
          specified parameter.
        explode: true
        in: query
        name: productNumber
        required: false
        schema:
          type: string
        style: form
      - description: Returns active (true) or inactive (false) products.
        explode: true
        in: query
        name: active
        required: false
        schema:
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/product'
                type: array
          description: OK
          headers:
            Fiken-Api-Page:
              description: From the request header
              explode: false
              schema:
                type: integer
              style: simple
            Fiken-Api-Page-Size:
              description: From the request header
              explode: false
              schema:
                type: integer
              style: simple
            Fiken-Api-Page-Count:
              description: The total number of pages in this resource with this page
                size
              explode: false
              schema:
                type: integer
              style: simple
            Fiken-Api-Result-Count:
              description: The total number of elements in this resource
              explode: false
              schema:
                type: integer
              style: simple
      tags:
      - products
    post:
      description: Creates a new product.
      operationId: createProduct
      parameters:
      - description: Slug of company to retrieve
        explode: false
        in: path
        name: companySlug
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/product'
        required: true
      responses:
        "201":
          description: Created
          headers:
            Location:
              description: Full URL of newly created product
              explode: false
              schema:
                format: uri
                type: string
              style: simple
      tags:
      - products
  /companies/{companySlug}/products/{productId}:
    delete:
      description: Delete product with specified id.
      operationId: deleteProduct
      parameters:
      - description: Slug of company to retrieve
        explode: false
        in: path
        name: companySlug
        required: true
        schema:
          type: string
        style: simple
      - description: |
          The productId (primary key of the returned object) is returned in the GET all
          products call; not to be confused with productNumber.
        explode: false
        in: path
        name: productId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      responses:
        "204":
          description: Deleted
      tags:
      - products
    get:
      description: Returns product with specified id.
      operationId: getProduct
      parameters:
      - description: Slug of company to retrieve
        explode: false
        in: path
        name: companySlug
        required: true
        schema:
          type: string
        style: simple
      - description: |
          The productId (primary key of the returned object) is returned in the GET all
          products call; not to be confused with productNumber.
        explode: false
        in: path
        name: productId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/product'
          description: OK
      tags:
      - products
    put:
      description: Updates an existing product.
      operationId: updateProduct
      parameters:
      - description: Slug of company to retrieve
        explode: false
        in: path
        name: companySlug
        required: true
        schema:
          type: string
        style: simple
      - description: |
          The productId (primary key of the returned object) is returned in the GET all
          products call; not to be confused with productNumber.
        explode: false
        in: path
        name: productId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/product'
        required: true
      responses:
        "200":
          description: Updated
          headers:
            Location:
              description: Full URL of updated product
              explode: false
              schema:
                format: uri
                type: string
              style: simple
      tags:
      - products
  /companies/{companySlug}/sales:
    get:
      description: Returns all sales for given company
      operationId: getSales
      parameters:
      - description: Slug of company to retrieve
        explode: false
        in: path
        name: companySlug
        required: true
        schema:
          type: string
        style: simple
      - description: |
          Returns the number of the page to return. Valid page values are integers from 0 to the total number of pages.
          Default value is 0.
        explode: true
        in: query
        name: page
        required: false
        schema:
          default: 0
          minimum: 0
          type: integer
        style: form
      - description: |
          Defines the number of entries to return on each page. Maximum number of results that can be returned at one time are 100.
          Default value is 25.
        explode: true
        in: query
        name: pageSize
        required: false
        schema:
          default: 25
          maximum: 100
          minimum: 1
          type: integer
        style: form
      - description: |
          Dates are represented as strings formatted as YYYY-MM-DD.
          Example: January 1st, 1970: "1970-01-01"
        explode: true
        in: query
        name: date
        required: false
        schema:
          format: date
          type: string
        style: form
      - description: |
          Filter based on date less than or equal to parameter value.
          Dates are represented as strings formatted as YYYY-MM-DD.
          Example: January 1st, 1970: "1970-01-01"
        explode: true
        in: query
        name: dateLe
        required: false
        schema:
          format: date
          type: string
        style: form
      - description: |
          Filter based on date strictly less than parameter value.
          Dates are represented as strings formatted as YYYY-MM-DD.
          Example: January 1st, 1970: "1970-01-01"
        explode: true
        in: query
        name: dateLt
        required: false
        schema:
          format: date
          type: string
        style: form
      - description: |
          Filter based on date greater than or equal to parameter value.
          Dates are represented as strings formatted as YYYY-MM-DD.
          Example: January 1st, 1970: "1970-01-01"
        explode: true
        in: query
        name: dateGe
        required: false
        schema:
          format: date
          type: string
        style: form
      - description: |
          Filter based on date strictly greater than parameter value
          Dates are represented as strings formatted as YYYY-MM-DD.
          Example: January 1st, 1970: "1970-01-01"
        explode: true
        in: query
        name: dateGt
        required: false
        schema:
          format: date
          type: string
        style: form
      - description: |
          Filter based on date of last modification. Returns results that were last modified on the date provided as a parameter value.
          Dates are represented as strings formatted as YYYY-MM-DD.
          Example: January 1st, 1970: "1970-01-01"
        explode: true
        in: query
        name: lastModified
        required: false
        schema:
          format: date
          type: string
        style: form
      - description: |
          Returns results that have been last modified before or on the date provided as a parameter value.
          Dates are represented as strings formatted as YYYY-MM-DD.
          Example: January 1st, 1970: "1970-01-01"
        explode: true
        in: query
        name: lastModifiedLe
        required: false
        schema:
          format: date
          type: string
        style: form
      - description: |
          Returns results that have been last modified strictly before the date provided as a parameter value.
          Dates are represented as strings formatted as YYYY-MM-DD.
          Example: January 1st, 1970: "1970-01-01"
        explode: true
        in: query
        name: lastModifiedLt
        required: false
        schema:
          format: date
          type: string
        style: form
      - description: |
          Returns results that have been last modified after or on the date provided as a parameter value.
          Dates are represented as strings formatted as YYYY-MM-DD.
          Example: January 1st, 1970: "1970-01-01"
        explode: true
        in: query
        name: lastModifiedGe
        required: false
        schema:
          format: date
          type: string
        style: form
      - description: |
          Returns results that have been last modified strictly after the date provided as a parameter value.
          Dates are represented as strings formatted as YYYY-MM-DD.
          Example: January 1st, 1970: "1970-01-01"
        explode: true
        in: query
        name: lastModifiedGt
        required: false
        schema:
          format: date
          type: string
        style: form
      - description: Find all results with the sale number equal to the specified
          parameter.
        explode: true
        in: query
        name: saleNumber
        required: false
        schema:
          type: string
        style: form
      - description: |
          When set to true, returns only sales that have been settled. Otherwise false returns all sales
          that have not been fully settled.
        explode: true
        in: query
        name: settled
        required: false
        schema:
          type: boolean
        style: form
      - description: Find all sale results for a given customer
        explode: true
        in: query
        name: contactId
        required: false
        schema:
          format: int64
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/saleResult'
                type: array
          description: OK
          headers:
            Fiken-Api-Page:
              description: From the request header
              explode: false
              schema:
                type: integer
              style: simple
            Fiken-Api-Page-Size:
              description: From the request header
              explode: false
              schema:
                type: integer
              style: simple
            Fiken-Api-Page-Count:
              description: The total number of pages in this resource with this page
                size
              explode: false
              schema:
                type: integer
              style: simple
            Fiken-Api-Result-Count:
              description: The total number of elements in this resource
              explode: false
              schema:
                type: integer
              style: simple
      tags:
      - sales
    post:
      description: Creates a new sale. This corresponds to "Annet salg" in Fiken and
        should be used when the invoice document and invoice number have been created
        outside Fiken. Otherwise the invoices-endpoints should be used.
      operationId: createSale
      parameters:
      - description: Slug of company to retrieve
        explode: false
        in: path
        name: companySlug
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/saleRequest'
        required: true
      responses:
        "201":
          description: Created
          headers:
            Location:
              description: Full URL of newly created sale
              explode: false
              schema:
                format: uri
                type: string
              style: simple
      tags:
      - sales
  /companies/{companySlug}/sales/{saleId}:
    get:
      description: Returns sale with specified id.
      operationId: getSale
      parameters:
      - description: Slug of company to retrieve
        explode: false
        in: path
        name: companySlug
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: saleId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/saleResult'
          description: OK
      tags:
      - sales
  /companies/{companySlug}/sales/{saleId}/settled:
    patch:
      description: Marks the sale as settled without payment. This is synonymous with
        "sett til oppgjort uten betaling" in the GUI. It is possible to change the
        date of settlement by sending a new settledDate.
      operationId: settledSale
      parameters:
      - description: Slug of company to retrieve
        explode: false
        in: path
        name: companySlug
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: saleId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      - description: Date that the sale is settled
        explode: true
        in: query
        name: settledDate
        required: true
        schema:
          format: date
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/saleResult'
          description: OK
      tags:
      - sales
  /companies/{companySlug}/sales/{saleId}/delete:
    patch:
      description: "Sets the deleted flag for a sale. The sale is not deleted, but\
        \ a reverse transaction is created and the \"deleted\" property is set to\
        \ true."
      operationId: deleteSale
      parameters:
      - description: Slug of company to retrieve
        explode: false
        in: path
        name: companySlug
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: saleId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      - description: Required description for deleting the sale
        explode: true
        in: query
        name: description
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/saleResult'
          description: OK
      tags:
      - sales
  /companies/{companySlug}/sales/{saleId}/attachments:
    get:
      description: Returns all attachments for specified sale.
      operationId: getSaleAttachments
      parameters:
      - description: Slug of company to retrieve
        explode: false
        in: path
        name: companySlug
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: saleId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/attachment'
                type: array
          description: OK
      tags:
      - sales
    post:
      description: Creates and adds a new attachment to a Sale
      operationId: addAttachmentToSale
      parameters:
      - description: Slug of company to retrieve
        explode: false
        in: path
        name: companySlug
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: saleId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/addAttachmentToSale_request'
        required: false
      responses:
        "201":
          description: Created
          headers:
            Location:
              description: Full URL of newly created attachment
              explode: false
              schema:
                format: uri
                type: string
              style: simple
      tags:
      - sales
  /companies/{companySlug}/sales/{saleId}/payments:
    get:
      description: Returns all payments for given sale
      operationId: getSalePayments
      parameters:
      - description: Slug of company to retrieve
        explode: false
        in: path
        name: companySlug
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: saleId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/payment'
                type: array
          description: OK
      tags:
      - sales
    post:
      description: Creates a new payment for a given sale.
      operationId: createSalePayment
      parameters:
      - description: Slug of company to retrieve
        explode: false
        in: path
        name: companySlug
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: saleId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/payment'
        required: true
      responses:
        "201":
          description: Created
          headers:
            Location:
              description: Full URL of newly created payment
              explode: false
              schema:
                format: uri
                type: string
              style: simple
      tags:
      - sales
  /companies/{companySlug}/sales/{saleId}/payments/{paymentId}:
    get:
      description: Returns payment with specified id.
      operationId: getSalePayment
      parameters:
      - description: Slug of company to retrieve
        explode: false
        in: path
        name: companySlug
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: saleId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      - explode: false
        in: path
        name: paymentId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/payment'
          description: OK
      tags:
      - sales
  /companies/{companySlug}/sales/drafts:
    get:
      description: Returns all sale drafts for given company.
      operationId: getSaleDrafts
      parameters:
      - description: Slug of company to retrieve
        explode: false
        in: path
        name: companySlug
        required: true
        schema:
          type: string
        style: simple
      - description: |
          Returns the number of the page to return. Valid page values are integers from 0 to the total number of pages.
          Default value is 0.
        explode: true
        in: query
        name: page
        required: false
        schema:
          default: 0
          minimum: 0
          type: integer
        style: form
      - description: |
          Defines the number of entries to return on each page. Maximum number of results that can be returned at one time are 100.
          Default value is 25.
        explode: true
        in: query
        name: pageSize
        required: false
        schema:
          default: 25
          maximum: 100
          minimum: 1
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/draftResult'
                type: array
          description: OK
          headers:
            Fiken-Api-Page:
              description: From the request header
              explode: false
              schema:
                type: integer
              style: simple
            Fiken-Api-Page-Size:
              description: From the request header
              explode: false
              schema:
                type: integer
              style: simple
            Fiken-Api-Page-Count:
              description: The total number of pages in this resource with this page
                size
              explode: false
              schema:
                type: integer
              style: simple
            Fiken-Api-Result-Count:
              description: The total number of elements in this resource
              explode: false
              schema:
                type: integer
              style: simple
      tags:
      - sales
    post:
      description: Creates a sale draft.
      operationId: createSaleDraft
      parameters:
      - description: Slug of company to retrieve
        explode: false
        in: path
        name: companySlug
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/draftRequest'
        required: true
      responses:
        "201":
          description: Created
          headers:
            Location:
              description: Full URL of newly created draft
              explode: false
              schema:
                format: uri
                type: string
              style: simple
      tags:
      - sales
  /companies/{companySlug}/sales/drafts/{draftId}:
    delete:
      description: Delete draft with specified id.
      operationId: deleteSaleDraft
      parameters:
      - description: Slug of company to retrieve
        explode: false
        in: path
        name: companySlug
        required: true
        schema:
          type: string
        style: simple
      - description: |
          The draftId (primary key of the returned object) is returned in the GET all drafts call.
        explode: false
        in: path
        name: draftId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      responses:
        "204":
          description: Deleted
      tags:
      - sales
    get:
      description: Returns draft with specified id.
      operationId: getSaleDraft
      parameters:
      - description: Slug of company to retrieve
        explode: false
        in: path
        name: companySlug
        required: true
        schema:
          type: string
        style: simple
      - description: |
          The draftId (primary key of the returned object) is returned in the GET all drafts call.
        explode: false
        in: path
        name: draftId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/draftResult'
          description: OK
      tags:
      - sales
    put:
      description: |
        Updates draft with provided id.
      operationId: updateSaleDraft
      parameters:
      - description: Slug of company to retrieve
        explode: false
        in: path
        name: companySlug
        required: true
        schema:
          type: string
        style: simple
      - description: |
          The draftId (primary key of the returned object) is returned in the GET all drafts call.
        explode: false
        in: path
        name: draftId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/draftRequest'
        required: true
      responses:
        "201":
          description: Created
          headers:
            Location:
              description: Full URL of updated draft
              explode: false
              schema:
                format: uri
                type: string
              style: simple
      tags:
      - sales
  /companies/{companySlug}/sales/drafts/{draftId}/attachments:
    get:
      description: Returns all attachments for specified draft.
      operationId: getSaleDraftAttachments
      parameters:
      - description: Slug of company to retrieve
        explode: false
        in: path
        name: companySlug
        required: true
        schema:
          type: string
        style: simple
      - description: |
          The draftId (primary key of the returned object) is returned in the GET all drafts call.
        explode: false
        in: path
        name: draftId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/attachment'
                type: array
          description: OK
      tags:
      - sales
    post:
      description: Creates and adds a new attachment to a draft
      operationId: addAttachmentToSaleDraft
      parameters:
      - description: Slug of company to retrieve
        explode: false
        in: path
        name: companySlug
        required: true
        schema:
          type: string
        style: simple
      - description: |
          The draftId (primary key of the returned object) is returned in the GET all drafts call.
        explode: false
        in: path
        name: draftId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/addAttachmentToJournalEntry_request'
        required: false
      responses:
        "201":
          description: Created
          headers:
            Location:
              description: Full URL of newly created attachment
              explode: false
              schema:
                format: uri
                type: string
              style: simple
      tags:
      - sales
  /companies/{companySlug}/sales/drafts/{draftId}/createSale:
    post:
      description: Creates a sale from an already created draft.
      operationId: createSaleFromDraft
      parameters:
      - description: Slug of company to retrieve
        explode: false
        in: path
        name: companySlug
        required: true
        schema:
          type: string
        style: simple
      - description: |
          The draftId (primary key of the returned object) is returned in the GET all drafts call.
        explode: false
        in: path
        name: draftId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      responses:
        "201":
          description: Created
          headers:
            Location:
              description: Full URL of newly created sale
              explode: false
              schema:
                format: uri
                type: string
              style: simple
      tags:
      - sales
  /companies/{companySlug}/purchases:
    get:
      description: Returns all purchases for given company
      operationId: getPurchases
      parameters:
      - description: Slug of company to retrieve
        explode: false
        in: path
        name: companySlug
        required: true
        schema:
          type: string
        style: simple
      - description: |
          Returns the number of the page to return. Valid page values are integers from 0 to the total number of pages.
          Default value is 0.
        explode: true
        in: query
        name: page
        required: false
        schema:
          default: 0
          minimum: 0
          type: integer
        style: form
      - description: |
          Defines the number of entries to return on each page. Maximum number of results that can be returned at one time are 100.
          Default value is 25.
        explode: true
        in: query
        name: pageSize
        required: false
        schema:
          default: 25
          maximum: 100
          minimum: 1
          type: integer
        style: form
      - description: |
          Dates are represented as strings formatted as YYYY-MM-DD.
          Example: January 1st, 1970: "1970-01-01"
        explode: true
        in: query
        name: date
        required: false
        schema:
          format: date
          type: string
        style: form
      - description: |
          Filter based on date less than or equal to parameter value.
          Dates are represented as strings formatted as YYYY-MM-DD.
          Example: January 1st, 1970: "1970-01-01"
        explode: true
        in: query
        name: dateLe
        required: false
        schema:
          format: date
          type: string
        style: form
      - description: |
          Filter based on date strictly less than parameter value.
          Dates are represented as strings formatted as YYYY-MM-DD.
          Example: January 1st, 1970: "1970-01-01"
        explode: true
        in: query
        name: dateLt
        required: false
        schema:
          format: date
          type: string
        style: form
      - description: |
          Filter based on date greater than or equal to parameter value.
          Dates are represented as strings formatted as YYYY-MM-DD.
          Example: January 1st, 1970: "1970-01-01"
        explode: true
        in: query
        name: dateGe
        required: false
        schema:
          format: date
          type: string
        style: form
      - description: |
          Filter based on date strictly greater than parameter value
          Dates are represented as strings formatted as YYYY-MM-DD.
          Example: January 1st, 1970: "1970-01-01"
        explode: true
        in: query
        name: dateGt
        required: false
        schema:
          format: date
          type: string
        style: form
      - description: Sorts results in either ascending (asc) or descending (desc)
          order based on the parameter value.
        explode: true
        in: query
        name: sortBy
        required: false
        schema:
          default: date asc
          enum:
          - date asc
          - date desc
          type: string
        style: form
      - description: |
          When set to true, returns only purchases that have been paid. Otherwise false returns all purchases
          that have not been fully settled.
        explode: true
        in: query
        name: paid
        required: false
        schema:
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/purchaseResult'
                type: array
          description: OK
          headers:
            Fiken-Api-Page:
              description: From the request header
              explode: false
              schema:
                type: integer
              style: simple
            Fiken-Api-Page-Size:
              description: From the request header
              explode: false
              schema:
                type: integer
              style: simple
            Fiken-Api-Page-Count:
              description: The total number of pages in this resource with this page
                size
              explode: false
              schema:
                type: integer
              style: simple
            Fiken-Api-Result-Count:
              description: The total number of elements in this resource
              explode: false
              schema:
                type: integer
              style: simple
      tags:
      - purchases
    post:
      description: Creates a new purchase.
      operationId: createPurchase
      parameters:
      - description: Slug of company to retrieve
        explode: false
        in: path
        name: companySlug
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/purchaseRequest'
        required: true
      responses:
        "201":
          description: Created
          headers:
            Location:
              description: Full URL of newly created purchase
              explode: false
              schema:
                format: uri
                type: string
              style: simple
      tags:
      - purchases
  /companies/{companySlug}/purchases/{purchaseId}:
    get:
      description: Returns purchase with specified id.
      operationId: getPurchase
      parameters:
      - description: Slug of company to retrieve
        explode: false
        in: path
        name: companySlug
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: purchaseId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/purchaseResult'
          description: OK
      tags:
      - purchases
  /companies/{companySlug}/purchases/{purchaseId}/delete:
    patch:
      description: "Sets the deleted flag for a purchase. The purchase is not deleted,\
        \ but a reverse transaction is created and the \"deleted\" property is set\
        \ to true."
      operationId: deletePurchase
      parameters:
      - description: Slug of company to retrieve
        explode: false
        in: path
        name: companySlug
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: purchaseId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      - description: Required description for deleting the purchase
        explode: true
        in: query
        name: description
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/purchaseResult'
          description: OK
      tags:
      - purchases
  /companies/{companySlug}/purchases/{purchaseId}/attachments:
    get:
      description: Returns all attachments for specified purchase.
      operationId: getPurchaseAttachments
      parameters:
      - description: Slug of company to retrieve
        explode: false
        in: path
        name: companySlug
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: purchaseId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/attachment'
                type: array
          description: OK
      tags:
      - purchases
    post:
      description: Creates and adds a new attachment to a Purchase
      operationId: addAttachmentToPurchase
      parameters:
      - description: Slug of company to retrieve
        explode: false
        in: path
        name: companySlug
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: purchaseId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/addAttachmentToPurchase_request'
        required: false
      responses:
        "201":
          description: Created
          headers:
            Location:
              description: Full URL of newly created attachment
              explode: false
              schema:
                format: uri
                type: string
              style: simple
      tags:
      - purchases
  /companies/{companySlug}/purchases/{purchaseId}/payments:
    get:
      description: Returns all purchases for given company
      operationId: getPurchasePayments
      parameters:
      - description: Slug of company to retrieve
        explode: false
        in: path
        name: companySlug
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: purchaseId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/payment'
                type: array
          description: OK
      tags:
      - purchases
    post:
      description: Creates a new payment for a purchase
      operationId: createPurchasePayment
      parameters:
      - description: Slug of company to retrieve
        explode: false
        in: path
        name: companySlug
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: purchaseId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/payment'
        required: true
      responses:
        "201":
          description: Created
          headers:
            Location:
              description: Full URL of newly created payment
              explode: false
              schema:
                format: uri
                type: string
              style: simple
      tags:
      - purchases
  /companies/{companySlug}/purchases/{purchaseId}/payments/{paymentId}:
    get:
      description: Returns given payment for specified purchase
      operationId: getPurchasePayment
      parameters:
      - description: Slug of company to retrieve
        explode: false
        in: path
        name: companySlug
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: purchaseId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      - explode: false
        in: path
        name: paymentId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/payment'
          description: OK
      tags:
      - purchases
  /companies/{companySlug}/purchases/drafts:
    get:
      description: Returns all purchase drafts for given company.
      operationId: getPurchaseDrafts
      parameters:
      - description: Slug of company to retrieve
        explode: false
        in: path
        name: companySlug
        required: true
        schema:
          type: string
        style: simple
      - description: |
          Returns the number of the page to return. Valid page values are integers from 0 to the total number of pages.
          Default value is 0.
        explode: true
        in: query
        name: page
        required: false
        schema:
          default: 0
          minimum: 0
          type: integer
        style: form
      - description: |
          Defines the number of entries to return on each page. Maximum number of results that can be returned at one time are 100.
          Default value is 25.
        explode: true
        in: query
        name: pageSize
        required: false
        schema:
          default: 25
          maximum: 100
          minimum: 1
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/draftResult'
                type: array
          description: OK
          headers:
            Fiken-Api-Page:
              description: From the request header
              explode: false
              schema:
                type: integer
              style: simple
            Fiken-Api-Page-Size:
              description: From the request header
              explode: false
              schema:
                type: integer
              style: simple
            Fiken-Api-Page-Count:
              description: The total number of pages in this resource with this page
                size
              explode: false
              schema:
                type: integer
              style: simple
            Fiken-Api-Result-Count:
              description: The total number of elements in this resource
              explode: false
              schema:
                type: integer
              style: simple
      tags:
      - purchases
    post:
      description: Creates a purchase draft.
      operationId: createPurchaseDraft
      parameters:
      - description: Slug of company to retrieve
        explode: false
        in: path
        name: companySlug
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/draftRequest'
        required: true
      responses:
        "201":
          description: Created
          headers:
            Location:
              description: Full URL of newly created draft
              explode: false
              schema:
                format: uri
                type: string
              style: simple
      tags:
      - purchases
  /companies/{companySlug}/purchases/drafts/{draftId}:
    delete:
      description: Delete draft with specified id.
      operationId: deletePurchaseDraft
      parameters:
      - description: Slug of company to retrieve
        explode: false
        in: path
        name: companySlug
        required: true
        schema:
          type: string
        style: simple
      - description: |
          The draftId (primary key of the returned object) is returned in the GET all drafts call.
        explode: false
        in: path
        name: draftId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      responses:
        "204":
          description: Deleted
      tags:
      - purchases
    get:
      description: Returns draft with specified id.
      operationId: getPurchaseDraft
      parameters:
      - description: Slug of company to retrieve
        explode: false
        in: path
        name: companySlug
        required: true
        schema:
          type: string
        style: simple
      - description: |
          The draftId (primary key of the returned object) is returned in the GET all drafts call.
        explode: false
        in: path
        name: draftId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/draftResult'
          description: OK
      tags:
      - purchases
    put:
      description: |
        Updates draft with provided id.
      operationId: updatePurchaseDraft
      parameters:
      - description: Slug of company to retrieve
        explode: false
        in: path
        name: companySlug
        required: true
        schema:
          type: string
        style: simple
      - description: |
          The draftId (primary key of the returned object) is returned in the GET all drafts call.
        explode: false
        in: path
        name: draftId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/draftRequest'
        required: true
      responses:
        "201":
          description: Created
          headers:
            Location:
              description: Full URL of updated draft
              explode: false
              schema:
                format: uri
                type: string
              style: simple
      tags:
      - purchases
  /companies/{companySlug}/purchases/drafts/{draftId}/attachments:
    get:
      description: Returns all attachments for specified draft.
      operationId: getPurchaseDraftAttachments
      parameters:
      - description: Slug of company to retrieve
        explode: false
        in: path
        name: companySlug
        required: true
        schema:
          type: string
        style: simple
      - description: |
          The draftId (primary key of the returned object) is returned in the GET all drafts call.
        explode: false
        in: path
        name: draftId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/attachment'
                type: array
          description: OK
      tags:
      - purchases
    post:
      description: Creates and adds a new attachment to a draft
      operationId: addAttachmentToPurchaseDraft
      parameters:
      - description: Slug of company to retrieve
        explode: false
        in: path
        name: companySlug
        required: true
        schema:
          type: string
        style: simple
      - description: |
          The draftId (primary key of the returned object) is returned in the GET all drafts call.
        explode: false
        in: path
        name: draftId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/addAttachmentToJournalEntry_request'
        required: false
      responses:
        "201":
          description: Created
          headers:
            Location:
              description: Full URL of newly created attachment
              explode: false
              schema:
                format: uri
                type: string
              style: simple
      tags:
      - purchases
  /companies/{companySlug}/purchases/drafts/{draftId}/createPurchase:
    post:
      description: Creates a purchase from an already created draft.
      operationId: createPurchaseFromDraft
      parameters:
      - description: Slug of company to retrieve
        explode: false
        in: path
        name: companySlug
        required: true
        schema:
          type: string
        style: simple
      - description: |
          The draftId (primary key of the returned object) is returned in the GET all drafts call.
        explode: false
        in: path
        name: draftId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      responses:
        "201":
          description: Created
          headers:
            Location:
              description: Full URL of newly created purchase
              explode: false
              schema:
                format: uri
                type: string
              style: simple
      tags:
      - purchases
  /companies/{companySlug}/inbox:
    get:
      description: Returns the contents of the inbox for given company.
      operationId: getInbox
      parameters:
      - description: Slug of company to retrieve
        explode: false
        in: path
        name: companySlug
        required: true
        schema:
          type: string
        style: simple
      - description: |
          Returns the number of the page to return. Valid page values are integers from 0 to the total number of pages.
          Default value is 0.
        explode: true
        in: query
        name: page
        required: false
        schema:
          default: 0
          minimum: 0
          type: integer
        style: form
      - description: |
          Defines the number of entries to return on each page. Maximum number of results that can be returned at one time are 100.
          Default value is 25.
        explode: true
        in: query
        name: pageSize
        required: false
        schema:
          default: 25
          maximum: 100
          minimum: 1
          type: integer
        style: form
      - description: Sorts results in either ascending (asc) or descending (desc)
          order based on the parameter value.
        explode: true
        in: query
        name: sortBy
        required: false
        schema:
          default: createdDate desc
          enum:
          - createdDate asc
          - createdDate desc
          - name asc
          - name desc
          type: string
        style: form
      - explode: true
        in: query
        name: status
        required: false
        schema:
          default: all
          description: |
            Filter documents based on their status. If not specified, all documents are returned.
          enum:
          - all
          - unused
          - used
          type: string
        style: form
      - description: "Filter documents based on their name, case-insensitive substring\
          \ match."
        explode: true
        in: query
        name: name
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/inboxResult'
                type: array
          description: OK
          headers:
            Fiken-Api-Page:
              description: From the request header
              explode: false
              schema:
                type: integer
              style: simple
            Fiken-Api-Page-Size:
              description: From the request header
              explode: false
              schema:
                type: integer
              style: simple
            Fiken-Api-Page-Count:
              description: The total number of pages in this resource with this page
                size
              explode: false
              schema:
                type: integer
              style: simple
            Fiken-Api-Result-Count:
              description: The total number of elements in this resourceA
              explode: false
              schema:
                type: integer
              style: simple
      tags:
      - inbox
    post:
      description: Upload a document to the inbox
      operationId: createInboxDocument
      parameters:
      - description: Slug of company to retrieve
        explode: false
        in: path
        name: companySlug
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/createInboxDocument_request'
        required: true
      responses:
        "201":
          description: Created
          headers:
            Location:
              description: Full URL of newly created inbox document
              explode: false
              schema:
                format: uri
                type: string
              style: simple
      tags:
      - inbox
  /companies/{companySlug}/inbox/{inboxDocumentId}:
    get:
      description: Returns the inbox document with specified id
      operationId: getInboxDocument
      parameters:
      - description: Slug of company to retrieve
        explode: false
        in: path
        name: companySlug
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: inboxDocumentId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inboxResult'
          description: OK
      tags:
      - inbox
  /companies/{companySlug}/projects:
    get:
      description: Returns all projects for given company
      operationId: getProjects
      parameters:
      - description: Slug of company to retrieve
        explode: false
        in: path
        name: companySlug
        required: true
        schema:
          type: string
        style: simple
      - description: |
          Returns the number of the page to return. Valid page values are integers from 0 to the total number of pages.
          Default value is 0.
        explode: true
        in: query
        name: page
        required: false
        schema:
          default: 0
          minimum: 0
          type: integer
        style: form
      - description: |
          Defines the number of entries to return on each page. Maximum number of results that can be returned at one time are 100.
          Default value is 25.
        explode: true
        in: query
        name: pageSize
        required: false
        schema:
          default: 25
          maximum: 100
          minimum: 1
          type: integer
        style: form
      - description: Filter results based on completed / not completed.
        explode: true
        in: query
        name: completed
        required: false
        schema:
          type: boolean
        style: form
      - description: Filter results based on name of the project.
        explode: true
        in: query
        name: name
        required: false
        schema:
          type: string
        style: form
      - description: Filter results based on number of the project.
        explode: true
        in: query
        name: number
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/projectResult'
                type: array
          description: OK
          headers:
            Fiken-Api-Page:
              description: From the request header
              explode: false
              schema:
                type: integer
              style: simple
            Fiken-Api-Page-Size:
              description: From the request header
              explode: false
              schema:
                type: integer
              style: simple
            Fiken-Api-Page-Count:
              description: The total number of pages in this resource with this page
                size
              explode: false
              schema:
                type: integer
              style: simple
            Fiken-Api-Result-Count:
              description: The total number of elements in this resource
              explode: false
              schema:
                type: integer
              style: simple
      tags:
      - projects
    post:
      description: Creates a new project
      operationId: createProject
      parameters:
      - description: Slug of company to retrieve
        explode: false
        in: path
        name: companySlug
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/projectRequest'
        required: true
      responses:
        "201":
          description: Created
          headers:
            Location:
              description: Full URL of newly created project
              explode: false
              schema:
                format: uri
                type: string
              style: simple
      tags:
      - projects
  /companies/{companySlug}/projects/{projectId}:
    delete:
      description: Delete project with specified id.
      operationId: deleteProject
      parameters:
      - description: Slug of company to retrieve
        explode: false
        in: path
        name: companySlug
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: projectId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      responses:
        "204":
          description: Deleted
      tags:
      - projects
    get:
      description: Returns project with specified id.
      operationId: getProject
      parameters:
      - description: Slug of company to retrieve
        explode: false
        in: path
        name: companySlug
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: projectId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/projectResult'
          description: OK
      tags:
      - projects
    patch:
      description: |
        Updates project with provided id.
      operationId: updateProject
      parameters:
      - description: Slug of company to retrieve
        explode: false
        in: path
        name: companySlug
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: projectId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/updateProjectRequest'
        required: true
      responses:
        "201":
          description: Created
          headers:
            Location:
              description: Full URL of updated project
              explode: false
              schema:
                format: uri
                type: string
              style: simple
      tags:
      - projects
components:
  parameters:
    draftId:
      description: |
        The draftId (primary key of the returned object) is returned in the GET all drafts call.
      explode: false
      in: path
      name: draftId
      required: true
      schema:
        format: int64
        type: integer
      style: simple
    invoiceId:
      description: |
        The invoiceId (primary key of the returned object) is returned in the GET all
        invoices call; not to be confused with invoiceNumber
      explode: false
      in: path
      name: invoiceId
      required: true
      schema:
        format: int64
        type: integer
      style: simple
    purchaseId:
      explode: false
      in: path
      name: purchaseId
      required: true
      schema:
        format: int64
        type: integer
      style: simple
    projectId:
      explode: false
      in: path
      name: projectId
      required: true
      schema:
        format: int64
        type: integer
      style: simple
    companySlug:
      description: Slug of company to retrieve
      explode: false
      in: path
      name: companySlug
      required: true
      schema:
        type: string
      style: simple
    journalEntryId:
      explode: false
      in: path
      name: journalEntryId
      required: true
      schema:
        format: int64
        type: integer
      style: simple
    saleId:
      explode: false
      in: path
      name: saleId
      required: true
      schema:
        format: int64
        type: integer
      style: simple
    paymentId:
      explode: false
      in: path
      name: paymentId
      required: true
      schema:
        format: int64
        type: integer
      style: simple
    accountCode:
      description: Code number of the bookkeeping account to retrieve
      explode: true
      in: query
      name: accountCode
      required: false
      schema:
        type: string
      style: form
    page:
      description: |
        Returns the number of the page to return. Valid page values are integers from 0 to the total number of pages.
        Default value is 0.
      explode: true
      in: query
      name: page
      required: false
      schema:
        default: 0
        minimum: 0
        type: integer
      style: form
    pageSize:
      description: |
        Defines the number of entries to return on each page. Maximum number of results that can be returned at one time are 100.
        Default value is 25.
      explode: true
      in: query
      name: pageSize
      required: false
      schema:
        default: 25
        maximum: 100
        minimum: 1
        type: integer
      style: form
    field:
      explode: true
      in: query
      name: field
      required: false
      schema:
        type: string
      style: form
    collection:
      explode: true
      in: query
      name: collection
      required: false
      schema:
        type: string
      style: form
    query:
      explode: true
      in: query
      name: query
      required: false
      schema:
        type: string
      style: form
    fromAccount:
      description: Filter parameter specifying which account numbers to return. Specify
        using the from and to parameters (excluding subaccount).
      example: 1000
      explode: true
      in: query
      name: fromAccount
      required: false
      schema:
        format: int64
        type: integer
      style: form
    toAccount:
      description: Filter parameter specifying which account numbers to return. Specify
        using the from and to parameters (excluding subaccount).
      example: 2000
      explode: true
      in: query
      name: toAccount
      required: false
      schema:
        format: int64
        type: integer
      style: form
    date:
      description: |
        Dates are represented as strings formatted as YYYY-MM-DD.
        Example: January 1st, 1970: "1970-01-01"
      explode: true
      in: query
      name: date
      required: false
      schema:
        format: date
        type: string
      style: form
    createdDate:
      description: |
        Dates are represented as strings formatted as YYYY-MM-DD.
        Example: January 1st, 1970: "1970-01-01"
      explode: true
      in: query
      name: createdDate
      required: false
      schema:
        format: date
        type: string
      style: form
    createdDateLe:
      description: |
        Returns results that were created before or on the date provided as a parameter value.
        Dates are represented as strings formatted as YYYY-MM-DD.
        Example: January 1st, 1970: "1970-01-01"
      explode: true
      in: query
      name: createdDateLe
      required: false
      schema:
        format: date
        type: string
      style: form
    createdDateLt:
      description: |
        Returns results that were created strictly before the date provided as a parameter value.
        Dates are represented as strings formatted as YYYY-MM-DD.
        Example: January 1st, 1970: "1970-01-01"
      explode: true
      in: query
      name: createdDateLt
      required: false
      schema:
        format: date
        type: string
      style: form
    createdDateGe:
      description: |
        Returns results that were created after or on the date provided as a parameter value.
        Dates are represented as strings formatted as YYYY-MM-DD.
        Example: January 1st, 1970: "1970-01-01"
      explode: true
      in: query
      name: createdDateGe
      required: false
      schema:
        format: date
        type: string
      style: form
    createdDateGt:
      description: |
        Returns results that were created strictly after the date provided as a parameter value.
        Dates are represented as strings formatted as YYYY-MM-DD.
        Example: January 1st, 1970: "1970-01-01"
      explode: true
      in: query
      name: createdDateGt
      required: false
      schema:
        format: date
        type: string
      style: form
    issueDate:
      description: |
        Dates are represented as strings formatted as YYYY-MM-DD.
        Example: January 1st, 1970: "1970-01-01"
      explode: true
      in: query
      name: issueDate
      required: false
      schema:
        format: date
        type: string
      style: form
    dateLe:
      description: |
        Filter based on date less than or equal to parameter value.
        Dates are represented as strings formatted as YYYY-MM-DD.
        Example: January 1st, 1970: "1970-01-01"
      explode: true
      in: query
      name: dateLe
      required: false
      schema:
        format: date
        type: string
      style: form
    issueDateLe:
      description: |
        Filter based on date less than or equal to parameter value.
        Dates are represented as strings formatted as YYYY-MM-DD.
        Example: January 1st, 1970: "1970-01-01"
      explode: true
      in: query
      name: issueDateLe
      required: false
      schema:
        format: date
        type: string
      style: form
    dateLt:
      description: |
        Filter based on date strictly less than parameter value.
        Dates are represented as strings formatted as YYYY-MM-DD.
        Example: January 1st, 1970: "1970-01-01"
      explode: true
      in: query
      name: dateLt
      required: false
      schema:
        format: date
        type: string
      style: form
    issueDateLt:
      description: |
        Filter based on date strictly less than parameter value.
        Dates are represented as strings formatted as YYYY-MM-DD.
        Example: January 1st, 1970: "1970-01-01"
      explode: true
      in: query
      name: issueDateLt
      required: false
      schema:
        format: date
        type: string
      style: form
    dateGe:
      description: |
        Filter based on date greater than or equal to parameter value.
        Dates are represented as strings formatted as YYYY-MM-DD.
        Example: January 1st, 1970: "1970-01-01"
      explode: true
      in: query
      name: dateGe
      required: false
      schema:
        format: date
        type: string
      style: form
    issueDateGe:
      description: |
        Filter based on date greater than or equal to parameter value.
        Dates are represented as strings formatted as YYYY-MM-DD.
        Example: January 1st, 1970: "1970-01-01"
      explode: true
      in: query
      name: issueDateGe
      required: false
      schema:
        format: date
        type: string
      style: form
    dateGt:
      description: |
        Filter based on date strictly greater than parameter value
        Dates are represented as strings formatted as YYYY-MM-DD.
        Example: January 1st, 1970: "1970-01-01"
      explode: true
      in: query
      name: dateGt
      required: false
      schema:
        format: date
        type: string
      style: form
    issueDateGt:
      description: |
        Filter based on date strictly greater than parameter value
        Dates are represented as strings formatted as YYYY-MM-DD.
        Example: January 1st, 1970: "1970-01-01"
      explode: true
      in: query
      name: issueDateGt
      required: false
      schema:
        format: date
        type: string
      style: form
    lastModified:
      description: |
        Filter based on date of last modification. Returns results that were last modified on the date provided as a parameter value.
        Dates are represented as strings formatted as YYYY-MM-DD.
        Example: January 1st, 1970: "1970-01-01"
      explode: true
      in: query
      name: lastModified
      required: false
      schema:
        format: date
        type: string
      style: form
    lastModifiedLe:
      description: |
        Returns results that have been last modified before or on the date provided as a parameter value.
        Dates are represented as strings formatted as YYYY-MM-DD.
        Example: January 1st, 1970: "1970-01-01"
      explode: true
      in: query
      name: lastModifiedLe
      required: false
      schema:
        format: date
        type: string
      style: form
    lastModifiedLt:
      description: |
        Returns results that have been last modified strictly before the date provided as a parameter value.
        Dates are represented as strings formatted as YYYY-MM-DD.
        Example: January 1st, 1970: "1970-01-01"
      explode: true
      in: query
      name: lastModifiedLt
      required: false
      schema:
        format: date
        type: string
      style: form
    lastModifiedGe:
      description: |
        Returns results that have been last modified after or on the date provided as a parameter value.
        Dates are represented as strings formatted as YYYY-MM-DD.
        Example: January 1st, 1970: "1970-01-01"
      explode: true
      in: query
      name: lastModifiedGe
      required: false
      schema:
        format: date
        type: string
      style: form
    lastModifiedGt:
      description: |
        Returns results that have been last modified strictly after the date provided as a parameter value.
        Dates are represented as strings formatted as YYYY-MM-DD.
        Example: January 1st, 1970: "1970-01-01"
      explode: true
      in: query
      name: lastModifiedGt
      required: false
      schema:
        format: date
        type: string
      style: form
    dueDate:
      description: |
        Filter based on due date of invoice. Returns results from the date provided as a parameter value.
        Dates are represented as strings formatted as YYYY-MM-DD.
        Example: January 1st, 1970: "1970-01-01"
      explode: true
      in: query
      name: dueDate
      required: false
      schema:
        format: date
        type: string
      style: form
    dueDateLe:
      description: |
        Returns invoices with a due date before or on the date provided as a parameter value.
        Dates are represented as strings formatted as YYYY-MM-DD.
        Example: January 1st, 1970: "1970-01-01"
      explode: true
      in: query
      name: dueDateLe
      required: false
      schema:
        format: date
        type: string
      style: form
    dueDateLt:
      description: |
        Returns invoices with a due date that have been last modified strictly before the date provided as a parameter value.
        Dates are represented as strings formatted as YYYY-MM-DD.
        Example: January 1st, 1970: "1970-01-01"
      explode: true
      in: query
      name: dueDateLt
      required: false
      schema:
        format: date
        type: string
      style: form
    dueDateGe:
      description: |
        Returns invoices with a due date that have been last modified after or on the date provided as a parameter value.
        Dates are represented as strings formatted as YYYY-MM-DD.
        Example: January 1st, 1970: "1970-01-01"
      explode: true
      in: query
      name: dueDateGe
      required: false
      schema:
        format: date
        type: string
      style: form
    dueDateGt:
      description: |
        Returns invoices with a due date that have been last modified strictly after the date provided as a parameter value.
        Dates are represented as strings formatted as YYYY-MM-DD.
        Example: January 1st, 1970: "1970-01-01"
      explode: true
      in: query
      name: dueDateGt
      required: false
      schema:
        format: date
        type: string
      style: form
    inboxDocumentId:
      explode: false
      in: path
      name: inboxDocumentId
      required: true
      schema:
        format: int64
        type: integer
      style: simple
  schemas:
    accountBalance:
      allOf:
      - $ref: '#/components/schemas/account'
      - properties:
          balance:
            description: Balance of account for a given date given in cents (5050
              = 50.50)
            example: 15200
            format: int64
            type: integer
        type: object
      example:
        code: 1500:10029
        balance: 15200
        name: John Lewis
    account:
      example:
        code: 1500:10029
        name: John Lewis
      properties:
        code:
          example: 1500:10029
          type: string
        name:
          example: John Lewis
          type: string
      type: object
    address:
      example:
        country: Norway
        streetAddress: Karl Johan 34
        city: Oslo
        postCode: "0550"
        streetAddressLine2: H0405
      properties:
        streetAddress:
          example: Karl Johan 34
          type: string
        streetAddressLine2:
          example: H0405
          type: string
        city:
          example: Oslo
          type: string
        postCode:
          example: "0550"
          type: string
        country:
          example: Norway
          type: string
      required:
      - country
      type: object
    attachment:
      example:
        identifier: "24760"
        downloadUrl: downloadUrl
        comment: comment
        downloadUrlWithFikenNormalUserCredentials: downloadUrlWithFikenNormalUserCredentials
        type: invoice
      properties:
        identifier:
          description: User-defined identifier for attachment. Could be the Invoice
            Id or receipt number for example.
          example: "24760"
          type: string
        downloadUrl:
          description: For use with API credentials (bearer token or oauth 2)
          type: string
        downloadUrlWithFikenNormalUserCredentials:
          description: Requires the user to login with username and password in Fiken.
          type: string
        comment:
          description: Field for additional information for this attachment.
          type: string
        type:
          enum:
          - invoice
          - reminder
          - unspecified
          - ocr
          - bank_statement
          example: invoice
          type: string
      type: object
    bankAccountRequest:
      properties:
        name:
          example: Utgiftskonto DNB
          type: string
        bankAccountNumber:
          example: "11112233334"
          type: string
        bic:
          example: DNBANOKKXXX
          type: string
        iban:
          example: NO49 1111 2233 334
          type: string
        foreignService:
          example: Barclays UK
          type: string
        type:
          enum:
          - normal
          - tax_deduction
          - foreign
          - credit_card
          example: normal
          type: string
        inactive:
          default: false
          example: false
          type: boolean
      required:
      - bankAccountNumber
      - name
      - type
      type: object
    bankAccountResult:
      example:
        accountCode: 1920:10007
        reconciledBalance: 10050
        inactive: false
        bankAccountId: 2747365
        iban: iban
        name: Utgiftskonto DNB
        bankAccountNumber: "15035646830"
        reconciledDate: 2018-04-03
        foreignService: foreignService
        type: normal
        bic: bic
      properties:
        bankAccountId:
          example: 2747365
          format: int64
          type: integer
        name:
          example: Utgiftskonto DNB
          type: string
        accountCode:
          example: 1920:10007
          type: string
        bankAccountNumber:
          example: "15035646830"
          type: string
        iban:
          type: string
        bic:
          type: string
        foreignService:
          type: string
        type:
          enum:
          - normal
          - tax_deduction
          - foreign
          - credit_card
          example: normal
          type: string
        reconciledBalance:
          description: "Amounts are always represented as a number, and specifies\
            \ the number of cents in the amount. Fractions will be ignored. ie. 10050\
            \ = 100.50"
          example: 10050
          format: int64
          type: integer
        reconciledDate:
          example: 2018-04-03
          format: date
          type: string
        inactive:
          default: false
          example: false
          type: boolean
      type: object
    company:
      example:
        accountingStartDate: 2025-01-01
        vatType: "no"
        address:
          country: Norway
          streetAddress: Karl Johan 34
          city: Oslo
          postCode: "0550"
          streetAddressLine2: H0405
        phoneNumber: "62158537"
        organizationNumber: "123456789"
        name: Swagger test company
        hasApiAccess: true
        testCompany: true
        creationDate: 2025-01-01
        slug: swagger-test-company
        email: swaggertestcompany@fiken.gmail
      properties:
        name:
          description: Name of company.
          example: Swagger test company
          type: string
        slug:
          description: Formatted name of company. This is the companySlug that should
            be used in all URLs related to this company.
          example: swagger-test-company
          type: string
        organizationNumber:
          description: Brreg organization number.
          example: "123456789"
          type: string
        vatType:
          enum:
          - "no"
          - yearly
          - monthly
          - bi-monthly
          type: string
        address:
          $ref: '#/components/schemas/address'
        phoneNumber:
          example: "62158537"
          type: string
          writeOnly: true
        email:
          example: swaggertestcompany@fiken.gmail
          type: string
        creationDate:
          example: 2025-01-01
          format: date
          type: string
        hasApiAccess:
          example: true
          type: boolean
        testCompany:
          description: Whether the company is a demo (true) or not
          type: boolean
        accountingStartDate:
          example: 2025-01-01
          format: date
          type: string
      type: object
    contact:
      example:
        notes:
        - note: Garage 45
          author: Betty Boop
        - note: Garage 45
          author: Betty Boop
        documents:
        - identifier: "24760"
          downloadUrl: downloadUrl
          comment: comment
          downloadUrlWithFikenNormalUserCredentials: downloadUrlWithFikenNormalUserCredentials
          type: invoice
        - identifier: "24760"
          downloadUrl: downloadUrl
          comment: comment
          downloadUrlWithFikenNormalUserCredentials: downloadUrlWithFikenNormalUserCredentials
          type: invoice
        supplierNumber: 0
        daysUntilInvoicingDueDate: 15
        contactPerson:
        - phoneNumber: "98573564"
          address:
            country: Norway
            streetAddress: Karl Johan 34
            city: Oslo
            postCode: "0550"
            streetAddressLine2: H0405
          contactPersonId: 2747365
          name: Betty Boop
          email: bb@gmail.com
        - phoneNumber: "98573564"
          address:
            country: Norway
            streetAddress: Karl Johan 34
            city: Oslo
            postCode: "0550"
            streetAddressLine2: H0405
          contactPersonId: 2747365
          name: Betty Boop
          email: bb@gmail.com
        language: Norwegian
        inactive: true
        supplier: false
        bankAccountNumber: "11112233334"
        currency: NOK
        email: kontakt@fiken.gmail
        address:
          country: Norway
          streetAddress: Karl Johan 34
          city: Oslo
          postCode: "0550"
          streetAddressLine2: H0405
        customerAccountCode: 1500:20001
        contactId: 2747365
        lastModifiedDate: 2018-04-03
        organizationNumber: "913312465"
        groups:
        - groups
        - groups
        customerNumber: 51248
        createdDate: 2018-04-03
        phoneNumber: "62158537"
        memberNumber: 5464
        name: Fiken AS
        memberNumberString: "5464"
        supplierAccountCode: 2400:20001
        customer: false
      properties:
        contactId:
          example: 2747365
          format: int64
          readOnly: true
          type: integer
        createdDate:
          description: "Date that contact was created in Fiken, format yyyy-mm-dd."
          example: 2018-04-03
          format: date
          readOnly: true
          type: string
        lastModifiedDate:
          description: "Date that contact was last modified in Fiken, format yyyy-mm-dd."
          example: 2018-04-03
          format: date
          readOnly: true
          type: string
        name:
          example: Fiken AS
          maxLength: 200
          minLength: 1
          type: string
        email:
          example: kontakt@fiken.gmail
          maxLength: 200
          type: string
        organizationNumber:
          description: Brreg organization number.
          example: "913312465"
          maxLength: 200
          type: string
        customerNumber:
          example: 51248
          format: int32
          readOnly: true
          type: integer
        customerAccountCode:
          description: Format 1500:XXXXX
          example: 1500:20001
          readOnly: true
          type: string
        phoneNumber:
          example: "62158537"
          maxLength: 20
          type: string
          writeOnly: true
        memberNumber:
          deprecated: true
          description: A number that can be used to connect a contact to your own
            data. This field is no longer used and instead memberNumberString should
            be used.
          example: 5464
          type: number
          writeOnly: true
        memberNumberString:
          description: A number/id that can be used to connect a contact to your own
            data.
          example: "5464"
          type: string
          writeOnly: true
        supplierNumber:
          format: int32
          readOnly: true
          type: integer
        supplierAccountCode:
          description: Format 2400:XXXXX
          example: 2400:20001
          readOnly: true
          type: string
        customer:
          default: false
          description: True if the contact is a customer. It is possible for a contact
            to be both customer and supplier.
          type: boolean
        supplier:
          default: false
          description: True if the contact is a supplier. It is possible for a contact
            to be both supplier and customer.
          type: boolean
        bankAccountNumber:
          example: "11112233334"
          maxLength: 11
          type: string
        contactPerson:
          items:
            $ref: '#/components/schemas/contactPerson'
          type: array
        notes:
          items:
            $ref: '#/components/schemas/contactNote'
          readOnly: true
          type: array
        currency:
          description: "ISO 4217 currency code. Default foreign currency to use when\
            \ creating invoice to this contact (USD, EUR, SEK etc)"
          example: NOK
          pattern: "^[A-Z]{3}$"
          type: string
          writeOnly: true
        language:
          description: The language to use when sending documents to this contact.
            NORWEGIAN or ENGLISH. Defaults to NORWEGIAN.
          example: Norwegian
          nullable: true
          type: string
        inactive:
          description: Whether the contact has been deactivated (true) or is active
            (false)
          example: true
          type: boolean
        daysUntilInvoicingDueDate:
          description: Default number of days until due date for invoices.
          example: 15
          format: int32
          type: integer
        address:
          $ref: '#/components/schemas/address'
        groups:
          items:
            type: string
          type: array
        documents:
          items:
            $ref: '#/components/schemas/attachment'
          readOnly: true
          type: array
      required:
      - name
      type: object
    contactNote:
      example:
        note: Garage 45
        author: Betty Boop
      properties:
        author:
          example: Betty Boop
          type: string
        note:
          example: Garage 45
          type: string
      type: object
    note:
      description: Used for invoices and sales
      example:
        note: Invoice sent after telephone conversation with customer
        author: James Jones
      properties:
        author:
          example: James Jones
          type: string
        note:
          example: Invoice sent after telephone conversation with customer
          type: string
      type: object
    contactPerson:
      example:
        phoneNumber: "98573564"
        address:
          country: Norway
          streetAddress: Karl Johan 34
          city: Oslo
          postCode: "0550"
          streetAddressLine2: H0405
        contactPersonId: 2747365
        name: Betty Boop
        email: bb@gmail.com
      properties:
        contactPersonId:
          example: 2747365
          format: int64
          readOnly: true
          type: integer
        name:
          example: Betty Boop
          type: string
        email:
          example: bb@gmail.com
          type: string
        phoneNumber:
          example: "98573564"
          type: string
        address:
          $ref: '#/components/schemas/address'
      required:
      - email
      - name
      type: object
    counter:
      example:
        value: 10000
      properties:
        value:
          default: 10000
          description: Current value of the counter
          example: 10000
          format: int32
          type: integer
      type: object
    creditNoteLineResult:
      properties:
        incomeAccount:
          description: "Field is similar to vatType, it defaults to the product's\
            \ income account. Either the line or the product needs to have an income\
            \ account set."
          example: "3000"
          type: string
        vatType:
          description: |
            One of: {"HIGH", "MEDIUM", "LOW", "EXEMPT", "EXEMPT_IMPORT_EXPORT", "EXEMPT_REVERSE", "OUTSIDE", "NONE"}. "HIGH" is the most common.
          example: HIGH
          type: string
        unitPrice:
          description: Net price per unit in invoice currency (in cents).
          example: 4550
          format: int64
          type: integer
        quantity:
          description: Number of units to be invoiced.
          example: 5
          type: number
        discount:
          description: "If field is set, all amounts must be given before the discount\
            \ is applied. The API will calculate the new totals. Discount value should\
            \ be a percent with a value between 0 and 100. Decimal values such as\
            \ 25.5 are also allowed."
          example: 25
          type: number
        productId:
          description: Product Id of product associated with invoice line.
          example: 2888156
          format: int64
          type: integer
        description:
          description: Description of the invoiced product or service.
          example: "Goatskin, with extra-long suede cuffs"
          maxLength: 200
          type: string
        comment:
          description: Additional information to be printed on invoice.
          example: One size fits all
          maxLength: 200
          type: string
      required:
      - quantity
      - unitPrice
      type: object
    creditNoteResult:
      example:
        creditNoteNumber: 10001
        kid: "5855454756"
        netInNok: 25000
        associatedInvoiceId: 2888156
        project:
          number: number
          endDate: 2018-04-03
          contact:
            notes:
            - note: Garage 45
              author: Betty Boop
            - note: Garage 45
              author: Betty Boop
            documents:
            - identifier: "24760"
              downloadUrl: downloadUrl
              comment: comment
              downloadUrlWithFikenNormalUserCredentials: downloadUrlWithFikenNormalUserCredentials
              type: invoice
            - identifier: "24760"
              downloadUrl: downloadUrl
              comment: comment
              downloadUrlWithFikenNormalUserCredentials: downloadUrlWithFikenNormalUserCredentials
              type: invoice
            supplierNumber: 0
            daysUntilInvoicingDueDate: 15
            contactPerson:
            - phoneNumber: "98573564"
              address:
                country: Norway
                streetAddress: Karl Johan 34
                city: Oslo
                postCode: "0550"
                streetAddressLine2: H0405
              contactPersonId: 2747365
              name: Betty Boop
              email: bb@gmail.com
            - phoneNumber: "98573564"
              address:
                country: Norway
                streetAddress: Karl Johan 34
                city: Oslo
                postCode: "0550"
                streetAddressLine2: H0405
              contactPersonId: 2747365
              name: Betty Boop
              email: bb@gmail.com
            language: Norwegian
            inactive: true
            supplier: false
            bankAccountNumber: "11112233334"
            currency: NOK
            email: kontakt@fiken.gmail
            address:
              country: Norway
              streetAddress: Karl Johan 34
              city: Oslo
              postCode: "0550"
              streetAddressLine2: H0405
            customerAccountCode: 1500:20001
            contactId: 2747365
            lastModifiedDate: 2018-04-03
            organizationNumber: "913312465"
            groups:
            - groups
            - groups
            customerNumber: 51248
            createdDate: 2018-04-03
            phoneNumber: "62158537"
            memberNumber: 5464
            name: Fiken AS
            memberNumberString: "5464"
            supplierAccountCode: 2400:20001
            customer: false
          name: name
          description: description
          completed: true
          projectId: 73408306
          startDate: 2018-04-03
        creditNotePdf:
          identifier: "24760"
          downloadUrl: downloadUrl
          comment: comment
          downloadUrlWithFikenNormalUserCredentials: downloadUrlWithFikenNormalUserCredentials
          type: invoice
        grossInNok: 30000
        vatInNok: 5000
        ourReference: ourReference
        currency: NOK
        creditNoteId: 2888156
        net: 25000
        creditNoteText: creditNoteText
        lines:
        - vatInPercent: 25
          unitPrice: 4550
          quantity: 5
          gross: 5000
          productId: 2888156
          incomeAccount: "3000"
          vat: 500
          netInNok: 4500
          discount: 25
          description: "Goatskin, with extra-long suede cuffs"
          grossInNok: 5000
          vatInNok: 500
          productName: Gardening Gloves VI2
          vatType: vatType
          comment: One size fits all
          net: 4500
        - vatInPercent: 25
          unitPrice: 4550
          quantity: 5
          gross: 5000
          productId: 2888156
          incomeAccount: "3000"
          vat: 500
          netInNok: 4500
          discount: 25
          description: "Goatskin, with extra-long suede cuffs"
          grossInNok: 5000
          vatInNok: 500
          productName: Gardening Gloves VI2
          vatType: vatType
          comment: One size fits all
          net: 4500
        issueDate: 2018-04-03
        creditNoteDraftUuid: 123e4567-e89b-12d3-a456-426655440000
        address:
          country: Norway
          streetAddress: Karl Johan 34
          city: Oslo
          postCode: "0550"
          streetAddressLine2: H0405
        gross: 30000
        yourReference: yourReference
        lastModifiedDate: 2024-04-03
        settled: true
        vat: 5000
        sale:
          date: 2018-04-03
          notes:
          - note: Invoice sent after telephone conversation with customer
            author: James Jones
          - note: Invoice sent after telephone conversation with customer
            author: James Jones
          saleId: 2888156
          dueDate: 2018-04-03
          kid: "5855454756"
          project:
            number: number
            endDate: 2018-04-03
            contact:
              notes:
              - note: Garage 45
                author: Betty Boop
              - note: Garage 45
                author: Betty Boop
              documents:
              - identifier: "24760"
                downloadUrl: downloadUrl
                comment: comment
                downloadUrlWithFikenNormalUserCredentials: downloadUrlWithFikenNormalUserCredentials
                type: invoice
              - identifier: "24760"
                downloadUrl: downloadUrl
                comment: comment
                downloadUrlWithFikenNormalUserCredentials: downloadUrlWithFikenNormalUserCredentials
                type: invoice
              supplierNumber: 0
              daysUntilInvoicingDueDate: 15
              contactPerson:
              - phoneNumber: "98573564"
                address:
                  country: Norway
                  streetAddress: Karl Johan 34
                  city: Oslo
                  postCode: "0550"
                  streetAddressLine2: H0405
                contactPersonId: 2747365
                name: Betty Boop
                email: bb@gmail.com
              - phoneNumber: "98573564"
                address:
                  country: Norway
                  streetAddress: Karl Johan 34
                  city: Oslo
                  postCode: "0550"
                  streetAddressLine2: H0405
                contactPersonId: 2747365
                name: Betty Boop
                email: bb@gmail.com
              language: Norwegian
              inactive: true
              supplier: false
              bankAccountNumber: "11112233334"
              currency: NOK
              email: kontakt@fiken.gmail
              address:
                country: Norway
                streetAddress: Karl Johan 34
                city: Oslo
                postCode: "0550"
                streetAddressLine2: H0405
              customerAccountCode: 1500:20001
              contactId: 2747365
              lastModifiedDate: 2018-04-03
              organizationNumber: "913312465"
              groups:
              - groups
              - groups
              customerNumber: 51248
              createdDate: 2018-04-03
              phoneNumber: "62158537"
              memberNumber: 5464
              name: Fiken AS
              memberNumberString: "5464"
              supplierAccountCode: 2400:20001
              customer: false
            name: name
            description: description
            completed: true
            projectId: 73408306
            startDate: 2018-04-03
          totalPaidInCurrency: 634550
          saleNumber: XK455L
          currency: NOK
          settledDate: 2023-04-03
          lines:
          - vatType: vatType
            vat: 500
            description: description
            netPrice: 4500
            netPriceInCurrency: 4500
            vatInCurrency: 500
            projectId: 2815556
            account: "3000"
          - vatType: vatType
            vat: 500
            description: description
            netPrice: 4500
            netPriceInCurrency: 4500
            vatInCurrency: 500
            projectId: 2815556
            account: "3000"
          outstandingBalance: 145
          writeOff: false
          salePayments:
          - date: 2018-04-03
            amount: 34000
            paymentId: 2888156
            amountInNok: 500000
            fee: 6
            currency: NOK
            account: 1920:10001
          - date: 2018-04-03
            amount: 34000
            paymentId: 2888156
            amountInNok: 500000
            fee: 6
            currency: NOK
            account: 1920:10001
          lastModifiedDate: 2018-04-03
          netAmount: 4500
          totalPaid: 524500
          outstandingBalanceInCurrency: 65
          kind: external_invoice
          settled: true
          transactionId: 3458156
          vatAmount: 5400
          deleted: true
          paymentDate: 2018-04-03
          paymentAccount: 1920:10001
          saleAttachments:
          - identifier: "24760"
            downloadUrl: downloadUrl
            comment: comment
            downloadUrlWithFikenNormalUserCredentials: downloadUrlWithFikenNormalUserCredentials
            type: invoice
          - identifier: "24760"
            downloadUrl: downloadUrl
            comment: comment
            downloadUrlWithFikenNormalUserCredentials: downloadUrlWithFikenNormalUserCredentials
            type: invoice
          customer:
            notes:
            - note: Garage 45
              author: Betty Boop
            - note: Garage 45
              author: Betty Boop
            documents:
            - identifier: "24760"
              downloadUrl: downloadUrl
              comment: comment
              downloadUrlWithFikenNormalUserCredentials: downloadUrlWithFikenNormalUserCredentials
              type: invoice
            - identifier: "24760"
              downloadUrl: downloadUrl
              comment: comment
              downloadUrlWithFikenNormalUserCredentials: downloadUrlWithFikenNormalUserCredentials
              type: invoice
            supplierNumber: 0
            daysUntilInvoicingDueDate: 15
            contactPerson:
            - phoneNumber: "98573564"
              address:
                country: Norway
                streetAddress: Karl Johan 34
                city: Oslo
                postCode: "0550"
                streetAddressLine2: H0405
              contactPersonId: 2747365
              name: Betty Boop
              email: bb@gmail.com
            - phoneNumber: "98573564"
              address:
                country: Norway
                streetAddress: Karl Johan 34
                city: Oslo
                postCode: "0550"
                streetAddressLine2: H0405
              contactPersonId: 2747365
              name: Betty Boop
              email: bb@gmail.com
            language: Norwegian
            inactive: true
            supplier: false
            bankAccountNumber: "11112233334"
            currency: NOK
            email: kontakt@fiken.gmail
            address:
              country: Norway
              streetAddress: Karl Johan 34
              city: Oslo
              postCode: "0550"
              streetAddressLine2: H0405
            customerAccountCode: 1500:20001
            contactId: 2747365
            lastModifiedDate: 2018-04-03
            organizationNumber: "913312465"
            groups:
            - groups
            - groups
            customerNumber: 51248
            createdDate: 2018-04-03
            phoneNumber: "62158537"
            memberNumber: 5464
            name: Fiken AS
            memberNumberString: "5464"
            supplierAccountCode: 2400:20001
            customer: false
        orderReference: orderReference
        customer:
          notes:
          - note: Garage 45
            author: Betty Boop
          - note: Garage 45
            author: Betty Boop
          documents:
          - identifier: "24760"
            downloadUrl: downloadUrl
            comment: comment
            downloadUrlWithFikenNormalUserCredentials: downloadUrlWithFikenNormalUserCredentials
            type: invoice
          - identifier: "24760"
            downloadUrl: downloadUrl
            comment: comment
            downloadUrlWithFikenNormalUserCredentials: downloadUrlWithFikenNormalUserCredentials
            type: invoice
          supplierNumber: 0
          daysUntilInvoicingDueDate: 15
          contactPerson:
          - phoneNumber: "98573564"
            address:
              country: Norway
              streetAddress: Karl Johan 34
              city: Oslo
              postCode: "0550"
              streetAddressLine2: H0405
            contactPersonId: 2747365
            name: Betty Boop
            email: bb@gmail.com
          - phoneNumber: "98573564"
            address:
              country: Norway
              streetAddress: Karl Johan 34
              city: Oslo
              postCode: "0550"
              streetAddressLine2: H0405
            contactPersonId: 2747365
            name: Betty Boop
            email: bb@gmail.com
          language: Norwegian
          inactive: true
          supplier: false
          bankAccountNumber: "11112233334"
          currency: NOK
          email: kontakt@fiken.gmail
          address:
            country: Norway
            streetAddress: Karl Johan 34
            city: Oslo
            postCode: "0550"
            streetAddressLine2: H0405
          customerAccountCode: 1500:20001
          contactId: 2747365
          lastModifiedDate: 2018-04-03
          organizationNumber: "913312465"
          groups:
          - groups
          - groups
          customerNumber: 51248
          createdDate: 2018-04-03
          phoneNumber: "62158537"
          memberNumber: 5464
          name: Fiken AS
          memberNumberString: "5464"
          supplierAccountCode: 2400:20001
          customer: false
      properties:
        creditNoteId:
          description: Id of credit note
          example: 2888156
          format: int64
          readOnly: true
          type: integer
        creditNoteNumber:
          description: Unique credit note number generated by us.
          example: 10001
          format: int64
          readOnly: true
          type: integer
        kid:
          description: Norwegian KID number. Number from 2 to 25 digits long.
          example: "5855454756"
          type: string
        customer:
          $ref: '#/components/schemas/contact'
        net:
          description: Net amount (in creditNote currency) in cents.
          example: 25000
          format: int64
          type: integer
        vat:
          description: VAT amount (in creditNote currency) in cents.
          example: 5000
          format: int64
          type: integer
        gross:
          description: Gross amount (= net+VAT) (in creditNote currency) in cents.
          example: 30000
          format: int64
          type: integer
        netInNok:
          description: Net amount in NOK (in cents)
          example: 25000
          format: int64
          type: integer
        vatInNok:
          description: VAT amount in NOK (in cents)
          example: 5000
          format: int64
          type: integer
        grossInNok:
          description: Gross amount in NOK (in cents)
          example: 30000
          format: int64
          type: integer
        creditNoteText:
          description: Comment/description printed above the credit note lines.
          type: string
        yourReference:
          type: string
        ourReference:
          readOnly: true
          type: string
        orderReference:
          description: Reference if sending via EHF.
          type: string
        address:
          $ref: '#/components/schemas/address'
        lines:
          items:
            $ref: '#/components/schemas/invoiceLineResult'
          type: array
        currency:
          description: ISO 4217 currency code
          example: NOK
          pattern: "^[A-Z]{3}$"
          type: string
        issueDate:
          description: "Issue date of the credit note, format yyyy-mm-dd"
          example: 2018-04-03
          format: date
          type: string
        lastModifiedDate:
          description: "Date that the credit note was last modified in Fiken, format\
            \ yyyy-mm-dd."
          example: 2024-04-03
          format: date
          readOnly: true
          type: string
        settled:
          description: If the credit note as been marked as settled (True) or not
            (False).
          example: true
          type: boolean
        associatedInvoiceId:
          description: Id of associated invoice
          example: 2888156
          format: int64
          type: integer
        creditNoteDraftUuid:
          description: "The UUID of the credit note draft used to create the credit\
            \ note. \nCredit notes created directly from invoices (POST / creditNotes/full\
            \ and POST /creditNotes/partial) \nwill not have a draft uuid as no draft\
            \ is created in this case.\n"
          example: 123e4567-e89b-12d3-a456-426655440000
          type: string
        creditNotePdf:
          $ref: '#/components/schemas/attachment'
        project:
          $ref: '#/components/schemas/projectResult'
        sale:
          $ref: '#/components/schemas/saleResult'
      required:
      - address
      - creditNoteId
      - creditNoteNumber
      - customer
      - gross
      - grossInNok
      - net
      - netInNok
      - vat
      - vatInNok
      type: object
    draftLineRequest:
      properties:
        text:
          description: Description of the sale/purchase line.
          maxLength: 200
          type: string
        vatType:
          description: |
            Vat Types for SALES: [NONE, HIGH, MEDIUM, RAW_FISH, LOW, EXEMPT_IMPORT_EXPORT, EXEMPT, OUTSIDE, EXEMPT_REVERSE]
            Vat Types for PURCHASES: [NONE, HIGH, MEDIUM, RAW_FISH, LOW, HIGH_DIRECT, HIGH_BASIS, MEDIUM_DIRECT, MEDIUM_BASIS, NONE_IMPORT_BASIS,
            HIGH_FOREIGN_SERVICE_DEDUCTIBLE, HIGH_FOREIGN_SERVICE_NONDEDUCTIBLE, LOW_FOREIGN_SERVICE_DEDUCTIBLE,
            LOW_FOREIGN_SERVICE_NONDEDUCTIBLE, HIGH_PURCHASE_OF_EMISSIONSTRADING_OR_GOLD_DEDUCTIBLE, HIGH_PURCHASE_OF_EMISSIONSTRADING_OR_GOLD_NONDEDUCTIBLE]
          type: string
        incomeAccount:
          description: "Field is similar to vatType, it defaults to the product's\
            \ income account. Either the line or the product needs to have an income\
            \ account set."
          example: "3000"
          type: string
        net:
          description: Net amount (in creditNote currency) in cents.
          example: 25000
          format: int64
          type: integer
        gross:
          description: Gross amount (= net+VAT) (in creditNote currency) in cents.
          example: 30000
          format: int64
          type: integer
        projectId:
          example: 2888156
          format: int64
          type: integer
      required:
      - gross
      - incomeAccount
      - net
      - text
      - vatType
      type: object
    draftLineResult:
      example:
        vatType: vatType
        gross: 30000
        incomeAccount: "3000"
        project:
          number: number
          endDate: 2018-04-03
          contact:
            notes:
            - note: Garage 45
              author: Betty Boop
            - note: Garage 45
              author: Betty Boop
            documents:
            - identifier: "24760"
              downloadUrl: downloadUrl
              comment: comment
              downloadUrlWithFikenNormalUserCredentials: downloadUrlWithFikenNormalUserCredentials
              type: invoice
            - identifier: "24760"
              downloadUrl: downloadUrl
              comment: comment
              downloadUrlWithFikenNormalUserCredentials: downloadUrlWithFikenNormalUserCredentials
              type: invoice
            supplierNumber: 0
            daysUntilInvoicingDueDate: 15
            contactPerson:
            - phoneNumber: "98573564"
              address:
                country: Norway
                streetAddress: Karl Johan 34
                city: Oslo
                postCode: "0550"
                streetAddressLine2: H0405
              contactPersonId: 2747365
              name: Betty Boop
              email: bb@gmail.com
            - phoneNumber: "98573564"
              address:
                country: Norway
                streetAddress: Karl Johan 34
                city: Oslo
                postCode: "0550"
                streetAddressLine2: H0405
              contactPersonId: 2747365
              name: Betty Boop
              email: bb@gmail.com
            language: Norwegian
            inactive: true
            supplier: false
            bankAccountNumber: "11112233334"
            currency: NOK
            email: kontakt@fiken.gmail
            address:
              country: Norway
              streetAddress: Karl Johan 34
              city: Oslo
              postCode: "0550"
              streetAddressLine2: H0405
            customerAccountCode: 1500:20001
            contactId: 2747365
            lastModifiedDate: 2018-04-03
            organizationNumber: "913312465"
            groups:
            - groups
            - groups
            customerNumber: 51248
            createdDate: 2018-04-03
            phoneNumber: "62158537"
            memberNumber: 5464
            name: Fiken AS
            memberNumberString: "5464"
            supplierAccountCode: 2400:20001
            customer: false
          name: name
          description: description
          completed: true
          projectId: 73408306
          startDate: 2018-04-03
        text: text
        net: 25000
      properties:
        text:
          description: Description of the sale/purchase line.
          maxLength: 200
          type: string
        vatType:
          description: |
            Vat Types for SALES: [NONE, HIGH, MEDIUM, RAW_FISH, LOW, EXEMPT_IMPORT_EXPORT, EXEMPT, OUTSIDE, EXEMPT_REVERSE]
            Vat Types for PURCHASES: [NONE, HIGH, MEDIUM, RAW_FISH, LOW, HIGH_DIRECT, HIGH_BASIS, MEDIUM_DIRECT, MEDIUM_BASIS, NONE_IMPORT_BASIS,
            HIGH_FOREIGN_SERVICE_DEDUCTIBLE, HIGH_FOREIGN_SERVICE_NONDEDUCTIBLE, LOW_FOREIGN_SERVICE_DEDUCTIBLE,
            LOW_FOREIGN_SERVICE_NONDEDUCTIBLE, HIGH_PURCHASE_OF_EMISSIONSTRADING_OR_GOLD_DEDUCTIBLE, HIGH_PURCHASE_OF_EMISSIONSTRADING_OR_GOLD_NONDEDUCTIBLE]
          type: string
        incomeAccount:
          description: "Field is similar to vatType, it defaults to the product's\
            \ income account. Either the line or the product needs to have an income\
            \ account set."
          example: "3000"
          type: string
        net:
          description: Net amount (in creditNote currency) in cents.
          example: 25000
          format: int64
          type: integer
        gross:
          description: Gross amount (= net+VAT) (in creditNote currency) in cents.
          example: 30000
          format: int64
          type: integer
        project:
          $ref: '#/components/schemas/projectResult'
      type: object
    draftRequest:
      properties:
        invoiceIssueDate:
          description: "Issue date of the draft, format yyyy-mm-dd"
          example: 2018-04-03
          format: date
          type: string
        dueDate:
          description: "Due date of draft, format yyyy-mm-dd"
          example: 2018-04-03
          format: date
          type: string
        invoiceNumber:
          description: "If invoice associated with draft, this is the invoice number\
            \ (not to be confused with the invoiceId of an invoice issued from Fiken)"
          example: NOEE2888156
          type: string
        contactId:
          description: Contact Id
          example: 2888156
          format: int64
          type: integer
        projectId:
          description: Project ID if only 1 project associated with entire draft.
            It is also possible to specify the project on individual draft lines
          example: 2888156
          format: int64
          type: integer
        cash:
          description: If a cash sale/purchase (true) or otherwise (false)
          type: boolean
        currency:
          description: ISO 4217 currency code
          example: NOK
          pattern: "^[A-Z]{3}$"
          type: string
        kid:
          description: Norwegian KID number. Number from 2 to 25 digits long.
          example: "5855454756"
          type: string
        paid:
          description: Whether the sale/purchase has been paid (true) or not (false)
          type: boolean
        payments:
          items:
            $ref: '#/components/schemas/payment'
          type: array
        lines:
          items:
            $ref: '#/components/schemas/draftLineRequest'
          type: array
      required:
      - cash
      - lines
      type: object
    draftResult:
      example:
        draftId: 2888156
        attachments:
        - identifier: "24760"
          downloadUrl: downloadUrl
          comment: comment
          downloadUrlWithFikenNormalUserCredentials: downloadUrlWithFikenNormalUserCredentials
          type: invoice
        - identifier: "24760"
          downloadUrl: downloadUrl
          comment: comment
          downloadUrlWithFikenNormalUserCredentials: downloadUrlWithFikenNormalUserCredentials
          type: invoice
        invoiceIssueDate: 2018-04-03
        dueDate: 2018-04-03
        kid: "5855454756"
        payments:
        - date: 2018-04-03
          amount: 34000
          paymentId: 2888156
          amountInNok: 500000
          fee: 6
          currency: NOK
          account: 1920:10001
        - date: 2018-04-03
          amount: 34000
          paymentId: 2888156
          amountInNok: 500000
          fee: 6
          currency: NOK
          account: 1920:10001
        project:
          number: number
          endDate: 2018-04-03
          contact:
            notes:
            - note: Garage 45
              author: Betty Boop
            - note: Garage 45
              author: Betty Boop
            documents:
            - identifier: "24760"
              downloadUrl: downloadUrl
              comment: comment
              downloadUrlWithFikenNormalUserCredentials: downloadUrlWithFikenNormalUserCredentials
              type: invoice
            - identifier: "24760"
              downloadUrl: downloadUrl
              comment: comment
              downloadUrlWithFikenNormalUserCredentials: downloadUrlWithFikenNormalUserCredentials
              type: invoice
            supplierNumber: 0
            daysUntilInvoicingDueDate: 15
            contactPerson:
            - phoneNumber: "98573564"
              address:
                country: Norway
                streetAddress: Karl Johan 34
                city: Oslo
                postCode: "0550"
                streetAddressLine2: H0405
              contactPersonId: 2747365
              name: Betty Boop
              email: bb@gmail.com
            - phoneNumber: "98573564"
              address:
                country: Norway
                streetAddress: Karl Johan 34
                city: Oslo
                postCode: "0550"
                streetAddressLine2: H0405
              contactPersonId: 2747365
              name: Betty Boop
              email: bb@gmail.com
            language: Norwegian
            inactive: true
            supplier: false
            bankAccountNumber: "11112233334"
            currency: NOK
            email: kontakt@fiken.gmail
            address:
              country: Norway
              streetAddress: Karl Johan 34
              city: Oslo
              postCode: "0550"
              streetAddressLine2: H0405
            customerAccountCode: 1500:20001
            contactId: 2747365
            lastModifiedDate: 2018-04-03
            organizationNumber: "913312465"
            groups:
            - groups
            - groups
            customerNumber: 51248
            createdDate: 2018-04-03
            phoneNumber: "62158537"
            memberNumber: 5464
            name: Fiken AS
            memberNumberString: "5464"
            supplierAccountCode: 2400:20001
            customer: false
          name: name
          description: description
          completed: true
          projectId: 73408306
          startDate: 2018-04-03
        uuid: 123e4567-e89b-12d3-a456-426655440000
        contact:
          notes:
          - note: Garage 45
            author: Betty Boop
          - note: Garage 45
            author: Betty Boop
          documents:
          - identifier: "24760"
            downloadUrl: downloadUrl
            comment: comment
            downloadUrlWithFikenNormalUserCredentials: downloadUrlWithFikenNormalUserCredentials
            type: invoice
          - identifier: "24760"
            downloadUrl: downloadUrl
            comment: comment
            downloadUrlWithFikenNormalUserCredentials: downloadUrlWithFikenNormalUserCredentials
            type: invoice
          supplierNumber: 0
          daysUntilInvoicingDueDate: 15
          contactPerson:
          - phoneNumber: "98573564"
            address:
              country: Norway
              streetAddress: Karl Johan 34
              city: Oslo
              postCode: "0550"
              streetAddressLine2: H0405
            contactPersonId: 2747365
            name: Betty Boop
            email: bb@gmail.com
          - phoneNumber: "98573564"
            address:
              country: Norway
              streetAddress: Karl Johan 34
              city: Oslo
              postCode: "0550"
              streetAddressLine2: H0405
            contactPersonId: 2747365
            name: Betty Boop
            email: bb@gmail.com
          language: Norwegian
          inactive: true
          supplier: false
          bankAccountNumber: "11112233334"
          currency: NOK
          email: kontakt@fiken.gmail
          address:
            country: Norway
            streetAddress: Karl Johan 34
            city: Oslo
            postCode: "0550"
            streetAddressLine2: H0405
          customerAccountCode: 1500:20001
          contactId: 2747365
          lastModifiedDate: 2018-04-03
          organizationNumber: "913312465"
          groups:
          - groups
          - groups
          customerNumber: 51248
          createdDate: 2018-04-03
          phoneNumber: "62158537"
          memberNumber: 5464
          name: Fiken AS
          memberNumberString: "5464"
          supplierAccountCode: 2400:20001
          customer: false
        invoiceNumber: NOEE2888156
        paid: true
        currency: NOK
        lines:
        - vatType: vatType
          gross: 30000
          incomeAccount: "3000"
          project:
            number: number
            endDate: 2018-04-03
            contact:
              notes:
              - note: Garage 45
                author: Betty Boop
              - note: Garage 45
                author: Betty Boop
              documents:
              - identifier: "24760"
                downloadUrl: downloadUrl
                comment: comment
                downloadUrlWithFikenNormalUserCredentials: downloadUrlWithFikenNormalUserCredentials
                type: invoice
              - identifier: "24760"
                downloadUrl: downloadUrl
                comment: comment
                downloadUrlWithFikenNormalUserCredentials: downloadUrlWithFikenNormalUserCredentials
                type: invoice
              supplierNumber: 0
              daysUntilInvoicingDueDate: 15
              contactPerson:
              - phoneNumber: "98573564"
                address:
                  country: Norway
                  streetAddress: Karl Johan 34
                  city: Oslo
                  postCode: "0550"
                  streetAddressLine2: H0405
                contactPersonId: 2747365
                name: Betty Boop
                email: bb@gmail.com
              - phoneNumber: "98573564"
                address:
                  country: Norway
                  streetAddress: Karl Johan 34
                  city: Oslo
                  postCode: "0550"
                  streetAddressLine2: H0405
                contactPersonId: 2747365
                name: Betty Boop
                email: bb@gmail.com
              language: Norwegian
              inactive: true
              supplier: false
              bankAccountNumber: "11112233334"
              currency: NOK
              email: kontakt@fiken.gmail
              address:
                country: Norway
                streetAddress: Karl Johan 34
                city: Oslo
                postCode: "0550"
                streetAddressLine2: H0405
              customerAccountCode: 1500:20001
              contactId: 2747365
              lastModifiedDate: 2018-04-03
              organizationNumber: "913312465"
              groups:
              - groups
              - groups
              customerNumber: 51248
              createdDate: 2018-04-03
              phoneNumber: "62158537"
              memberNumber: 5464
              name: Fiken AS
              memberNumberString: "5464"
              supplierAccountCode: 2400:20001
              customer: false
            name: name
            description: description
            completed: true
            projectId: 73408306
            startDate: 2018-04-03
          text: text
          net: 25000
        - vatType: vatType
          gross: 30000
          incomeAccount: "3000"
          project:
            number: number
            endDate: 2018-04-03
            contact:
              notes:
              - note: Garage 45
                author: Betty Boop
              - note: Garage 45
                author: Betty Boop
              documents:
              - identifier: "24760"
                downloadUrl: downloadUrl
                comment: comment
                downloadUrlWithFikenNormalUserCredentials: downloadUrlWithFikenNormalUserCredentials
                type: invoice
              - identifier: "24760"
                downloadUrl: downloadUrl
                comment: comment
                downloadUrlWithFikenNormalUserCredentials: downloadUrlWithFikenNormalUserCredentials
                type: invoice
              supplierNumber: 0
              daysUntilInvoicingDueDate: 15
              contactPerson:
              - phoneNumber: "98573564"
                address:
                  country: Norway
                  streetAddress: Karl Johan 34
                  city: Oslo
                  postCode: "0550"
                  streetAddressLine2: H0405
                contactPersonId: 2747365
                name: Betty Boop
                email: bb@gmail.com
              - phoneNumber: "98573564"
                address:
                  country: Norway
                  streetAddress: Karl Johan 34
                  city: Oslo
                  postCode: "0550"
                  streetAddressLine2: H0405
                contactPersonId: 2747365
                name: Betty Boop
                email: bb@gmail.com
              language: Norwegian
              inactive: true
              supplier: false
              bankAccountNumber: "11112233334"
              currency: NOK
              email: kontakt@fiken.gmail
              address:
                country: Norway
                streetAddress: Karl Johan 34
                city: Oslo
                postCode: "0550"
                streetAddressLine2: H0405
              customerAccountCode: 1500:20001
              contactId: 2747365
              lastModifiedDate: 2018-04-03
              organizationNumber: "913312465"
              groups:
              - groups
              - groups
              customerNumber: 51248
              createdDate: 2018-04-03
              phoneNumber: "62158537"
              memberNumber: 5464
              name: Fiken AS
              memberNumberString: "5464"
              supplierAccountCode: 2400:20001
              customer: false
            name: name
            description: description
            completed: true
            projectId: 73408306
            startDate: 2018-04-03
          text: text
          net: 25000
        cash: true
      properties:
        draftId:
          description: Draft ID
          example: 2888156
          format: int64
          type: integer
        uuid:
          description: "UUID are represented as 32 hexadecimal (base-16) digits, displayed\
            \ in 5 groups separated by hyphens, in the form 8-4-4-4-12 for a total\
            \ of 36 characters."
          example: 123e4567-e89b-12d3-a456-426655440000
          type: string
        invoiceIssueDate:
          description: "Issue date of the draft, format yyyy-mm-dd"
          example: 2018-04-03
          format: date
          type: string
        dueDate:
          description: "Due date of draft, format yyyy-mm-dd"
          example: 2018-04-03
          format: date
          type: string
        invoiceNumber:
          description: "If invoice associated with draft, this is the invoice number\
            \ (not to be confused with the invoiceId of an invoice issued from Fiken)"
          example: NOEE2888156
          type: string
        contact:
          $ref: '#/components/schemas/contact'
        project:
          $ref: '#/components/schemas/projectResult'
        cash:
          description: If a cash sale/purchase (true) or otherwise (false)
          type: boolean
        currency:
          description: ISO 4217 currency code
          example: NOK
          pattern: "^[A-Z]{3}$"
          type: string
        kid:
          description: Norwegian KID number. Number from 2 to 25 digits long.
          example: "5855454756"
          type: string
        paid:
          description: Whether the sale/purchase has been paid (true) or not (false)
          type: boolean
        attachments:
          items:
            $ref: '#/components/schemas/attachment'
          type: array
        payments:
          items:
            $ref: '#/components/schemas/payment'
          type: array
        lines:
          items:
            $ref: '#/components/schemas/draftLineResult'
          type: array
      type: object
    fullCreditNoteRequest:
      properties:
        issueDate:
          description: "Date that the credit note is issued, format yyyy-mm-dd"
          example: 2018-04-03
          format: date
          type: string
        invoiceId:
          description: Id of invoice that the credit note is associated with.
          example: 2888156
          format: int64
          type: integer
        creditNoteText:
          example: Invoice for services rendered during the Oslo Knitting Festival.
          maxLength: 500
          type: string
      required:
      - invoiceId
      - issueDate
      type: object
    generalJournalEntryRequest:
      properties:
        description:
          description: "We add the flag 'Fri postering registrert via API: '. This\
            \ must be taken into account in the max length of the description"
          maxLength: 200
          type: string
        open:
          default: false
          description: The journal entry can be set to either open or closed (closed
            is the default). In the case of an open journal entry these can be deleted
            without creating a counter transaction.
          example: false
          type: boolean
        journalEntries:
          items:
            $ref: '#/components/schemas/journalEntry'
          type: array
      required:
      - journalEntries
      type: object
    inboxResult:
      example:
        createdAt: 2000-01-23T04:56:07.000+00:00
        filename: filename
        name: name
        description: description
        documentId: 1234134
        status: true
      properties:
        documentId:
          example: 1234134
          format: int64
          readOnly: true
          type: integer
        name:
          description: Name of the document as it appears in the inbox
          type: string
        description:
          description: Additional description of document
          type: string
        filename:
          description: Name of the underlying file for the inbox document
          type: string
        status:
          description: Whether the document has been used as documentation or not
          type: boolean
        createdAt:
          description: When the document was created
          format: date-time
          type: string
      type: object
    invoiceishDraftLine:
      example:
        unitPrice: 4550
        invoiceishDraftLineId: 2888156
        vatType: vatType
        quantity: 5
        productId: 0
        lastModifiedDate: 2018-04-03
        incomeAccount: "3000"
        description: "Goatskin, with extra-long suede cuffs"
        discount: 25
        comment: One size fits all
      properties:
        invoiceishDraftLineId:
          description: Unique draft line ID
          example: 2888156
          format: int64
          type: integer
        lastModifiedDate:
          description: "Date that the draft line was last modified in Fiken, format\
            \ yyyy-mm-dd."
          example: 2018-04-03
          format: date
          readOnly: true
          type: string
        productId:
          description: Product to be credited/debited on invoice draft line.
          format: int64
          type: integer
        description:
          description: Description of the invoiced product or service.
          example: "Goatskin, with extra-long suede cuffs"
          maxLength: 200
          type: string
        unitPrice:
          description: Net price per unit in invoice currency (in cents).
          example: 4550
          format: int64
          type: integer
        vatType:
          description: |
            Vat Types for SALES: [NONE, HIGH, MEDIUM, RAW_FISH, LOW, EXEMPT_IMPORT_EXPORT, EXEMPT, OUTSIDE, EXEMPT_REVERSE]
            Vat Types for PURCHASES: [NONE, HIGH, MEDIUM, RAW_FISH, LOW, HIGH_DIRECT, HIGH_BASIS, MEDIUM_DIRECT, MEDIUM_BASIS, NONE_IMPORT_BASIS,
            HIGH_FOREIGN_SERVICE_DEDUCTIBLE, HIGH_FOREIGN_SERVICE_NONDEDUCTIBLE, LOW_FOREIGN_SERVICE_DEDUCTIBLE,
            LOW_FOREIGN_SERVICE_NONDEDUCTIBLE, HIGH_PURCHASE_OF_EMISSIONSTRADING_OR_GOLD_DEDUCTIBLE, HIGH_PURCHASE_OF_EMISSIONSTRADING_OR_GOLD_NONDEDUCTIBLE]
          type: string
        quantity:
          description: Number of units to be invoiced.
          example: 5
          type: number
        discount:
          description: Percentage discount charged on invoice draft line. Should be
            a value between 0 and 100. Can be decimal values such as 25.5
          example: 25
          type: number
        comment:
          description: Additional information to be printed on invoice.
          example: One size fits all
          maxLength: 200
          type: string
        incomeAccount:
          description: "Field is similar to vatType, it defaults to the product's\
            \ income account. Either the line or the product needs to have an income\
            \ account set."
          example: "3000"
          type: string
      required:
      - quantity
      type: object
    invoiceishDraftRequest:
      properties:
        type:
          description: Type of draft.
          enum:
          - invoice
          - cash_invoice
          - offer
          - order_confirmation
          - credit_note
          example: invoice
          type: string
        uuid:
          description: "UUID are represented as 32 hexadecimal (base-16) digits, displayed\
            \ in 5 groups separated by hyphens, in the form 8-4-4-4-12 for a total\
            \ of 36 characters."
          example: 123e4567-e89b-12d3-a456-426655440000
          type: string
        issueDate:
          description: "Issue date of the invoice draft, format yyyy-mm-dd"
          example: 2018-04-03
          format: date
          type: string
        daysUntilDueDate:
          description: Days until due date of the invoice draft.
          example: 15
          format: int32
          type: integer
        invoiceText:
          description: "Comment/description printed above the invoice lines. If not\
            \ present, and standard text is registered, standard text is printed."
          type: string
        yourReference:
          type: string
        ourReference:
          type: string
        orderReference:
          description: Reference if sending invoice via EHF.
          type: string
        lines:
          items:
            $ref: '#/components/schemas/invoiceishDraftLine'
          type: array
        currency:
          description: ISO 4217 currency code
          example: NOK
          pattern: "^[A-Z]{3}$"
          type: string
        bankAccountNumber:
          example: "11112233334"
          type: string
        iban:
          type: string
        bic:
          type: string
        paymentAccount:
          example: 1920:10001
          type: string
        customerId:
          description: customerId = contactId where customer = true
          example: 7340852
          format: int64
          type: integer
        contactPersonId:
          description: Id of the contact person. Must be associated with the provided
            customer.
          example: 8588156
          format: int64
          type: integer
        projectId:
          example: 75408386
          format: int64
          type: integer
      required:
      - customerId
      - daysUntilDueDate
      - type
      type: object
    invoiceishDraftResult:
      example:
        draftId: 2888156
        attachments:
        - identifier: "24760"
          downloadUrl: downloadUrl
          comment: comment
          downloadUrlWithFikenNormalUserCredentials: downloadUrlWithFikenNormalUserCredentials
          type: invoice
        - identifier: "24760"
          downloadUrl: downloadUrl
          comment: comment
          downloadUrlWithFikenNormalUserCredentials: downloadUrlWithFikenNormalUserCredentials
          type: invoice
        invoiceText: invoiceText
        yourReference: yourReference
        gross: 5000
        lastModifiedDate: 2023-04-03
        type: invoice
        uuid: 123e4567-e89b-12d3-a456-426655440000
        ourReference: ourReference
        iban: iban
        orderReference: orderReference
        createdFromInvoiceId: 73408306
        currency: NOK
        bankAccountNumber: "11112233334"
        customers:
        - notes:
          - note: Garage 45
            author: Betty Boop
          - note: Garage 45
            author: Betty Boop
          documents:
          - identifier: "24760"
            downloadUrl: downloadUrl
            comment: comment
            downloadUrlWithFikenNormalUserCredentials: downloadUrlWithFikenNormalUserCredentials
            type: invoice
          - identifier: "24760"
            downloadUrl: downloadUrl
            comment: comment
            downloadUrlWithFikenNormalUserCredentials: downloadUrlWithFikenNormalUserCredentials
            type: invoice
          supplierNumber: 0
          daysUntilInvoicingDueDate: 15
          contactPerson:
          - phoneNumber: "98573564"
            address:
              country: Norway
              streetAddress: Karl Johan 34
              city: Oslo
              postCode: "0550"
              streetAddressLine2: H0405
            contactPersonId: 2747365
            name: Betty Boop
            email: bb@gmail.com
          - phoneNumber: "98573564"
            address:
              country: Norway
              streetAddress: Karl Johan 34
              city: Oslo
              postCode: "0550"
              streetAddressLine2: H0405
            contactPersonId: 2747365
            name: Betty Boop
            email: bb@gmail.com
          language: Norwegian
          inactive: true
          supplier: false
          bankAccountNumber: "11112233334"
          currency: NOK
          email: kontakt@fiken.gmail
          address:
            country: Norway
            streetAddress: Karl Johan 34
            city: Oslo
            postCode: "0550"
            streetAddressLine2: H0405
          customerAccountCode: 1500:20001
          contactId: 2747365
          lastModifiedDate: 2018-04-03
          organizationNumber: "913312465"
          groups:
          - groups
          - groups
          customerNumber: 51248
          createdDate: 2018-04-03
          phoneNumber: "62158537"
          memberNumber: 5464
          name: Fiken AS
          memberNumberString: "5464"
          supplierAccountCode: 2400:20001
          customer: false
        - notes:
          - note: Garage 45
            author: Betty Boop
          - note: Garage 45
            author: Betty Boop
          documents:
          - identifier: "24760"
            downloadUrl: downloadUrl
            comment: comment
            downloadUrlWithFikenNormalUserCredentials: downloadUrlWithFikenNormalUserCredentials
            type: invoice
          - identifier: "24760"
            downloadUrl: downloadUrl
            comment: comment
            downloadUrlWithFikenNormalUserCredentials: downloadUrlWithFikenNormalUserCredentials
            type: invoice
          supplierNumber: 0
          daysUntilInvoicingDueDate: 15
          contactPerson:
          - phoneNumber: "98573564"
            address:
              country: Norway
              streetAddress: Karl Johan 34
              city: Oslo
              postCode: "0550"
              streetAddressLine2: H0405
            contactPersonId: 2747365
            name: Betty Boop
            email: bb@gmail.com
          - phoneNumber: "98573564"
            address:
              country: Norway
              streetAddress: Karl Johan 34
              city: Oslo
              postCode: "0550"
              streetAddressLine2: H0405
            contactPersonId: 2747365
            name: Betty Boop
            email: bb@gmail.com
          language: Norwegian
          inactive: true
          supplier: false
          bankAccountNumber: "11112233334"
          currency: NOK
          email: kontakt@fiken.gmail
          address:
            country: Norway
            streetAddress: Karl Johan 34
            city: Oslo
            postCode: "0550"
            streetAddressLine2: H0405
          customerAccountCode: 1500:20001
          contactId: 2747365
          lastModifiedDate: 2018-04-03
          organizationNumber: "913312465"
          groups:
          - groups
          - groups
          customerNumber: 51248
          createdDate: 2018-04-03
          phoneNumber: "62158537"
          memberNumber: 5464
          name: Fiken AS
          memberNumberString: "5464"
          supplierAccountCode: 2400:20001
          customer: false
        issueDate: 2018-04-03
        lines:
        - unitPrice: 4550
          invoiceishDraftLineId: 2888156
          vatType: vatType
          quantity: 5
          productId: 0
          lastModifiedDate: 2018-04-03
          incomeAccount: "3000"
          description: "Goatskin, with extra-long suede cuffs"
          discount: 25
          comment: One size fits all
        - unitPrice: 4550
          invoiceishDraftLineId: 2888156
          vatType: vatType
          quantity: 5
          productId: 0
          lastModifiedDate: 2018-04-03
          incomeAccount: "3000"
          description: "Goatskin, with extra-long suede cuffs"
          discount: 25
          comment: One size fits all
        net: 4500
        bic: bic
        paymentAccount: 1920:10001
        projectId: 73408306
        daysUntilDueDate: 15
      properties:
        draftId:
          description: Invoice draft ID
          example: 2888156
          format: int64
          readOnly: true
          type: integer
        uuid:
          description: "UUID are represented as 32 hexadecimal (base-16) digits, displayed\
            \ in 5 groups separated by hyphens, in the form 8-4-4-4-12 for a total\
            \ of 36 characters."
          example: 123e4567-e89b-12d3-a456-426655440000
          type: string
        type:
          default: invoice
          description: Type of invoice draft.
          enum:
          - invoice
          - cash_invoice
          - offer
          - order_confirmation
          - credit_note
          - repeating_invoice
          example: invoice
          type: string
        lastModifiedDate:
          description: "Date that the draft was last modified in Fiken, format yyyy-mm-dd."
          example: 2023-04-03
          format: date
          readOnly: true
          type: string
        issueDate:
          description: "Issue date of the invoice draft, format yyyy-mm-dd"
          example: 2018-04-03
          format: date
          type: string
        daysUntilDueDate:
          description: Days until due date of the invoice draft.
          example: 15
          format: int32
          type: integer
        invoiceText:
          description: Comment/description printed above the invoice lines
          type: string
        currency:
          description: ISO 4217 currency code
          example: NOK
          pattern: "^[A-Z]{3}$"
          type: string
        yourReference:
          type: string
        ourReference:
          type: string
        orderReference:
          description: Reference if sending invoice via EHF.
          type: string
        lines:
          items:
            $ref: '#/components/schemas/invoiceishDraftLine'
          type: array
        net:
          description: The net amount to be invoiced in the specified currency.
          example: 4500
          format: int64
          type: integer
        gross:
          description: The gross amount to be invoiced in the specified currency.
          example: 5000
          format: int64
          type: integer
        bankAccountNumber:
          example: "11112233334"
          type: string
        iban:
          type: string
        bic:
          type: string
        paymentAccount:
          example: 1920:10001
          type: string
        customers:
          description: Customer(s) to be invoiced.
          items:
            $ref: '#/components/schemas/contact'
          minItems: 1
          type: array
        attachments:
          items:
            $ref: '#/components/schemas/attachment'
          type: array
        createdFromInvoiceId:
          example: 73408306
          format: int64
          type: integer
        projectId:
          example: 73408306
          format: int64
          type: integer
      type: object
    invoiceLineRequest:
      properties:
        net:
          description: Net amount of invoice line in cents in original currency.
          example: 4500
          format: int64
          type: integer
        vat:
          description: VAT amount of invoice line in cents in original currency.
          example: 500
          format: int64
          type: integer
        vatType:
          description: |
            Taken from either 1) the line or 2) the product. At least vatType or vatPercent has to be specified. If both are specified, Fiken will assert that the given vat type matches the given vat percent for the issue date.
            One of: {"HIGH", "MEDIUM", "LOW", "EXEMPT", "EXEMPT_IMPORT_EXPORT", "EXEMPT_REVERSE", "OUTSIDE", "NONE"}. "HIGH" is the most common.
          example: HIGH
          type: string
        gross:
          description: Gross amount of invoice line in cents.
          example: 5000
          format: int64
          type: integer
        vatInPercent:
          description: Percentage value of VAT charged on invoice line. Should be
            a value between 0 and 100. Can be decimal values such as 25.5
          example: 25
          type: number
        unitPrice:
          description: "Net price per unit in invoice currency (in cents). WARNING\
            \ - if specified here and different from unitPrice of the product, then\
            \ this amount overwrites the product price on the invoice."
          example: 4550
          format: int64
          type: integer
        quantity:
          description: Number of units to be invoiced.
          example: 5
          type: number
        discount:
          description: "If field is set, all amounts must be given before the discount\
            \ is applied. The API will calculate the new totals. Discount value should\
            \ be a value between 0 and 100."
          example: 25
          type: number
        productName:
          description: Name of product to be printed on invoice line. Should only
            be specified when productId is not provided.
          example: Gardening Gloves VI2
          type: string
        productId:
          description: Product Id of product associated with invoice line.
          example: 2888156
          format: int64
          type: integer
        description:
          description: "Description of the invoiced product or service. WARNING -\
            \ if specified here and different from description of the product, then\
            \ thisoverwrites the product description on the invoice."
          example: "Goatskin, with extra-long suede cuffs"
          maxLength: 200
          type: string
        comment:
          description: Additional information to be printed on invoice.
          example: One size fits all
          maxLength: 200
          type: string
        incomeAccount:
          description: |
            Field is similar to vatType, it defaults to the product's income account. Either the line or the product needs to have an income account set.
            WARNING - if specified here and different from income account of the product, then this account overwrites the product account on the invoice.
          example: "3000"
          type: string
      required:
      - quantity
      type: object
    invoiceLineResult:
      example:
        vatInPercent: 25
        unitPrice: 4550
        quantity: 5
        gross: 5000
        productId: 2888156
        incomeAccount: "3000"
        vat: 500
        netInNok: 4500
        discount: 25
        description: "Goatskin, with extra-long suede cuffs"
        grossInNok: 5000
        vatInNok: 500
        productName: Gardening Gloves VI2
        vatType: vatType
        comment: One size fits all
        net: 4500
      properties:
        net:
          description: Net amount of invoice line in cents in original currency.
          example: 4500
          format: int64
          type: integer
        vat:
          description: VAT amount of invoice line in cents in original currency.
          example: 500
          format: int64
          type: integer
        vatType:
          description: |
            Taken from either 1) the line or 2) the product. At least vatType or vatPercent has to be specified. If both are specified, Fiken will assert that the given vat type matches the given vat percent for the issue date.
            One of: {"HIGH", "MEDIUM", "LOW", "EXEMPT", "EXEMPT_IMPORT_EXPORT", "EXEMPT_REVERSE", "OUTSIDE", "NONE"}. "HIGH" is the most common.
          type: string
        gross:
          description: Gross amount of invoice line in cents.
          example: 5000
          format: int64
          type: integer
        netInNok:
          description: Net amount of invoice line in cents in NOK if currency and
            amounts provided are in foreign currency. This is calculated by Fiken.
          example: 4500
          format: int64
          type: integer
        vatInNok:
          description: VAT amount of invoice line in cents in NOK if currency and
            amounts provided are in foreign currency. This is calculated by Fiken.
          example: 500
          format: int64
          type: integer
        grossInNok:
          description: Gross amount of invoice line in cents in NOK if currency and
            amounts provided are in foreign currency. This is calculated by Fiken.
          example: 5000
          format: int64
          type: integer
        vatInPercent:
          description: Percentage value of VAT charged on invoice line. Should be
            a value between 0 and 100. Can be decimal values such as 25.5
          example: 25
          type: number
        unitPrice:
          description: Net price per unit in invoice currency (in cents).
          example: 4550
          format: int64
          type: integer
        quantity:
          description: Number of units to be invoiced.
          example: 5
          type: number
        discount:
          description: "If field is set, all amounts must be given before the discount\
            \ is applied. The API will calculate the new totals. Discount value should\
            \ be a value between 0 and 100."
          example: 25
          type: number
        productId:
          description: Product Id of product associated with invoice line.
          example: 2888156
          format: int64
          type: integer
        productName:
          description: Name of product to be printed on invoice line.
          example: Gardening Gloves VI2
          type: string
        description:
          description: Description of the invoiced product or service.
          example: "Goatskin, with extra-long suede cuffs"
          maxLength: 200
          type: string
        comment:
          description: Additional information to be printed on invoice.
          example: One size fits all
          maxLength: 200
          type: string
        incomeAccount:
          description: "Field is similar to vatType, it defaults to the product's\
            \ income account. Either the line or the product needs to have an income\
            \ account set."
          example: "3000"
          type: string
      type: object
    invoiceRequest:
      properties:
        uuid:
          description: "UUID are represented as 32 hexadecimal (base-16) digits, displayed\
            \ in 5 groups separated by hyphens, in the form 8-4-4-4-12 for a total\
            \ of 36 characters. If not provided, API will generate a UUID."
          example: 123e4567-e89b-12d3-a456-426655440000
          type: string
        issueDate:
          description: "Date that the invoice was issued, format yyyy-mm-dd"
          example: 2018-04-03
          format: date
          type: string
        dueDate:
          description: "Due date of invoice, format yyyy-mm-dd"
          example: 2018-04-03
          format: date
          type: string
        lines:
          items:
            $ref: '#/components/schemas/invoiceLineRequest'
          minItems: 1
          type: array
        ourReference:
          type: string
        yourReference:
          description: "Your reference for invoice, free string format"
          type: string
        orderReference:
          description: Reference if sending via EHF.
          type: string
        customerId:
          description: customerId = contactId where customer = true
          example: 2888156
          format: int64
          type: integer
        contactPersonId:
          description: Id of the contact person. Must be associated with the provided
            customer.
          example: 8588156
          format: int64
          type: integer
        bankAccountCode:
          description: "Bank account code associated with invoice, format 1920:XXXXX"
          example: 1920:10002
          type: string
        currency:
          description: ISO 4217 currency code. Defaults to "NOK" if unspecified.
          example: NOK
          pattern: "^[A-Z]{3}$"
          type: string
        invoiceText:
          description: "If not present, and standard text is registered, standard\
            \ text is printed."
          example: Invoice for services rendered during the Oslo Knitting Festival.
          maxLength: 500
          type: string
        cash:
          description: Payment taken in cash (True) or not (False).
          example: false
          type: boolean
        paymentAccount:
          description: For Cash Invoices only. For instance "1920:10001".
          example: 1920:10001
          type: string
        projectId:
          description: Optional - Associated project for the invoice to be created.
          example: 15124866
          format: int64
          type: integer
      required:
      - bankAccountCode
      - cash
      - customerId
      - dueDate
      - issueDate
      - lines
      type: object
    invoiceResult:
      example:
        attachments:
        - identifier: "24760"
          downloadUrl: downloadUrl
          comment: comment
          downloadUrlWithFikenNormalUserCredentials: downloadUrlWithFikenNormalUserCredentials
          type: invoice
        - identifier: "24760"
          downloadUrl: downloadUrl
          comment: comment
          downloadUrlWithFikenNormalUserCredentials: downloadUrlWithFikenNormalUserCredentials
          type: invoice
        kid: "5855454756"
        dueDate: 2018-04-03
        netInNok: 25000
        project:
          number: number
          endDate: 2018-04-03
          contact:
            notes:
            - note: Garage 45
              author: Betty Boop
            - note: Garage 45
              author: Betty Boop
            documents:
            - identifier: "24760"
              downloadUrl: downloadUrl
              comment: comment
              downloadUrlWithFikenNormalUserCredentials: downloadUrlWithFikenNormalUserCredentials
              type: invoice
            - identifier: "24760"
              downloadUrl: downloadUrl
              comment: comment
              downloadUrlWithFikenNormalUserCredentials: downloadUrlWithFikenNormalUserCredentials
              type: invoice
            supplierNumber: 0
            daysUntilInvoicingDueDate: 15
            contactPerson:
            - phoneNumber: "98573564"
              address:
                country: Norway
                streetAddress: Karl Johan 34
                city: Oslo
                postCode: "0550"
                streetAddressLine2: H0405
              contactPersonId: 2747365
              name: Betty Boop
              email: bb@gmail.com
            - phoneNumber: "98573564"
              address:
                country: Norway
                streetAddress: Karl Johan 34
                city: Oslo
                postCode: "0550"
                streetAddressLine2: H0405
              contactPersonId: 2747365
              name: Betty Boop
              email: bb@gmail.com
            language: Norwegian
            inactive: true
            supplier: false
            bankAccountNumber: "11112233334"
            currency: NOK
            email: kontakt@fiken.gmail
            address:
              country: Norway
              streetAddress: Karl Johan 34
              city: Oslo
              postCode: "0550"
              streetAddressLine2: H0405
            customerAccountCode: 1500:20001
            contactId: 2747365
            lastModifiedDate: 2018-04-03
            organizationNumber: "913312465"
            groups:
            - groups
            - groups
            customerNumber: 51248
            createdDate: 2018-04-03
            phoneNumber: "62158537"
            memberNumber: 5464
            name: Fiken AS
            memberNumberString: "5464"
            supplierAccountCode: 2400:20001
            customer: false
          name: name
          description: description
          completed: true
          projectId: 73408306
          startDate: 2018-04-03
        grossInNok: 30000
        vatInNok: 5000
        ourReference: ourReference
        dispatches:
        - date: 2024-04-03
          dispatchType: email
        - date: 2024-04-03
          dispatchType: email
        originalDueDate: 2018-04-03
        invoiceNumber: 10001
        currency: NOK
        bankAccountNumber: "11112233334"
        issueDate: 2018-04-03
        net: 25000
        lines:
        - vatInPercent: 25
          unitPrice: 4550
          quantity: 5
          gross: 5000
          productId: 2888156
          incomeAccount: "3000"
          vat: 500
          netInNok: 4500
          discount: 25
          description: "Goatskin, with extra-long suede cuffs"
          grossInNok: 5000
          vatInNok: 500
          productName: Gardening Gloves VI2
          vatType: vatType
          comment: One size fits all
          net: 4500
        - vatInPercent: 25
          unitPrice: 4550
          quantity: 5
          gross: 5000
          productId: 2888156
          incomeAccount: "3000"
          vat: 500
          netInNok: 4500
          discount: 25
          description: "Goatskin, with extra-long suede cuffs"
          grossInNok: 5000
          vatInNok: 500
          productName: Gardening Gloves VI2
          vatType: vatType
          comment: One size fits all
          net: 4500
        cash: true
        address:
          country: Norway
          streetAddress: Karl Johan 34
          city: Oslo
          postCode: "0550"
          streetAddressLine2: H0405
        gross: 30000
        invoiceText: invoiceText
        yourReference: yourReference
        lastModifiedDate: 2018-04-03
        vat: 5000
        sentManually: false
        invoicePdf:
          identifier: "24760"
          downloadUrl: downloadUrl
          comment: comment
          downloadUrlWithFikenNormalUserCredentials: downloadUrlWithFikenNormalUserCredentials
          type: invoice
        sale:
          date: 2018-04-03
          notes:
          - note: Invoice sent after telephone conversation with customer
            author: James Jones
          - note: Invoice sent after telephone conversation with customer
            author: James Jones
          saleId: 2888156
          dueDate: 2018-04-03
          kid: "5855454756"
          project:
            number: number
            endDate: 2018-04-03
            contact:
              notes:
              - note: Garage 45
                author: Betty Boop
              - note: Garage 45
                author: Betty Boop
              documents:
              - identifier: "24760"
                downloadUrl: downloadUrl
                comment: comment
                downloadUrlWithFikenNormalUserCredentials: downloadUrlWithFikenNormalUserCredentials
                type: invoice
              - identifier: "24760"
                downloadUrl: downloadUrl
                comment: comment
                downloadUrlWithFikenNormalUserCredentials: downloadUrlWithFikenNormalUserCredentials
                type: invoice
              supplierNumber: 0
              daysUntilInvoicingDueDate: 15
              contactPerson:
              - phoneNumber: "98573564"
                address:
                  country: Norway
                  streetAddress: Karl Johan 34
                  city: Oslo
                  postCode: "0550"
                  streetAddressLine2: H0405
                contactPersonId: 2747365
                name: Betty Boop
                email: bb@gmail.com
              - phoneNumber: "98573564"
                address:
                  country: Norway
                  streetAddress: Karl Johan 34
                  city: Oslo
                  postCode: "0550"
                  streetAddressLine2: H0405
                contactPersonId: 2747365
                name: Betty Boop
                email: bb@gmail.com
              language: Norwegian
              inactive: true
              supplier: false
              bankAccountNumber: "11112233334"
              currency: NOK
              email: kontakt@fiken.gmail
              address:
                country: Norway
                streetAddress: Karl Johan 34
                city: Oslo
                postCode: "0550"
                streetAddressLine2: H0405
              customerAccountCode: 1500:20001
              contactId: 2747365
              lastModifiedDate: 2018-04-03
              organizationNumber: "913312465"
              groups:
              - groups
              - groups
              customerNumber: 51248
              createdDate: 2018-04-03
              phoneNumber: "62158537"
              memberNumber: 5464
              name: Fiken AS
              memberNumberString: "5464"
              supplierAccountCode: 2400:20001
              customer: false
            name: name
            description: description
            completed: true
            projectId: 73408306
            startDate: 2018-04-03
          totalPaidInCurrency: 634550
          saleNumber: XK455L
          currency: NOK
          settledDate: 2023-04-03
          lines:
          - vatType: vatType
            vat: 500
            description: description
            netPrice: 4500
            netPriceInCurrency: 4500
            vatInCurrency: 500
            projectId: 2815556
            account: "3000"
          - vatType: vatType
            vat: 500
            description: description
            netPrice: 4500
            netPriceInCurrency: 4500
            vatInCurrency: 500
            projectId: 2815556
            account: "3000"
          outstandingBalance: 145
          writeOff: false
          salePayments:
          - date: 2018-04-03
            amount: 34000
            paymentId: 2888156
            amountInNok: 500000
            fee: 6
            currency: NOK
            account: 1920:10001
          - date: 2018-04-03
            amount: 34000
            paymentId: 2888156
            amountInNok: 500000
            fee: 6
            currency: NOK
            account: 1920:10001
          lastModifiedDate: 2018-04-03
          netAmount: 4500
          totalPaid: 524500
          outstandingBalanceInCurrency: 65
          kind: external_invoice
          settled: true
          transactionId: 3458156
          vatAmount: 5400
          deleted: true
          paymentDate: 2018-04-03
          paymentAccount: 1920:10001
          saleAttachments:
          - identifier: "24760"
            downloadUrl: downloadUrl
            comment: comment
            downloadUrlWithFikenNormalUserCredentials: downloadUrlWithFikenNormalUserCredentials
            type: invoice
          - identifier: "24760"
            downloadUrl: downloadUrl
            comment: comment
            downloadUrlWithFikenNormalUserCredentials: downloadUrlWithFikenNormalUserCredentials
            type: invoice
          customer:
            notes:
            - note: Garage 45
              author: Betty Boop
            - note: Garage 45
              author: Betty Boop
            documents:
            - identifier: "24760"
              downloadUrl: downloadUrl
              comment: comment
              downloadUrlWithFikenNormalUserCredentials: downloadUrlWithFikenNormalUserCredentials
              type: invoice
            - identifier: "24760"
              downloadUrl: downloadUrl
              comment: comment
              downloadUrlWithFikenNormalUserCredentials: downloadUrlWithFikenNormalUserCredentials
              type: invoice
            supplierNumber: 0
            daysUntilInvoicingDueDate: 15
            contactPerson:
            - phoneNumber: "98573564"
              address:
                country: Norway
                streetAddress: Karl Johan 34
                city: Oslo
                postCode: "0550"
                streetAddressLine2: H0405
              contactPersonId: 2747365
              name: Betty Boop
              email: bb@gmail.com
            - phoneNumber: "98573564"
              address:
                country: Norway
                streetAddress: Karl Johan 34
                city: Oslo
                postCode: "0550"
                streetAddressLine2: H0405
              contactPersonId: 2747365
              name: Betty Boop
              email: bb@gmail.com
            language: Norwegian
            inactive: true
            supplier: false
            bankAccountNumber: "11112233334"
            currency: NOK
            email: kontakt@fiken.gmail
            address:
              country: Norway
              streetAddress: Karl Johan 34
              city: Oslo
              postCode: "0550"
              streetAddressLine2: H0405
            customerAccountCode: 1500:20001
            contactId: 2747365
            lastModifiedDate: 2018-04-03
            organizationNumber: "913312465"
            groups:
            - groups
            - groups
            customerNumber: 51248
            createdDate: 2018-04-03
            phoneNumber: "62158537"
            memberNumber: 5464
            name: Fiken AS
            memberNumberString: "5464"
            supplierAccountCode: 2400:20001
            customer: false
        createdDate: 2023-04-03
        associatedCreditNotes:
        - 0
        - 0
        invoiceDraftUuid: 123e4567-e89b-12d3-a456-426655440000
        orderReference: orderReference
        invoiceId: 2888156
        customer:
          notes:
          - note: Garage 45
            author: Betty Boop
          - note: Garage 45
            author: Betty Boop
          documents:
          - identifier: "24760"
            downloadUrl: downloadUrl
            comment: comment
            downloadUrlWithFikenNormalUserCredentials: downloadUrlWithFikenNormalUserCredentials
            type: invoice
          - identifier: "24760"
            downloadUrl: downloadUrl
            comment: comment
            downloadUrlWithFikenNormalUserCredentials: downloadUrlWithFikenNormalUserCredentials
            type: invoice
          supplierNumber: 0
          daysUntilInvoicingDueDate: 15
          contactPerson:
          - phoneNumber: "98573564"
            address:
              country: Norway
              streetAddress: Karl Johan 34
              city: Oslo
              postCode: "0550"
              streetAddressLine2: H0405
            contactPersonId: 2747365
            name: Betty Boop
            email: bb@gmail.com
          - phoneNumber: "98573564"
            address:
              country: Norway
              streetAddress: Karl Johan 34
              city: Oslo
              postCode: "0550"
              streetAddressLine2: H0405
            contactPersonId: 2747365
            name: Betty Boop
            email: bb@gmail.com
          language: Norwegian
          inactive: true
          supplier: false
          bankAccountNumber: "11112233334"
          currency: NOK
          email: kontakt@fiken.gmail
          address:
            country: Norway
            streetAddress: Karl Johan 34
            city: Oslo
            postCode: "0550"
            streetAddressLine2: H0405
          customerAccountCode: 1500:20001
          contactId: 2747365
          lastModifiedDate: 2018-04-03
          organizationNumber: "913312465"
          groups:
          - groups
          - groups
          customerNumber: 51248
          createdDate: 2018-04-03
          phoneNumber: "62158537"
          memberNumber: 5464
          name: Fiken AS
          memberNumberString: "5464"
          supplierAccountCode: 2400:20001
          customer: false
      properties:
        invoiceId:
          description: Invoice Id
          example: 2888156
          format: int64
          readOnly: true
          type: integer
        createdDate:
          description: "Date that the invoice was created in Fiken, format yyyy-mm-dd."
          example: 2023-04-03
          format: date
          readOnly: true
          type: string
        lastModifiedDate:
          description: "Date that invoices was last modified in Fiken, format yyyy-mm-dd."
          example: 2018-04-03
          format: date
          readOnly: true
          type: string
        invoiceNumber:
          description: Unique invoice number generated by us.
          example: 10001
          format: int64
          type: integer
        kid:
          description: Norwegian KID number. Number from 2 to 25 digits long.
          example: "5855454756"
          type: string
        issueDate:
          description: "Issue date of the invoice, format yyyy-mm-dd"
          example: 2018-04-03
          format: date
          type: string
        dueDate:
          description: "Due date of the invoice, format yyyy-mm-dd"
          example: 2018-04-03
          format: date
          type: string
        originalDueDate:
          description: "Original due date of the invoice if the due date has been\
            \ changed, format yyyy-mm-dd"
          example: 2018-04-03
          format: date
          type: string
        net:
          description: Net amount (in invoice currency) in cents.
          example: 25000
          format: int64
          type: integer
        vat:
          description: VAT amount (in invoice currency) in cents.
          example: 5000
          format: int64
          type: integer
        gross:
          description: Gross amount (= net+VAT) (in invoice currency) in cents.
          example: 30000
          format: int64
          type: integer
        netInNok:
          description: Net amount in NOK (in cents)
          example: 25000
          format: int64
          type: integer
        vatInNok:
          description: VAT amount in NOK (in cents)
          example: 5000
          format: int64
          type: integer
        grossInNok:
          description: Gross amount in NOK (in cents)
          example: 30000
          format: int64
          type: integer
        cash:
          description: Purchase associated with Invoice is a cash purchase.
          example: true
          type: boolean
        invoiceText:
          description: Comment/description printed above the invoice lines
          type: string
        yourReference:
          type: string
        ourReference:
          type: string
        orderReference:
          type: string
        invoiceDraftUuid:
          description: The UUID of invoice draft used to create the invoice.
          example: 123e4567-e89b-12d3-a456-426655440000
          type: string
        address:
          $ref: '#/components/schemas/address'
        lines:
          items:
            $ref: '#/components/schemas/invoiceLineResult'
          type: array
        currency:
          default: NOK
          description: "ISO 4217 currency code, default value is NOK"
          pattern: "^[A-Z]{3}$"
          type: string
        bankAccountNumber:
          example: "11112233334"
          type: string
        sentManually:
          description: If the invoice was not sent using Fiken this can be set to
            "true"
          example: false
          type: boolean
        invoicePdf:
          $ref: '#/components/schemas/attachment'
        associatedCreditNotes:
          description: Associated credit note Id(s)
          items:
            format: int64
            type: integer
          type: array
        attachments:
          items:
            $ref: '#/components/schemas/attachment'
          type: array
        customer:
          $ref: '#/components/schemas/contact'
        sale:
          $ref: '#/components/schemas/saleResult'
        project:
          $ref: '#/components/schemas/projectResult'
        dispatches:
          items:
            $ref: '#/components/schemas/dispatchResult'
          type: array
      type: object
    dispatchResult:
      example:
        date: 2024-04-03
        dispatchType: email
      properties:
        date:
          description: "Date that invoice was sent from Fiken, format yyyy-mm-dd"
          example: 2024-04-03
          format: date
          readOnly: true
          type: string
        dispatchType:
          description: The type of disptach. Unknown is returned when an invoice was
            manually sent and Fiken doesn't know the dispatch method.
          enum:
          - email
          - sms
          - ehf
          - letter
          - vipps
          - efaktura
          - unknown
          example: email
          readOnly: true
          type: string
      type: object
    journalEntryLine:
      example:
        creditVatCode: 5
        amount: 310000
        debitAccount: debitAccount
        creditAccount: creditAccount
        lastModifiedDate: 2018-04-03
        debitVatCode: 5
        projectId:
        - 2
        - 2
        account: 2400:20079
        vatCode: "1"
      properties:
        amount:
          description: "This will be the net amount (excluding VAT) for debitAccount\
            \ lines and gross amount \n(including VAT) for creditAccount lines. The\
            \ reason for this difference is due to the \nway Fiken calculates VAT\
            \ based on the debitVatCode and creditVatCode.\n"
          example: 310000
          format: int64
          type: integer
        account:
          example: 2400:20079
          readOnly: true
          type: string
        vatCode:
          example: "1"
          readOnly: true
          type: string
        debitAccount:
          type: string
          writeOnly: true
        debitVatCode:
          format: int64
          type: integer
          writeOnly: true
        creditAccount:
          type: string
          writeOnly: true
        creditVatCode:
          format: int64
          type: integer
          writeOnly: true
        projectId:
          items:
            format: int64
            type: integer
          readOnly: true
          type: array
        lastModifiedDate:
          description: "Date that journal entry line was last modified in Fiken, format\
            \ yyyy-mm-dd."
          example: 2018-04-03
          format: date
          readOnly: true
          type: string
      required:
      - amount
      type: object
    journalEntry:
      example:
        date: 2018-04-03
        journalEntryId: 0
        createdDate: 2018-04-03
        attachments:
        - identifier: "24760"
          downloadUrl: downloadUrl
          comment: comment
          downloadUrlWithFikenNormalUserCredentials: downloadUrlWithFikenNormalUserCredentials
          type: invoice
        - identifier: "24760"
          downloadUrl: downloadUrl
          comment: comment
          downloadUrlWithFikenNormalUserCredentials: downloadUrlWithFikenNormalUserCredentials
          type: invoice
        lastModifiedDate: 2018-04-03
        journalEntryNumber: 18
        description: "Purchase, Schweigaards Gate 34 AS (invoice nr 26083)"
        offsetTransactionId: 1
        lines:
        - creditVatCode: 5
          amount: 310000
          debitAccount: debitAccount
          creditAccount: creditAccount
          lastModifiedDate: 2018-04-03
          debitVatCode: 5
          projectId:
          - 2
          - 2
          account: 2400:20079
          vatCode: "1"
        - creditVatCode: 5
          amount: 310000
          debitAccount: debitAccount
          creditAccount: creditAccount
          lastModifiedDate: 2018-04-03
          debitVatCode: 5
          projectId:
          - 2
          - 2
          account: 2400:20079
          vatCode: "1"
        transactionId: 6
      properties:
        journalEntryId:
          format: int64
          readOnly: true
          type: integer
        createdDate:
          description: "Date that journal entry was created in Fiken, format yyyy-mm-dd"
          example: 2018-04-03
          format: date
          readOnly: true
          type: string
        lastModifiedDate:
          description: "Date that journal entry was last modified in Fiken, format\
            \ yyyy-mm-dd."
          example: 2018-04-03
          format: date
          readOnly: true
          type: string
        transactionId:
          format: int64
          readOnly: true
          type: integer
        offsetTransactionId:
          description: If a journal entry has been cancelled this provides the id
            of the balancing transaction
          format: int64
          readOnly: true
          type: integer
        journalEntryNumber:
          example: 18
          format: int32
          readOnly: true
          type: integer
        description:
          description: "We add the flag 'Fri postering registrert via API: '. This\
            \ must be taken into account in the max length of the description"
          example: "Purchase, Schweigaards Gate 34 AS (invoice nr 26083)"
          maxLength: 200
          type: string
        date:
          example: 2018-04-03
          format: date
          type: string
        lines:
          items:
            $ref: '#/components/schemas/journalEntryLine'
          type: array
        attachments:
          items:
            $ref: '#/components/schemas/attachment'
          readOnly: true
          type: array
      required:
      - date
      - description
      - lines
      type: object
    offer:
      example:
        date: 2018-04-03
        address:
          country: Norway
          streetAddress: Karl Johan 34
          city: Oslo
          postCode: "0550"
          streetAddressLine2: H0405
        gross: 30000
        yourReference: yourReference
        contactId: 9688154
        vat: 5000
        discount: 2500
        offerNumber: 10001
        ourReference: ourReference
        archived: false
        contactPersonId: 9688154
        offerId: 2888156
        orderReference: orderReference
        comment: comment
        currency: NOK
        net: 25000
        lines:
        - vatInPercent: 25
          unitPrice: 4550
          quantity: 5
          gross: 5000
          productId: 2888156
          incomeAccount: "3000"
          vat: 500
          netInNok: 4500
          discount: 25
          description: "Goatskin, with extra-long suede cuffs"
          grossInNok: 5000
          vatInNok: 500
          productName: Gardening Gloves VI2
          vatType: vatType
          comment: One size fits all
          net: 4500
        - vatInPercent: 25
          unitPrice: 4550
          quantity: 5
          gross: 5000
          productId: 2888156
          incomeAccount: "3000"
          vat: 500
          netInNok: 4500
          discount: 25
          description: "Goatskin, with extra-long suede cuffs"
          grossInNok: 5000
          vatInNok: 500
          productName: Gardening Gloves VI2
          vatType: vatType
          comment: One size fits all
          net: 4500
        projectId: 2815556
        offerDraftUuid: 123e4567-e89b-12d3-a456-426655440000
      properties:
        offerId:
          description: offer ID
          example: 2888156
          format: int64
          readOnly: true
          type: integer
        offerDraftUuid:
          description: "UUID are represented as 32 hexadecimal (base-16) digits, displayed\
            \ in 5 groups separated by hyphens, in the form 8-4-4-4-12 for a total\
            \ of 36 characters."
          example: 123e4567-e89b-12d3-a456-426655440000
          readOnly: true
          type: string
        date:
          description: Date for offer
          example: 2018-04-03
          format: date
          type: string
        offerNumber:
          description: Unique offer number generated by us.
          example: 10001
          format: int32
          type: integer
        net:
          description: Net amount (in invoice currency) in cents.
          example: 25000
          format: int64
          type: integer
        vat:
          description: VAT amount (in invoice currency) in cents.
          example: 5000
          format: int64
          type: integer
        gross:
          description: Gross amount (= net+VAT) (in invoice currency) in cents.
          example: 30000
          format: int64
          type: integer
        comment:
          description: Comment/description
          type: string
        yourReference:
          type: string
        ourReference:
          type: string
        orderReference:
          description: Reference if sending invoice via EHF.
          type: string
        discount:
          description: The discount amount in the specified currency.
          example: 2500
          type: number
        address:
          $ref: '#/components/schemas/address'
        lines:
          items:
            $ref: '#/components/schemas/invoiceLineResult'
          type: array
        currency:
          default: NOK
          description: "ISO 4217 currency code, default value is NOK"
          pattern: "^[A-Z]{3}$"
          type: string
        contactId:
          description: Contact associated with offer.
          example: 9688154
          format: int64
          type: integer
        contactPersonId:
          description: Contact person associated with offer. Must belong to the provided
            contact.
          example: 9688154
          format: int64
          type: integer
        projectId:
          example: 2815556
          format: int64
          type: integer
        archived:
          default: false
          description: If order confirmation has been archived or not.
          example: false
          type: boolean
      type: object
    orderConfirmation:
      example:
        date: 2018-04-03
        createdInvoice: 2815556
        address:
          country: Norway
          streetAddress: Karl Johan 34
          city: Oslo
          postCode: "0550"
          streetAddressLine2: H0405
        gross: 30000
        yourReference: yourReference
        contactId: 9688154
        vat: 5000
        discount: 2500
        internalComment: internalComment
        ourReference: ourReference
        archived: false
        confirmationNumber: 10001
        contactPersonId: 9688154
        orderReference: orderReference
        comment: comment
        currency: NOK
        confirmationDraftUuid: 123e4567-e89b-12d3-a456-426655440000
        confirmationId: 2888156
        net: 25000
        lines:
        - vatInPercent: 25
          unitPrice: 4550
          quantity: 5
          gross: 5000
          productId: 2888156
          incomeAccount: "3000"
          vat: 500
          netInNok: 4500
          discount: 25
          description: "Goatskin, with extra-long suede cuffs"
          grossInNok: 5000
          vatInNok: 500
          productName: Gardening Gloves VI2
          vatType: vatType
          comment: One size fits all
          net: 4500
        - vatInPercent: 25
          unitPrice: 4550
          quantity: 5
          gross: 5000
          productId: 2888156
          incomeAccount: "3000"
          vat: 500
          netInNok: 4500
          discount: 25
          description: "Goatskin, with extra-long suede cuffs"
          grossInNok: 5000
          vatInNok: 500
          productName: Gardening Gloves VI2
          vatType: vatType
          comment: One size fits all
          net: 4500
        projectId: 2815556
      properties:
        confirmationId:
          description: offer ID
          example: 2888156
          format: int64
          readOnly: true
          type: integer
        confirmationDraftUuid:
          description: "UUID are represented as 32 hexadecimal (base-16) digits, displayed\
            \ in 5 groups separated by hyphens, in the form 8-4-4-4-12 for a total\
            \ of 36 characters."
          example: 123e4567-e89b-12d3-a456-426655440000
          readOnly: true
          type: string
        date:
          description: Date for offer
          example: 2018-04-03
          format: date
          type: string
        confirmationNumber:
          description: Unique offer number generated by us.
          example: 10001
          format: int32
          type: integer
        net:
          description: Net amount (in invoice currency) in cents.
          example: 25000
          format: int64
          type: integer
        vat:
          description: VAT amount (in invoice currency) in cents.
          example: 5000
          format: int64
          type: integer
        gross:
          description: Gross amount (= net+VAT) (in invoice currency) in cents.
          example: 30000
          format: int64
          type: integer
        comment:
          description: Comment/description
          type: string
        yourReference:
          type: string
        ourReference:
          type: string
        orderReference:
          description: Reference if sending invoice via EHF.
          type: string
        discount:
          description: The discount amount in the specified currency.
          example: 2500
          type: number
        address:
          $ref: '#/components/schemas/address'
        lines:
          items:
            $ref: '#/components/schemas/invoiceLineResult'
          type: array
        currency:
          default: NOK
          description: "ISO 4217 currency code, default value is NOK"
          pattern: "^[A-Z]{3}$"
          type: string
        contactId:
          description: Contact associated with offer.
          example: 9688154
          format: int64
          type: integer
        contactPersonId:
          description: Contact person associated with the order confirmation. Must
            belong to given contact.
          example: 9688154
          format: int64
          type: integer
        projectId:
          example: 2815556
          format: int64
          type: integer
        createdInvoice:
          description: "If the order confirmation was used to create an invoice, the\
            \ id of the associated invoice. Otherwise null is returned."
          example: 2815556
          format: int64
          readOnly: true
          type: integer
        archived:
          default: false
          description: If order confirmation has been archived or not.
          example: false
          type: boolean
        internalComment:
          description: "Comment that is not shown on the order confirmation, but kept\
            \ for internal use only"
          type: string
      type: object
    orderLine:
      example:
        vatType: vatType
        vat: 500
        description: description
        netPrice: 4500
        netPriceInCurrency: 4500
        vatInCurrency: 500
        projectId: 2815556
        account: "3000"
      properties:
        description:
          description: Description of the product or service.
          maxLength: 200
          type: string
        netPrice:
          description: Net amount of order line in cents. Either netPrice or netPriceInCurrency
            must be provided.
          example: 4500
          format: int64
          type: integer
        vat:
          description: VAT amount of order line in cents.
          example: 500
          format: int64
          type: integer
        account:
          description: Expense account (kostnadskonto) associated with payment.
          example: "3000"
          type: string
        vatType:
          description: |
            Vat Types for SALES: [NONE, HIGH, MEDIUM, RAW_FISH, LOW, EXEMPT_IMPORT_EXPORT, EXEMPT, OUTSIDE, EXEMPT_REVERSE]
            Vat Types for PURCHASES: [NONE, HIGH, MEDIUM, RAW_FISH, LOW, HIGH_DIRECT, HIGH_BASIS, MEDIUM_DIRECT, MEDIUM_BASIS, NONE_IMPORT_BASIS,
            HIGH_FOREIGN_SERVICE_DEDUCTIBLE, HIGH_FOREIGN_SERVICE_NONDEDUCTIBLE, LOW_FOREIGN_SERVICE_DEDUCTIBLE,
            LOW_FOREIGN_SERVICE_NONDEDUCTIBLE, HIGH_PURCHASE_OF_EMISSIONSTRADING_OR_GOLD_DEDUCTIBLE, HIGH_PURCHASE_OF_EMISSIONSTRADING_OR_GOLD_NONDEDUCTIBLE]
          type: string
        netPriceInCurrency:
          description: Net amount in currency (in cents)
          example: 4500
          format: int64
          type: integer
        vatInCurrency:
          description: VAT amount in currency (in cents)
          example: 500
          format: int64
          type: integer
        projectId:
          description: "If a purchase is split over several projects, project/line\
            \ can be specified. This field is only to be used for purchases."
          example: 2815556
          format: int64
          type: integer
          writeOnly: true
      required:
      - description
      - vatType
      type: object
    partialCreditNoteRequest:
      properties:
        ourReference:
          description: Optional
          type: string
        yourReference:
          description: "Optional - Your reference for invoice, free string format."
          type: string
        orderReference:
          description: Reference if sending via EHF.
          type: string
        project:
          description: Optional - Project associated with the credit note.
          format: int64
          type: integer
        currency:
          description: ISO 4217 currency code
          example: NOK
          pattern: "^[A-Z]{3}$"
          type: string
        issueDate:
          description: "Date that the credit note is issued, format yyyy-mm-dd"
          example: 2018-04-03
          format: date
          type: string
        invoiceId:
          description: Optional - Id of invoice that the credit note is associated
            with.
          example: 2888156
          format: int64
          type: integer
        contactId:
          description: Id of contact that the credit note is associated with.
          example: 3588152
          format: int64
          type: integer
        contactPersonId:
          description: Id of contact person that the credit note is associated with
            (Credit person must belong to the provided contact).
          example: 3588152
          format: int64
          type: integer
        creditNoteText:
          example: Invoice for services rendered during the Oslo Knitting Festival.
          maxLength: 500
          type: string
        lines:
          items:
            $ref: '#/components/schemas/creditNoteLineResult'
          type: array
      required:
      - issueDate
      - lines
      type: object
    payment:
      description: "Returns a payment object with additional fields currrencyAmount,\
        \ currency, and fee if it is a foreign currency payment"
      example:
        date: 2018-04-03
        amount: 34000
        paymentId: 2888156
        amountInNok: 500000
        fee: 6
        currency: NOK
        account: 1920:10001
      properties:
        paymentId:
          description: Id of given payment.
          example: 2888156
          format: int64
          readOnly: true
          type: integer
        date:
          description: "Payment date, format yyyy-mm-dd"
          example: 2018-04-03
          format: date
          type: string
        account:
          description: Account associated with payment.
          example: 1920:10001
          type: string
        amount:
          description: Amount paid in the specified currency. If no currency is provided
            then currency defaults to "NOK". Formatted in cents (34000 = 340.00)
          example: 34000
          format: int64
          type: integer
        amountInNok:
          description: Attribute of a foreign payment only. Is required if amount
            is provided in currency other than NOK and should be the actual amount
            that was received in the bank account. Formatted in cents (500000 = 5000.00)
          example: 500000
          format: int64
          readOnly: true
          type: integer
        currency:
          description: "Only specify the currency if other than \"NOK\", otherwise\
            \ default currency is \"NOK\". ISO 4217 currency code"
          example: NOK
          pattern: "^[A-Z]{3}$"
          type: string
        fee:
          description: Any fees additional to the amount paid in the specified currency.
            This is always a "NOK" amount even if the sale currency is a different
            currency.
          format: int64
          type: integer
      required:
      - account
      - amount
      - date
      type: object
    product:
      example:
        unitPrice: 300000
        note: note
        createdDate: 2018-04-03
        vatType: HIGH
        productId: 2888156
        lastModifiedDate: 2018-04-03
        incomeAccount: "3000"
        name: Spade
        active: true
        productNumber: 125-1
        stock: 5
      properties:
        productId:
          description: Product Id.
          example: 2888156
          format: int64
          readOnly: true
          type: integer
        createdDate:
          description: "Date that product was created in Fiken, format yyyy-mm-dd"
          example: 2018-04-03
          format: date
          readOnly: true
          type: string
        lastModifiedDate:
          description: "Date that product was last modified in Fiken, format yyyy-mm-dd."
          example: 2018-04-03
          format: date
          readOnly: true
          type: string
        name:
          description: Product name.
          example: Spade
          type: string
        unitPrice:
          description: The net unit price in cents.
          example: 300000
          format: int64
          type: integer
        incomeAccount:
          description: The accounting account that will receive the payment.
          example: "3000"
          type: string
        vatType:
          description: "One of {\"HIGH\", \"MEDIUM\", \"LOW\", \"EXEMPT\", \"EXEMPT_IMPORT_EXPORT\"\
            , \"EXEMPT_REVERSE\", \"OUTSIDE\", \"NONE\"}. \"HIGH\" is the most common."
          example: HIGH
          type: string
        active:
          default: true
          description: If product is in use (True) or not (False).
          example: true
          type: boolean
        productNumber:
          example: 125-1
          type: string
        stock:
          description: "Number of products available in stock. If not provided, stock\
            \ value is set to null. Decimal values are accepted. For example 5.5"
          example: 5
          format: float
          type: number
        note:
          description: Optional field for additional information.
          maxLength: 200
          type: string
      required:
      - active
      - incomeAccount
      - name
      - vatType
      type: object
    productSalesLineInfo:
      example:
        netAmount: 5000
        count: 250
        grossAmount: 5500
        sales: 45
        vatAmount: 500
      properties:
        count:
          example: 250
          format: int64
          type: integer
        sales:
          example: 45
          format: int64
          type: integer
        netAmount:
          description: Net amount excluding VAT in cents (5000 = 50.00)
          example: 5000
          format: int64
          type: integer
        vatAmount:
          description: VAT amount for sale in cents (500 = 5.00)
          example: 500
          format: int64
          type: integer
        grossAmount:
          description: Gross amount of sale (net + VAT) in cents (5500 = 55.00)
          example: 5500
          format: int64
          type: integer
      type: object
    productSalesReportRequest:
      properties:
        from:
          description: "Start date range for the report, inclusive, format yyyy-mm-dd"
          example: 2018-04-03
          format: date
          type: string
        to:
          description: "End date range for the report, inclusive, format yyyy-mm-dd"
          example: 2018-04-03
          format: date
          type: string
      required:
      - from
      - to
      type: object
    productSalesReportResult:
      example:
        sold:
          netAmount: 5000
          count: 250
          grossAmount: 5500
          sales: 45
          vatAmount: 500
        product:
          unitPrice: 300000
          note: note
          createdDate: 2018-04-03
          vatType: HIGH
          productId: 2888156
          lastModifiedDate: 2018-04-03
          incomeAccount: "3000"
          name: Spade
          active: true
          productNumber: 125-1
          stock: 5
        sum:
          netAmount: 5000
          count: 250
          grossAmount: 5500
          sales: 45
          vatAmount: 500
        credited:
          netAmount: 5000
          count: 250
          grossAmount: 5500
          sales: 45
          vatAmount: 500
      properties:
        product:
          $ref: '#/components/schemas/product'
        sold:
          $ref: '#/components/schemas/productSalesLineInfo'
        credited:
          $ref: '#/components/schemas/productSalesLineInfo'
        sum:
          $ref: '#/components/schemas/productSalesLineInfo'
      type: object
    projectRequest:
      properties:
        number:
          type: string
        name:
          type: string
        description:
          type: string
        startDate:
          description: "Start date for the project, inclusive, format yyyy-mm-dd"
          example: 2018-04-03
          format: date
          type: string
        endDate:
          description: "End date for the project, inclusive, format yyyy-mm-dd"
          example: 2018-04-03
          format: date
          type: string
        contactId:
          example: 73408306
          format: int64
          type: integer
        completed:
          description: Whether the project is completed or not.
          type: boolean
      required:
      - name
      - number
      - startDate
      type: object
    projectResult:
      example:
        number: number
        endDate: 2018-04-03
        contact:
          notes:
          - note: Garage 45
            author: Betty Boop
          - note: Garage 45
            author: Betty Boop
          documents:
          - identifier: "24760"
            downloadUrl: downloadUrl
            comment: comment
            downloadUrlWithFikenNormalUserCredentials: downloadUrlWithFikenNormalUserCredentials
            type: invoice
          - identifier: "24760"
            downloadUrl: downloadUrl
            comment: comment
            downloadUrlWithFikenNormalUserCredentials: downloadUrlWithFikenNormalUserCredentials
            type: invoice
          supplierNumber: 0
          daysUntilInvoicingDueDate: 15
          contactPerson:
          - phoneNumber: "98573564"
            address:
              country: Norway
              streetAddress: Karl Johan 34
              city: Oslo
              postCode: "0550"
              streetAddressLine2: H0405
            contactPersonId: 2747365
            name: Betty Boop
            email: bb@gmail.com
          - phoneNumber: "98573564"
            address:
              country: Norway
              streetAddress: Karl Johan 34
              city: Oslo
              postCode: "0550"
              streetAddressLine2: H0405
            contactPersonId: 2747365
            name: Betty Boop
            email: bb@gmail.com
          language: Norwegian
          inactive: true
          supplier: false
          bankAccountNumber: "11112233334"
          currency: NOK
          email: kontakt@fiken.gmail
          address:
            country: Norway
            streetAddress: Karl Johan 34
            city: Oslo
            postCode: "0550"
            streetAddressLine2: H0405
          customerAccountCode: 1500:20001
          contactId: 2747365
          lastModifiedDate: 2018-04-03
          organizationNumber: "913312465"
          groups:
          - groups
          - groups
          customerNumber: 51248
          createdDate: 2018-04-03
          phoneNumber: "62158537"
          memberNumber: 5464
          name: Fiken AS
          memberNumberString: "5464"
          supplierAccountCode: 2400:20001
          customer: false
        name: name
        description: description
        completed: true
        projectId: 73408306
        startDate: 2018-04-03
      properties:
        projectId:
          example: 73408306
          format: int64
          type: integer
        number:
          readOnly: true
          type: string
        name:
          type: string
        description:
          type: string
        startDate:
          description: "Start date for the project, inclusive, format yyyy-mm-dd"
          example: 2018-04-03
          format: date
          type: string
        endDate:
          description: "End date for the project, inclusive, format yyyy-mm-dd"
          example: 2018-04-03
          format: date
          type: string
        contact:
          $ref: '#/components/schemas/contact'
        completed:
          description: Whether the project is completed or not.
          type: boolean
      type: object
    purchaseRequest:
      properties:
        transactionId:
          example: 3458156
          format: int64
          readOnly: true
          type: integer
        identifier:
          description: Invoice/sale number or similar.
          type: string
        date:
          description: "Payment date, format yyyy-mm-dd"
          example: 2018-04-03
          format: date
          type: string
        dueDate:
          description: "Due date of the invoice, format yyyy-mm-dd"
          example: 2018-04-03
          format: date
          type: string
        kind:
          description: Purchased with cash or through a supplier.
          enum:
          - cash_purchase
          - supplier
          example: cash_purchase
          type: string
        lines:
          items:
            $ref: '#/components/schemas/orderLine'
          type: array
        supplierId:
          description: Id of supplier if not a cash purchase.
          example: 2888156
          format: int64
          type: integer
          writeOnly: true
        currency:
          description: ISO 4217 currency code
          example: NOK
          pattern: "^[A-Z]{3}$"
          type: string
        paymentAccount:
          example: 1920:10001
          type: string
          writeOnly: true
        paymentDate:
          description: "Payment date, format yyyy-mm-dd"
          example: 2018-04-03
          format: date
          type: string
          writeOnly: true
        kid:
          description: Norwegian KID number. Number from 2 to 25 digits long.
          example: "5855454756"
          type: string
          writeOnly: true
        projectId:
          description: Id of given project.
          example: 2888156
          format: int64
          type: integer
      required:
      - currency
      - date
      - kind
      - lines
      - paid
      type: object
    purchaseResult:
      example:
        date: 2018-04-03
        identifier: identifier
        kind: cash_purchase
        settled: true
        purchaseId: 2888156
        dueDate: 2018-04-03
        payments:
        - date: 2018-04-03
          amount: 34000
          paymentId: 2888156
          amountInNok: 500000
          fee: 6
          currency: NOK
          account: 1920:10001
        - date: 2018-04-03
          amount: 34000
          paymentId: 2888156
          amountInNok: 500000
          fee: 6
          currency: NOK
          account: 1920:10001
        kid: "5855454756"
        project:
        - number: number
          endDate: 2018-04-03
          contact:
            notes:
            - note: Garage 45
              author: Betty Boop
            - note: Garage 45
              author: Betty Boop
            documents:
            - identifier: "24760"
              downloadUrl: downloadUrl
              comment: comment
              downloadUrlWithFikenNormalUserCredentials: downloadUrlWithFikenNormalUserCredentials
              type: invoice
            - identifier: "24760"
              downloadUrl: downloadUrl
              comment: comment
              downloadUrlWithFikenNormalUserCredentials: downloadUrlWithFikenNormalUserCredentials
              type: invoice
            supplierNumber: 0
            daysUntilInvoicingDueDate: 15
            contactPerson:
            - phoneNumber: "98573564"
              address:
                country: Norway
                streetAddress: Karl Johan 34
                city: Oslo
                postCode: "0550"
                streetAddressLine2: H0405
              contactPersonId: 2747365
              name: Betty Boop
              email: bb@gmail.com
            - phoneNumber: "98573564"
              address:
                country: Norway
                streetAddress: Karl Johan 34
                city: Oslo
                postCode: "0550"
                streetAddressLine2: H0405
              contactPersonId: 2747365
              name: Betty Boop
              email: bb@gmail.com
            language: Norwegian
            inactive: true
            supplier: false
            bankAccountNumber: "11112233334"
            currency: NOK
            email: kontakt@fiken.gmail
            address:
              country: Norway
              streetAddress: Karl Johan 34
              city: Oslo
              postCode: "0550"
              streetAddressLine2: H0405
            customerAccountCode: 1500:20001
            contactId: 2747365
            lastModifiedDate: 2018-04-03
            organizationNumber: "913312465"
            groups:
            - groups
            - groups
            customerNumber: 51248
            createdDate: 2018-04-03
            phoneNumber: "62158537"
            memberNumber: 5464
            name: Fiken AS
            memberNumberString: "5464"
            supplierAccountCode: 2400:20001
            customer: false
          name: name
          description: description
          completed: true
          projectId: 73408306
          startDate: 2018-04-03
        - number: number
          endDate: 2018-04-03
          contact:
            notes:
            - note: Garage 45
              author: Betty Boop
            - note: Garage 45
              author: Betty Boop
            documents:
            - identifier: "24760"
              downloadUrl: downloadUrl
              comment: comment
              downloadUrlWithFikenNormalUserCredentials: downloadUrlWithFikenNormalUserCredentials
              type: invoice
            - identifier: "24760"
              downloadUrl: downloadUrl
              comment: comment
              downloadUrlWithFikenNormalUserCredentials: downloadUrlWithFikenNormalUserCredentials
              type: invoice
            supplierNumber: 0
            daysUntilInvoicingDueDate: 15
            contactPerson:
            - phoneNumber: "98573564"
              address:
                country: Norway
                streetAddress: Karl Johan 34
                city: Oslo
                postCode: "0550"
                streetAddressLine2: H0405
              contactPersonId: 2747365
              name: Betty Boop
              email: bb@gmail.com
            - phoneNumber: "98573564"
              address:
                country: Norway
                streetAddress: Karl Johan 34
                city: Oslo
                postCode: "0550"
                streetAddressLine2: H0405
              contactPersonId: 2747365
              name: Betty Boop
              email: bb@gmail.com
            language: Norwegian
            inactive: true
            supplier: false
            bankAccountNumber: "11112233334"
            currency: NOK
            email: kontakt@fiken.gmail
            address:
              country: Norway
              streetAddress: Karl Johan 34
              city: Oslo
              postCode: "0550"
              streetAddressLine2: H0405
            customerAccountCode: 1500:20001
            contactId: 2747365
            lastModifiedDate: 2018-04-03
            organizationNumber: "913312465"
            groups:
            - groups
            - groups
            customerNumber: 51248
            createdDate: 2018-04-03
            phoneNumber: "62158537"
            memberNumber: 5464
            name: Fiken AS
            memberNumberString: "5464"
            supplierAccountCode: 2400:20001
            customer: false
          name: name
          description: description
          completed: true
          projectId: 73408306
          startDate: 2018-04-03
        transactionId: 3458156
        purchaseAttachments:
        - identifier: "24760"
          downloadUrl: downloadUrl
          comment: comment
          downloadUrlWithFikenNormalUserCredentials: downloadUrlWithFikenNormalUserCredentials
          type: invoice
        - identifier: "24760"
          downloadUrl: downloadUrl
          comment: comment
          downloadUrlWithFikenNormalUserCredentials: downloadUrlWithFikenNormalUserCredentials
          type: invoice
        deleted: true
        supplier:
          notes:
          - note: Garage 45
            author: Betty Boop
          - note: Garage 45
            author: Betty Boop
          documents:
          - identifier: "24760"
            downloadUrl: downloadUrl
            comment: comment
            downloadUrlWithFikenNormalUserCredentials: downloadUrlWithFikenNormalUserCredentials
            type: invoice
          - identifier: "24760"
            downloadUrl: downloadUrl
            comment: comment
            downloadUrlWithFikenNormalUserCredentials: downloadUrlWithFikenNormalUserCredentials
            type: invoice
          supplierNumber: 0
          daysUntilInvoicingDueDate: 15
          contactPerson:
          - phoneNumber: "98573564"
            address:
              country: Norway
              streetAddress: Karl Johan 34
              city: Oslo
              postCode: "0550"
              streetAddressLine2: H0405
            contactPersonId: 2747365
            name: Betty Boop
            email: bb@gmail.com
          - phoneNumber: "98573564"
            address:
              country: Norway
              streetAddress: Karl Johan 34
              city: Oslo
              postCode: "0550"
              streetAddressLine2: H0405
            contactPersonId: 2747365
            name: Betty Boop
            email: bb@gmail.com
          language: Norwegian
          inactive: true
          supplier: false
          bankAccountNumber: "11112233334"
          currency: NOK
          email: kontakt@fiken.gmail
          address:
            country: Norway
            streetAddress: Karl Johan 34
            city: Oslo
            postCode: "0550"
            streetAddressLine2: H0405
          customerAccountCode: 1500:20001
          contactId: 2747365
          lastModifiedDate: 2018-04-03
          organizationNumber: "913312465"
          groups:
          - groups
          - groups
          customerNumber: 51248
          createdDate: 2018-04-03
          phoneNumber: "62158537"
          memberNumber: 5464
          name: Fiken AS
          memberNumberString: "5464"
          supplierAccountCode: 2400:20001
          customer: false
        paid: true
        currency: NOK
        settledDate: 2024-04-03
        lines:
        - vatType: vatType
          vat: 500
          description: description
          netPrice: 4500
          netPriceInCurrency: 4500
          vatInCurrency: 500
          projectId: 2815556
          account: "3000"
        - vatType: vatType
          vat: 500
          description: description
          netPrice: 4500
          netPriceInCurrency: 4500
          vatInCurrency: 500
          projectId: 2815556
          account: "3000"
        paymentDate: 2018-04-03
        paymentAccount: 1920:10001
      properties:
        purchaseId:
          description: Id of given purchase.
          example: 2888156
          format: int64
          readOnly: true
          type: integer
        transactionId:
          example: 3458156
          format: int64
          readOnly: true
          type: integer
        identifier:
          description: Invoice/sale number or similar.
          type: string
        date:
          description: "Payment date, format yyyy-mm-dd"
          example: 2018-04-03
          format: date
          type: string
        dueDate:
          description: "Due date of the invoice, format yyyy-mm-dd"
          example: 2018-04-03
          format: date
          type: string
        kind:
          description: Purchased with cash or through a supplier.
          enum:
          - cash_purchase
          - supplier
          example: cash_purchase
          type: string
        paid:
          example: true
          type: boolean
        lines:
          items:
            $ref: '#/components/schemas/orderLine'
          type: array
        supplier:
          $ref: '#/components/schemas/contact'
        currency:
          description: ISO 4217 currency code
          example: NOK
          pattern: "^[A-Z]{3}$"
          type: string
        paymentAccount:
          example: 1920:10001
          type: string
          writeOnly: true
        paymentDate:
          description: "Payment date, format yyyy-mm-dd"
          example: 2018-04-03
          format: date
          type: string
          writeOnly: true
        payments:
          items:
            $ref: '#/components/schemas/payment'
          type: array
        purchaseAttachments:
          items:
            $ref: '#/components/schemas/attachment'
          type: array
        kid:
          description: Norwegian KID number. Number from 2 to 25 digits long.
          example: "5855454756"
          type: string
          writeOnly: true
        project:
          items:
            $ref: '#/components/schemas/projectResult'
          type: array
        deleted:
          description: Whether the purchase has been deleted or not
          type: boolean
        settled:
          description: If the purchase as been marked as settled (True) or not (False).
          example: true
          type: boolean
        settledDate:
          description: "Date the the purchase was marked as settled, format yyyy-mm-dd"
          example: 2024-04-03
          format: date
          type: string
      required:
      - currency
      - date
      - kind
      - lines
      - paid
      type: object
    saleRequest:
      properties:
        saleNumber:
          description: Identifier for sale.
          example: XK455L
          type: string
        date:
          description: "Date of the invoice, format yyyy-mm-dd"
          example: 2018-04-03
          format: date
          type: string
        kind:
          description: "Either cash_sale, invoice, or external_invoice."
          enum:
          - cash_sale
          - invoice
          - external_invoice
          example: external_invoice
          type: string
        totalPaid:
          description: Total amount paid in NOK
          example: 524500
          format: int64
          type: integer
        totalPaidInCurrency:
          description: Total amount paid in other currency.
          example: 634550
          format: int64
          type: integer
        lines:
          items:
            $ref: '#/components/schemas/orderLine'
          type: array
        customerId:
          description: customerId = contactId where customer = true
          format: int64
          type: integer
        currency:
          description: ISO 4217 currency code
          example: NOK
          pattern: "^[A-Z]{3}$"
          type: string
        dueDate:
          description: "Due date of the invoice, format yyyy-mm-dd"
          example: 2018-04-03
          format: date
          type: string
        kid:
          description: Norwegian KID number. Number from 2 to 25 digits long.
          example: "5855454756"
          type: string
        paymentAccount:
          example: 1920:10001
          type: string
        paymentDate:
          description: "Payment date of the invoice, format yyyy-mm-dd"
          example: 2018-04-03
          format: date
          type: string
        paymentFee:
          description: Fee associated with payment of sale.
          example: 634550
          format: int64
          type: integer
        projectId:
          description: Id of given project.
          example: 2888156
          format: int64
          type: integer
      required:
      - currency
      - date
      - kind
      - lines
      - paid
      type: object
    saleResult:
      example:
        date: 2018-04-03
        notes:
        - note: Invoice sent after telephone conversation with customer
          author: James Jones
        - note: Invoice sent after telephone conversation with customer
          author: James Jones
        saleId: 2888156
        dueDate: 2018-04-03
        kid: "5855454756"
        project:
          number: number
          endDate: 2018-04-03
          contact:
            notes:
            - note: Garage 45
              author: Betty Boop
            - note: Garage 45
              author: Betty Boop
            documents:
            - identifier: "24760"
              downloadUrl: downloadUrl
              comment: comment
              downloadUrlWithFikenNormalUserCredentials: downloadUrlWithFikenNormalUserCredentials
              type: invoice
            - identifier: "24760"
              downloadUrl: downloadUrl
              comment: comment
              downloadUrlWithFikenNormalUserCredentials: downloadUrlWithFikenNormalUserCredentials
              type: invoice
            supplierNumber: 0
            daysUntilInvoicingDueDate: 15
            contactPerson:
            - phoneNumber: "98573564"
              address:
                country: Norway
                streetAddress: Karl Johan 34
                city: Oslo
                postCode: "0550"
                streetAddressLine2: H0405
              contactPersonId: 2747365
              name: Betty Boop
              email: bb@gmail.com
            - phoneNumber: "98573564"
              address:
                country: Norway
                streetAddress: Karl Johan 34
                city: Oslo
                postCode: "0550"
                streetAddressLine2: H0405
              contactPersonId: 2747365
              name: Betty Boop
              email: bb@gmail.com
            language: Norwegian
            inactive: true
            supplier: false
            bankAccountNumber: "11112233334"
            currency: NOK
            email: kontakt@fiken.gmail
            address:
              country: Norway
              streetAddress: Karl Johan 34
              city: Oslo
              postCode: "0550"
              streetAddressLine2: H0405
            customerAccountCode: 1500:20001
            contactId: 2747365
            lastModifiedDate: 2018-04-03
            organizationNumber: "913312465"
            groups:
            - groups
            - groups
            customerNumber: 51248
            createdDate: 2018-04-03
            phoneNumber: "62158537"
            memberNumber: 5464
            name: Fiken AS
            memberNumberString: "5464"
            supplierAccountCode: 2400:20001
            customer: false
          name: name
          description: description
          completed: true
          projectId: 73408306
          startDate: 2018-04-03
        totalPaidInCurrency: 634550
        saleNumber: XK455L
        currency: NOK
        settledDate: 2023-04-03
        lines:
        - vatType: vatType
          vat: 500
          description: description
          netPrice: 4500
          netPriceInCurrency: 4500
          vatInCurrency: 500
          projectId: 2815556
          account: "3000"
        - vatType: vatType
          vat: 500
          description: description
          netPrice: 4500
          netPriceInCurrency: 4500
          vatInCurrency: 500
          projectId: 2815556
          account: "3000"
        outstandingBalance: 145
        writeOff: false
        salePayments:
        - date: 2018-04-03
          amount: 34000
          paymentId: 2888156
          amountInNok: 500000
          fee: 6
          currency: NOK
          account: 1920:10001
        - date: 2018-04-03
          amount: 34000
          paymentId: 2888156
          amountInNok: 500000
          fee: 6
          currency: NOK
          account: 1920:10001
        lastModifiedDate: 2018-04-03
        netAmount: 4500
        totalPaid: 524500
        outstandingBalanceInCurrency: 65
        kind: external_invoice
        settled: true
        transactionId: 3458156
        vatAmount: 5400
        deleted: true
        paymentDate: 2018-04-03
        paymentAccount: 1920:10001
        saleAttachments:
        - identifier: "24760"
          downloadUrl: downloadUrl
          comment: comment
          downloadUrlWithFikenNormalUserCredentials: downloadUrlWithFikenNormalUserCredentials
          type: invoice
        - identifier: "24760"
          downloadUrl: downloadUrl
          comment: comment
          downloadUrlWithFikenNormalUserCredentials: downloadUrlWithFikenNormalUserCredentials
          type: invoice
        customer:
          notes:
          - note: Garage 45
            author: Betty Boop
          - note: Garage 45
            author: Betty Boop
          documents:
          - identifier: "24760"
            downloadUrl: downloadUrl
            comment: comment
            downloadUrlWithFikenNormalUserCredentials: downloadUrlWithFikenNormalUserCredentials
            type: invoice
          - identifier: "24760"
            downloadUrl: downloadUrl
            comment: comment
            downloadUrlWithFikenNormalUserCredentials: downloadUrlWithFikenNormalUserCredentials
            type: invoice
          supplierNumber: 0
          daysUntilInvoicingDueDate: 15
          contactPerson:
          - phoneNumber: "98573564"
            address:
              country: Norway
              streetAddress: Karl Johan 34
              city: Oslo
              postCode: "0550"
              streetAddressLine2: H0405
            contactPersonId: 2747365
            name: Betty Boop
            email: bb@gmail.com
          - phoneNumber: "98573564"
            address:
              country: Norway
              streetAddress: Karl Johan 34
              city: Oslo
              postCode: "0550"
              streetAddressLine2: H0405
            contactPersonId: 2747365
            name: Betty Boop
            email: bb@gmail.com
          language: Norwegian
          inactive: true
          supplier: false
          bankAccountNumber: "11112233334"
          currency: NOK
          email: kontakt@fiken.gmail
          address:
            country: Norway
            streetAddress: Karl Johan 34
            city: Oslo
            postCode: "0550"
            streetAddressLine2: H0405
          customerAccountCode: 1500:20001
          contactId: 2747365
          lastModifiedDate: 2018-04-03
          organizationNumber: "913312465"
          groups:
          - groups
          - groups
          customerNumber: 51248
          createdDate: 2018-04-03
          phoneNumber: "62158537"
          memberNumber: 5464
          name: Fiken AS
          memberNumberString: "5464"
          supplierAccountCode: 2400:20001
          customer: false
      properties:
        saleId:
          description: Sale Id
          example: 2888156
          format: int64
          readOnly: true
          type: integer
        lastModifiedDate:
          description: "Date that the sale was last modified in Fiken, format yyyy-mm-dd."
          example: 2018-04-03
          format: date
          readOnly: true
          type: string
        transactionId:
          example: 3458156
          format: int64
          readOnly: true
          type: integer
        saleNumber:
          description: Identifier for sale.
          example: XK455L
          type: string
        date:
          description: "Due date of the invoice, format yyyy-mm-dd"
          example: 2018-04-03
          format: date
          type: string
        kind:
          description: "Either cash_sale, invoice, or external_invoice."
          enum:
          - cash_sale
          - invoice
          - external_invoice
          example: external_invoice
          type: string
        netAmount:
          description: Total net amount of the sale to be paid.
          example: 4500
          format: int64
          type: integer
        vatAmount:
          description: VAT amount on sale.
          example: 5400
          format: int64
          type: integer
        settled:
          description: If the sale as been marked as settled (True) or not (False).
          example: true
          type: boolean
        settledDate:
          description: "Date the the sale was marked as settled, format yyyy-mm-dd"
          example: 2023-04-03
          format: date
          type: string
        writeOff:
          description: If a loss has been registered for this sale (tapsfÃ¸ring av
            salg).
          example: false
          type: boolean
        totalPaid:
          description: Total amount paid in NOK
          example: 524500
          format: int64
          readOnly: true
          type: integer
        totalPaidInCurrency:
          description: Total amount paid in other currency.
          example: 634550
          format: int64
          readOnly: true
          type: integer
        outstandingBalance:
          example: 145
          format: int64
          type: integer
        outstandingBalanceInCurrency:
          description: Outstanding balance in other currency.
          example: 65
          format: int64
          readOnly: true
          type: integer
        lines:
          items:
            $ref: '#/components/schemas/orderLine'
          type: array
        customer:
          $ref: '#/components/schemas/contact'
        currency:
          description: ISO 4217 currency code
          example: NOK
          pattern: "^[A-Z]{3}$"
          type: string
        dueDate:
          description: "Due date of the invoice, format yyyy-mm-dd"
          example: 2018-04-03
          format: date
          type: string
        kid:
          description: Norwegian KID number. Number from 2 to 25 digits long.
          example: "5855454756"
          type: string
        paymentAccount:
          example: 1920:10001
          type: string
          writeOnly: true
        salePayments:
          items:
            $ref: '#/components/schemas/payment'
          type: array
        saleAttachments:
          items:
            $ref: '#/components/schemas/attachment'
          type: array
        paymentDate:
          description: "Payment date of the invoice, format yyyy-mm-dd"
          example: 2018-04-03
          format: date
          readOnly: true
          type: string
        project:
          $ref: '#/components/schemas/projectResult'
        notes:
          items:
            $ref: '#/components/schemas/note'
          readOnly: true
          type: array
        deleted:
          description: Whether the sale has been deleted or not
          type: boolean
      type: object
    sendInvoiceishRequest:
      properties:
        method:
          description: "The method of sending. Has to be auto, email, ehf, efaktura,\
            \ sms or letter.\nIf several methods are provided they should be in prioritized\
            \ order as Fiken will only send the invoice to \nthe first successful\
            \ available method. Method \"auto\" tries available methods for given\
            \ customer based on\nthe information registered for the customer. The\
            \ order of priority is EHF, eFaktura, Sms, and email.\nMethod \"letter\"\
            \ means physical letter, printed and sent by our postal service partner\
            \ (extra charge per\nletter, available for recipient addresses in Norway\
            \ only). The option \"includeDocumentAttachments\" is\nnot supported by\
            \ method \"letter\", attachments are not included even if this option\
            \ is set.\n"
          example:
          - sms
          - email
          items:
            enum:
            - email
            - ehf
            - efaktura
            - sms
            - letter
            - auto
            type: string
          type: array
        includeDocumentAttachments:
          default: true
          description: Whether the document's attachment should be included when sending
            (True) or not (False).
          type: boolean
        recipientName:
          example: BjÃ¸rn Bohler
          type: string
        recipientEmail:
          example: bjorn.bohler@gmail.com
          type: string
        message:
          description: Additional message to send with document.
          example: Due upon receipt
          type: string
        emailSendOption:
          default: auto
          description: "document_link, attachment or auto. Defaults to auto which\
            \ uses customer/company settings."
          enum:
          - document_link
          - attachment
          - auto
          example: document_link
          type: string
        mergeInvoiceAndAttachments:
          default: false
          description: "If sending with emailSendOption = attachment, this merges\
            \ them into a single document if true."
          type: boolean
        organizationNumber:
          description: Brreg organization number. Defaults to the customers organization
            number if not provided.
          example: "913312465"
          type: string
        mobileNumber:
          description: "Defaults to the customers phone number. Format should include\
            \ the country code. If a Norwegian phone number, the country code is not\
            \ necessary."
          example: "85262741"
          type: string
      required:
      - includeDocumentAttachments
      - method
      type: object
    sendCreditNoteRequest:
      allOf:
      - $ref: '#/components/schemas/sendInvoiceishRequest'
      - properties:
          creditNoteId:
            description: Id of credit note to send.
            example: 2888156
            format: int64
            type: integer
        required:
        - creditNoteId
        type: object
    sendInvoiceRequest:
      allOf:
      - $ref: '#/components/schemas/sendInvoiceishRequest'
      - properties:
          invoiceId:
            description: Id of invoice to send.
            example: 2888156
            format: int64
            type: integer
        required:
        - invoiceId
        type: object
    transaction:
      description: Transaction result upon creation of a General Journal Entry
      example:
        entries:
        - date: 2018-04-03
          journalEntryId: 0
          createdDate: 2018-04-03
          attachments:
          - identifier: "24760"
            downloadUrl: downloadUrl
            comment: comment
            downloadUrlWithFikenNormalUserCredentials: downloadUrlWithFikenNormalUserCredentials
            type: invoice
          - identifier: "24760"
            downloadUrl: downloadUrl
            comment: comment
            downloadUrlWithFikenNormalUserCredentials: downloadUrlWithFikenNormalUserCredentials
            type: invoice
          lastModifiedDate: 2018-04-03
          journalEntryNumber: 18
          description: "Purchase, Schweigaards Gate 34 AS (invoice nr 26083)"
          offsetTransactionId: 1
          lines:
          - creditVatCode: 5
            amount: 310000
            debitAccount: debitAccount
            creditAccount: creditAccount
            lastModifiedDate: 2018-04-03
            debitVatCode: 5
            projectId:
            - 2
            - 2
            account: 2400:20079
            vatCode: "1"
          - creditVatCode: 5
            amount: 310000
            debitAccount: debitAccount
            creditAccount: creditAccount
            lastModifiedDate: 2018-04-03
            debitVatCode: 5
            projectId:
            - 2
            - 2
            account: 2400:20079
            vatCode: "1"
          transactionId: 6
        - date: 2018-04-03
          journalEntryId: 0
          createdDate: 2018-04-03
          attachments:
          - identifier: "24760"
            downloadUrl: downloadUrl
            comment: comment
            downloadUrlWithFikenNormalUserCredentials: downloadUrlWithFikenNormalUserCredentials
            type: invoice
          - identifier: "24760"
            downloadUrl: downloadUrl
            comment: comment
            downloadUrlWithFikenNormalUserCredentials: downloadUrlWithFikenNormalUserCredentials
            type: invoice
          lastModifiedDate: 2018-04-03
          journalEntryNumber: 18
          description: "Purchase, Schweigaards Gate 34 AS (invoice nr 26083)"
          offsetTransactionId: 1
          lines:
          - creditVatCode: 5
            amount: 310000
            debitAccount: debitAccount
            creditAccount: creditAccount
            lastModifiedDate: 2018-04-03
            debitVatCode: 5
            projectId:
            - 2
            - 2
            account: 2400:20079
            vatCode: "1"
          - creditVatCode: 5
            amount: 310000
            debitAccount: debitAccount
            creditAccount: creditAccount
            lastModifiedDate: 2018-04-03
            debitVatCode: 5
            projectId:
            - 2
            - 2
            account: 2400:20079
            vatCode: "1"
          transactionId: 6
        createdDate: 2018-04-03
        lastModifiedDate: 2018-04-03
        description: description
        type: General Journal Entry
        transactionId: 734083065
      properties:
        transactionId:
          example: 734083065
          format: int64
          readOnly: true
          type: integer
        createdDate:
          description: "Date that product was created in Fiken, format yyyy-mm-dd"
          example: 2018-04-03
          format: date
          readOnly: true
          type: string
        lastModifiedDate:
          description: "Date that product was last modified in Fiken, format yyyy-mm-dd."
          example: 2018-04-03
          format: date
          readOnly: true
          type: string
        description:
          type: string
        type:
          example: General Journal Entry
          type: string
        entries:
          items:
            $ref: '#/components/schemas/journalEntry'
          type: array
      type: object
    updateInvoiceRequest:
      properties:
        newDueDate:
          description: "Due date of invoice, format yyyy-mm-dd"
          example: 2018-04-03
          format: date
          type: string
        sentManually:
          description: If the invoice was not sent using Fiken this can be set to
            "true"
          example: true
          type: boolean
      type: object
    updateProjectRequest:
      properties:
        name:
          type: string
        description:
          type: string
        startDate:
          description: "Start date for the project, inclusive, format yyyy-mm-dd"
          example: 2018-04-03
          format: date
          type: string
        endDate:
          description: "End date for the project, inclusive, format yyyy-mm-dd"
          example: 2018-04-03
          format: date
          type: string
        contactId:
          example: 73408306
          format: int64
          type: integer
        completed:
          description: Whether the project is completed or not.
          type: boolean
      type: object
    userinfo:
      example:
        name: Test Testesen
        email: test@fiken.no
      properties:
        name:
          description: Name of the user.
          example: Test Testesen
          type: string
        email:
          description: Users email address.
          example: test@fiken.no
          type: string
      type: object
    addAttachmentToContact_request:
      properties:
        filename:
          description: "Required. The filename. Must end with either .png, .jpeg,\
            \ .jpg, .gif or .pdf"
          example: invoice_24760.pdf
          type: string
        comment:
          description: Not required.
          type: string
        file:
          example: !!binary |-
            aHR0cHM6Ly9maWtlbi5uby9hcGkvdjIvZmlsZXMvNzQ1YjJmMTUtZ2g3NS00NDA4LWJnZjItYjFk
            MmR0NjEwY2IyL2ludm9pY2UyNDc2MC5wZGY=
          format: binary
          type: string
      type: object
    addAttachmentToJournalEntry_request:
      properties:
        filename:
          description: "Required. The filename. Must end with either .png, .jpeg,\
            \ .jpg, .gif or .pdf"
          example: invoice_24760.pdf
          type: string
        file:
          example: !!binary |-
            aHR0cHM6Ly9maWtlbi5uby9hcGkvdjIvZmlsZXMvNzQ1YjJmMTUtZ2g3NS00NDA4LWJnZjItYjFk
            MmR0NjEwY2IyL2ludm9pY2UyNDc2MC5wZGY=
          format: binary
          type: string
      type: object
    addAttachmentToInvoice_request:
      properties:
        filename:
          description: "The filename. Must end with either .png, .jpeg, .jpg, .gif\
            \ or .pdf"
          example: invoice_24760.pdf
          type: string
        file:
          example: !!binary |-
            aHR0cHM6Ly9maWtlbi5uby9hcGkvdjIvZmlsZXMvNzQ1YjJmMTUtZ2g3NS00NDA4LWJnZjItYjFk
            MmR0NjEwY2IyL2ludm9pY2UyNDc2MC5wZGY=
          format: binary
          type: string
      type: object
    addAttachmentToSale_request:
      properties:
        filename:
          description: "The filename. Must end with either .png, .jpeg, .jpg, .gif\
            \ or .pdf"
          example: invoice_24760.pdf
          type: string
        attachToPayment:
          default: true
          description: "True if this attachment may document the payment (i.e. transaction\
            \ receipt from credit card/payment company, export from bank, etc.). Default\
            \ value is false if not specified. At least one of attachToPayment and\
            \ attachToSale must be true."
          type: boolean
        attachToSale:
          default: true
          description: "True if this attachment may document the sale (i.e. invoice,\
            \ etc). Default value is false if not specified. At least one of attachToPayment\
            \ and attachToSale must be true."
          type: boolean
        file:
          example: !!binary |-
            aHR0cHM6Ly9maWtlbi5uby9hcGkvdjIvZmlsZXMvNzQ1YjJmMTUtZ2g3NS00NDA4LWJnZjItYjFk
            MmR0NjEwY2IyL2ludm9pY2UyNDc2MC5wZGY=
          format: binary
          type: string
      type: object
    addAttachmentToPurchase_request:
      properties:
        filename:
          description: "The filename. Must end with either .png, .jpeg, .jpg, .gif\
            \ or .pdf"
          example: invoice_24760.pdf
          type: string
        attachToPayment:
          description: "True if this attachment may document the payment (i.e. transaction\
            \ receipt from credit card/payment company, export from bank, etc.). Default\
            \ value is false if not specified. At least one of attachToPayment and\
            \ attachToSale must be true."
          type: boolean
        attachToSale:
          description: "True if this attachment may document the sale (i.e. invoice,\
            \ etc). Default value is false if not specified. At least one of attachToPayment\
            \ and attachToSale must be true."
          type: boolean
        file:
          example: !!binary |-
            aHR0cHM6Ly9maWtlbi5uby9hcGkvdjIvZmlsZXMvNzQ1YjJmMTUtZ2g3NS00NDA4LWJnZjItYjFk
            MmR0NjEwY2IyL2ludm9pY2UyNDc2MC5wZGY=
          format: binary
          type: string
      type: object
    createInboxDocument_request:
      properties:
        name:
          description: "The name of the inbox document, usually the same as the filename"
          example: Invoice for August
          type: string
        filename:
          description: The filename of the file uploaded
          example: invoice.pdf
          type: string
        description:
          description: Additional description of the inbox document
          example: Uploaded with API
          type: string
        file:
          format: binary
          type: string
      type: object
  securitySchemes:
    fiken_api_oauth:
      flows:
        authorizationCode:
          authorizationUrl: https://fiken.no/oauth/authorize
          scopes: {}
          tokenUrl: https://fiken.no/oauth/token
      type: oauth2


// <auto-generated>
/*
 * Fiken API
 *
 *  ## Introduction [Fiken.no](https://fiken.no) is an online accounting system aimed at making accounting easy for small businesses. The API Module allows other systems to integrate with Fiken. This document describes Fiken's API.  ## Using the API Use of this API in production environments on live data is normally associated with a fee for the end user (company). API access costs 99kr per month and can be ordered through the Module access page under Settings in your Fiken account. If you have any questions regarding the API pricing, contact us at <api@fiken.no>.  The API provides two different ways of authorizing requests.    1. OAuth2   2. Personal API tokens  Third parties that wish to integrate with Fiken on behalf of their customers should use the OAuth2 authorization method. In order to develop OAuth2 applications that integrate with this API you must log into your Fiken account and check the box saying that you are a developer (**Rediger konto -> Profil -> Andre innstillinger**). This will allow you to create an App by clicking on the \"API\" tab under Brukerinnstillinger. If you don't have an existing Fiken account you can create a new user and demo company (demoforetak) at no charge. Send an email to <api@fiken.no> to get free access to Fiken for longer than the included 30 day free trial period.   Upon creation of the new App you will be provided a Client ID and Client Secret that are needed for the OAuth2 authorization flow.  This will allow you to use the API during development with up to 5 users. If you would like to use the API with more than 5 users and gain production status, you will need to send an email to <api@fiken.no> to gain full access to the API module.  Fiken customers that wish to integrate their own solutions with this API can use personal API tokens. Personal API tokens can be created in **Rediger konto -> API -> Personlige API-nÃ¸kler**. Note that personal API tokens do not expire.  ## Base URL All URLs start with https://api.fiken.no/api/v2. Note that TLS is required, unencrypted HTTP is not supported. Although we currently redirect HTTP requests to HTTPS, you are not allowed to this with your application as using HTTP is a security risk. In the future we might respond with 403 Forbidden instead.  ## Concurrent requests / rate limiting You are only allowed to make a single concurrent API-request. Sending multiple requests concurrently may result in a 429 error response. If you break this rule you might be banned. In case of a ban please contact us to be unbanned.  API calls may be slowed if you execute more than 4 requests per second.  ## Personal API tokens  Personal API tokens can be created in **Rediger konto -> API**. Personal API tokens never expire and can be revoked from the same place.  To use a personal API token simply send it as a bearer token in the `Authorization` header:      GET https://api.fiken.no/api/v2/companies     Authorization: Bearer <api token>  ## Authorization with OAuth2 Fiken API V2 uses OAuth 2.0 for authorizing API requests. Authorized requests to the API should use an `Authorization` header with the value `Bearer <TOKEN>` where `<TOKEN>` is an access token obtained through the OAuth flow.  ### Authorize Endpoint  To start the OAuth flow in order to obtain an access token for a user, you will first have to get consent from the user. To do this, direct your user to the authorization endpoint:      GET https://fiken.no/oauth/authorize?response_type=code&client_id=CLIENT_ID&redirect_uri=REDIRECT_URI&state=STATE  If the user is logged in and accepts your request, the user is redirected back to your redirect url. If the user is not logged in, the regular Fiken.no login form is presented first, requiring the user to authenticate before accepting or rejecting your request.  If the user rejects the request or if there is an error in your request, the user is redirected back to your redirect url with the parameters `error` and `error_description`. If the user rejected the request the error code will be `access_denied`.  #### Parameters  | Name          | Description                                                                                                      | | :- -- -- -- -- -- - | :- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- | | response_type | **Required** Should always be the value `code`                                                     | | client_id     | **Required** The client id you received from Fiken when you registered your application                          | | redirect_uri  | **Required** The URL in your application where users will be sent with an authorization code after authorization | | state         | **Required** An unguessable random string, used to protect against CSRF attacks                                  |   ### Token Endpoint  If the user accepts your request, Fiken redirects the user back to your `redirect_uri` with a parameter named `code` as well as the state you provided in the previous step in the `state` parameter. This temporary code will expire after a short while.  The temporary authorization code can be exchanged for an access token at the token endpoint.  The token endpoint is protected with Http Basic Authentication and you should use your application client id and client secret as credentials to authenticate.      POST https://fiken.no/oauth/token     Content-Type: application/x-www-form-urlencoded     Authorization: Basic dXNlIHlvdXIgY2xpZW50IGlkOmFuZCBjbGllbnQgc2VjcmV0      grant_type=authorization_code&code=AUTHCODE&redirect_uri=REDIRECT_URI&state=STATE  The response will contain the access token, a refresh token (see below) as well as information about the expiry time for the token.      {       \"access_token\": \"K2QwoFp4ZfugWLWk7Ipu9kni5cyv3luXKQ-GDShvV2g=\",       \"refresh_token\": \"naFOD_j8m6PFGcP0pfImVZlSxKklHLbgj9Hzao4rhg8=\",       \"token_type\": \"bearer\",       \"expires_in\": 86157     }  If an error occurs during the token exchange request, an error object is returned with an error and an error description.      {         \"error\": \"invalid_grant\",         \"error_description\": \"The authorization code is invalid or expired.\"     }  #### Parameters  | Name         | Description                                                                                                      | | :- -- -- -- -- -- | :- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- | | grant_type   | **Required** Should be the value `authorization_code`                                                            | | code         | **Required** The authorization code that was received in the redirect from the authorize endpoint                | | redirect_uri | **Required** The URL in your application where users will be sent with an authorization code after authorization | | state        | **Required** An unguessable random string, used to protect against CSRF attacks                                  |  ### Refresh Tokens  If an access token has expired you can use the refresh token that was sent in the response from the token endpoint to get a new access token.  Note that if the user has revoked the consent to your app, the refresh token will no longer be valid.  To get a new access token from the refresh token, use the token endpoint with the grant type `refresh_token`:      POST https://fiken.no/oauth/token     Content-Type: application/x-www-form-urlencoded     Authorization: Basic dXNlIHlvdXIgY2xpZW50IGlkOmFuZCBjbGllbnQgc2VjcmV0      grant_type=refresh_token&refresh_token=REFRESH_TOKEN  The response contains a fresh access token along with a possibly updated refresh token:      {       \"access_token\": \"K2QwoFp4ZfugWLWk7Ipu9kni5cyv3luXKQ-GDShvV2g=\",       \"refresh_token\": \"naFOD_j8m6PFGcP0pfImVZlSxKklHLbgj9Hzao4rhg8=\",       \"token_type\": \"bearer\",       \"expires_in\": 86157     }  #### Parameters  | Name         | Description                                                                                                      | | :- -- -- -- -- -- | :- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- | | grant_type   | **Required** Should be the value `refresh_token`                                                                 | | refresh_token| **Required** The refresh token last returned for this user from the token endpoint                               |  ### Using Access Tokens in API Requests  To execute API requests on behalf of the end user, send the access token obtained at the token endpoint as a bearer token, as in this example:      GET https://api.fiken.no/api/v2/companies     Authorization: Bearer <access_token_value>  ### Revoking tokens  To revoke an access token and refresh token use the Revoke Token endpoint.  The Revoke Token endpoint disables the application grant, the access token and the corresponding refresh token used to authenticate the call. Other access tokens obtained from the same refresh token are also revoked.      POST https://fiken.no/oauth/revoke     Authorization: Bearer <access_token_value>  The response for a successful revocation is 200/OK.  ### Managing access  The end user can manage which companies a given app has access to under **Rediger konto -> Sikkerhet -> Apper du har gitt tilgang til**.  All companies created after the initial consent has been given need to be actively added so that the app will have access to their information.  Additionally the end user can revoke access to any of their companies' data as well.   ## Try It Out  For each endpoint in the documentation below there is a button *Try It Out*. To invoke the API from this documentation you need an app and you need to authorize usage for you Fiken.no user.  Your app needs to be configured with a redirect URL for this documentation, add `https://api.fiken.no/api/v2/docs/oauth2-redirect.html` to the list of redirect URLs for your app.  Click the padlock symbol on any of the endpoints and enter your `client_id` and `client_secret` and then press *Authorize* to start the OAuth2 authorization flow, then click *Close*.  Enter the required parameters for the endpoint, such as `company_slug`, and then press *Execute* to test.  ## Request  We recommend sending the `X-Request-ID` header with all requests.  ### Request Headers | Request  Header           | Format   | Description                                                       | | - -- -- -- -- -- -- -- -          | - -- -- -- - | - -- -- -- -- -- -- -- -- -- -- -- -- -- --                                     | | `X-Request-ID`            | UUID     | UUID used to identify the request                                 |    ## Response ### Response code All HTTP codes should be expected with their normal semantics. These are some of the common ones:  * **200** for successful GET * **201** for successful POST where you get a Location-header for the created content * **400** when invalid content has be sent (for instance a required field is missing, unexpected fields, wrong format, etc) * **401** when the user is not authenticated * **403** when the user does not have the proper authorization * **404** when the requested content is not found * **405** When you are trying a method to a resource which doesn't support it (i.e. DELETE on an account). * **415** Wrong media type. we accept application/json only.  ### Response Content The default content type on the result of GET requests is application/json. On successful POSTs/PUTs/PATCHs and DELETEs an empty body is returned.  For successful POSTs/PUTs/PATCHs a Location header is given in all cases.  ## Pagination, Sorting & Filtering Pagination, sorting and filtering query parameters are all optional.   | URI                                                                     | Pagination? | Sortable? | Sortable Fields                       | Filterable? | Filtered Fields                                                                                                                         | | :- -- -- -- --                                                              |:- -- -- -- -- -- | :- -- -- -- - | :- -- -- -- -- -- --                        | :- --        | :- --                                                                                                                                    | | https://api.fiken.no/api/v2/companies                                  | Yes         | Yes       | createdDate, name, organizationNumber | No          |                                                                                                                                         | | https://api.fiken.no/api/v2/companies/{companySlug}/accounts           | No          | No        |                                       | Yes         | fromAccount, toAccount                                                                                                                  | | https://api.fiken.no/api/v2/companies/{companySlug}/accountBalances    | Yes         | No        |                                       | Yes         | fromAccount, toAccount                                                                                                                  | | https://api.fiken.no/api/v2/companies/{companySlug}/bankAccounts       | Yes         | No        |                                       | Yes         | inactive                                                                                                                                | | https://api.fiken.no/api/v2/companies/{companySlug}/contacts           | Yes         | Yes       | createdDate, lastModified             | Yes         | supplierNumber, customerNumber, memberNumber, memberNumberString, name, organizationNumber, email, group, lastModified, createdDate, inactive, phoneNumber  | | https://api.fiken.no/api/v2/companies/{companySlug}/creditNotes        | Yes         | No        |                                       | Yes         | issueDate, lastModified, settled, customerId                                                                                            | | https://api.fiken.no/api/v2/companies/{companySlug}/inbox              | Yes         | Yes       | createdDate, name                     | Yes         | status, name                                                                                                                            | | https://api.fiken.no/api/v2/companies/{companySlug}/invoices           | Yes         | No        |                                       | Yes         | issueDate, lastModified, dueDate, settled, customerId, orderReference, invoiceDraftUuid                                                 | | https://api.fiken.no/api/v2/companies/{companySlug}/invoices/drafts    | Yes         | No        |                                       | No          |                                                                                                                                         | | https://api.fiken.no/api/v2/companies/{companySlug}/journalEntries     | Yes         | No        |                                       | Yes         | date                                                                                                                                    | | https://api.fiken.no/api/v2/companies/{companySlug}/offers             | Yes         | No        |                                       | No          |                                                                                                                                         | | https://api.fiken.no/api/v2/companies/{companySlug}/orderConfirmations | Yes         | No        |                                       | No          |                                                                                                                                         | | https://api.fiken.no/api/v2/companies/{companySlug}/products           | Yes         | No        |                                       | Yes         | name, productNumber, active, createdDate, lastModified                                                                                  | | https://api.fiken.no/api/v2/companies/{companySlug}/projects           | Yes         | No        |                                       | Yes         | completed                                                                                                                               | | https://api.fiken.no/api/v2/companies/{companySlug}/purchases          | Yes         | Yes       | createdDate                           | No          | date                                                                                                                                    | | https://api.fiken.no/api/v2/companies/{companySlug}/purchases/drafts   | Yes         | No        |                                       | No          |                                                                                                                                         | | https://api.fiken.no/api/v2/companies/{companySlug}/sales              | Yes         | No        |                                       | Yes         | saleNumber, lastModified, date, contactId                                                                                               | | https://api.fiken.no/api/v2/companies/{companySlug}/sales/drafts       | Yes         | No        |                                       | No          |                                                                                                                                         | | https://api.fiken.no/api/v2/companies/{companySlug}/transactions       | Yes         | No        |                                       | Yes         | createdDate, lastModified                                                                                                               |  ### Pagination By default the API sets `page=0` and `pageSize=25` and returns the first 25 elements in a collection resource, if nothing else is specified. PageSize has a maximum value of 100 meaning that you can only access at most 100 elements at once.  To request a collection resource with pagination, query the resource with the query filters page and pageSize, note that both query parameters need to be set to enable pagination. The page counter starts at 0. The response will contain up to Fiken-Api-Page-Size elements and the response headers below, detailing how many elements the resource has in total and the total number of pages as well.  By default the API returns the resources in the order they were created, if nothing else is specified in the documentation.  #### Pagination Response Headers | Response Header           | Format   | Description                                                       | | - -- -- -- -- -- -- -- -          | - -- -- -- - | - -- -- -- -- -- -- -- -- -- -- -- -- -- --                                     | | `Fiken-Api-Page`          | integer  | From the request header                                           | | `Fiken-Api-Page-Size`     | integer  | From the request header                                           | | `Fiken-Api-Page-Count`    | integer  | The total number of pages in this resource with this page size    | | `Fiken-Api-Result-Count`  | integer  | The total number of elements in this resource                     |  ### Sorting To change the sort order for a resource, set the sortBy query parameter to a sort field in either ascending or descending order. Ex: `https://api.fiken.no/api/v2/companies?sortBy=name%20asc`  ### Filtering Some collections support filtering, and depending on the type of field, different filters can be used. Dates are the most complex, and allow you do apply different filters with different parameter names. For instance, for a field called date, the following mutations are available:  | Parameter | Field | Format    | Description                                   | | - --       |- --    | - --       |- --                                            | |  `date`   |date |yyyy-MM-dd |date equal to parameter value                  | |  `dateLe` |date |yyyy-MM-dd |date less than or equal to parameter value     | |  `dateLt` |date |yyyy-MM-dd |date less than parameter value                 | |  `dateGe` |date |yyyy-MM-dd |date greater than or equal to parameter value  | |  `dateGt` |date |yyyy-MM-dd |date greater than parameter value              |  All date-fields will have these mutations of parameter name that applies  ## Data Types These are simple data-types that are used in several of our objects.  ### Date Dates are represented as strings formatted as yyyy-MM-dd. \"Last modified\" returns the date of last modification of the object.  If the object was never modified after creation, last modified date is equal to created date.   ##### Examples: January 2nd, 1970: \"1970-01-02\"  ### Amount Amounts are always represented as a number, and specifies the number of cents in the amount. Fractions will be ignored.  ##### Examples: One thousand: 100000  One hundred and twelve cents: 10012  ### Account An account is a string with either four digits, or four digits, a colon and five digits (\"reskontro\").  ##### Examples: 3020  1500:10001  ### VAT Code Fiken's VAT codes are based upon Sticos mvakoder. To see all VAT codes go to Fiken support, check the \"Mva kode\"-selector in the Fiken web interface while creating a genereal ledger item (\"Fri postering\").  See below the mapping between VAT codes and types (codes are used at the transaction level while types are used for sales and purchases).  | Vat Code | Vat Type                                                                                                                                 | Valid for Purchases/Sales    |  | - --      |- --                                                                                                                                       | - --                          |                                          |  0/7     |NONE (Ingen - KJÃP_INGEN_MVABEHANDLING/SALG_INNTEKTER_UTEN_MVABEHANDLING)                                                               |Both                          | |  1/3    |HIGH (HÃ¸y - KJÃP/SALG_MED_HÃY_SATS)                                                                                                       |Both                          | |  11/31   |MEDIUM (Middels - KJÃP/SALG_MED_MIDDELS_SATS)                                                                                           |Both                       | |  12/32   |RAW_FISH (RÃ¥fisk - KJÃP/SALG_MED_RÃFISK_SATS)                                                                                           |Both                         | |  13/33   |LOW (Lav - KJÃP/SALG_MED_LAV_SATS)                                                                                                       |Both                          | |  52    |EXEMPT_IMPORT_EXPORT (Fritatt import/export - SALG_UTFÃRSEL_AV_VARER_OG_TJENESTER)                                                        |Sales                      | |  5    |EXEMPT (Fritatt - SALG_FRITATT_FOR_MVA_AVGIFTSFRITT)                                                                                   |Sales                        | |  6    |OUTSIDE (Utenfor - SALG_FRITATT_FOR_MVA_UTENFOR_AVGIFTSOMRÃDET)                                                                           |Sales                      | |  51    |EXEMPT_REVERSE (Fritatt omvendt - SALG_INNENLANDSK_OMSETNING_MED_OMVENDT_AVGIFTPLIKT)                                                   |Sales                      | |  14    |HIGH_DIRECT (HÃ¸y direkt - KUN_KJÃPSMVA_HÃY_SATS)                                                                                       |Purchases                  | |  21    |HIGH_BASIS (HÃ¸y grunnlag - KUN_GRUNNLAG_KJÃPSMVA_HÃY_SATS)                                                                               |Purchases                  | |  15    |MEDIUM_DIRECT (Middels direkte - KUN_KJÃPSMVA_MIDDELS_SATS)                                                                               |Purchases                  | |  22    |MEDIUM_BASIS (Middels grunnlag - KUN_GRUNNLAG_KJÃPSMVA_MIDDELS_SATS)                                                                   |Purchases                  | |  23    |NONE_IMPORT_BASIS (Ingen import grunnlag - KUN_GRUNNLAG_KJÃPSMVA_INGEN_SATS)                                                           |Purchases                  | |  86    |HIGH_FOREIGN_SERVICE_DEDUCTIBLE (Tjeneste utlandet - TJENESTER_KJÃPT_FRA_UTLANDET_MED_FRADRAG_FOR_HÃY_MVA)                               |Purchases                  | |  87    |HIGH_FOREIGN_SERVICE_NONDEDUCTIBLE (Tjeneste utlandet uten fradrag - TJENESTER_KJÃPT_FRA_UTLANDET_UTEN_FRADRAG_FOR_HÃY_MVA)               |Purchases                  | |  88    |LOW_FOREIGN_SERVICE_DEDUCTIBLE (Lav tjeneste utlandet - TJENESTER_KJÃPT_FRA_UTLANDET_MED_FRADRAG_FOR_LAV_MVA)                           |Purchases                  | |  89    |LOW_FOREIGN_SERVICE_NONDEDUCTIBLE (Lav tjeneste utlandet uten fradrag - TJENESTER_KJÃPT_FRA_UTLANDET_UTEN_FRADRAG_FOR_LAV_MVA)           |Purchases                  | |  91    |HIGH_PURCHASE_OF_EMISSIONSTRADING_OR_GOLD_DEDUCTIBLE (Gull - KJÃP_AV_KLIMAKVOTER_ELLER_GULL_MED_FRADRAG_FOR_MVA)                       |Purchases                  | |  92    |HIGH_PURCHASE_OF_EMISSIONSTRADING_OR_GOLD_NONDEDUCTIBLE (Gull uten fradrag - KJÃP_AV_KLIMAKVOTER_ELLER_GULL_UTEN_FRADRAG_FOR_MVA)       |Purchases                  | 
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using Fiken.Client;
using Fiken.Model;
using System.Diagnostics.CodeAnalysis;

namespace Fiken.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IInvoicesApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        InvoicesApiEvents Events { get; }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates and adds a new attachment to an Invoice
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="invoiceId">The invoiceId (primary key of the returned object) is returned in the GET all invoices call; not to be confused with invoiceNumber </param>
        /// <param name="filename">The filename. Must end with either .png, .jpeg, .jpg, .gif or .pdf (optional)</param>
        /// <param name="file"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAddAttachmentToInvoiceApiResponse"/>&gt;</returns>
        Task<IAddAttachmentToInvoiceApiResponse> AddAttachmentToInvoiceAsync(string companySlug, long invoiceId, Option<string> filename = default, Option<System.IO.Stream> file = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates and adds a new attachment to an Invoice
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="invoiceId">The invoiceId (primary key of the returned object) is returned in the GET all invoices call; not to be confused with invoiceNumber </param>
        /// <param name="filename">The filename. Must end with either .png, .jpeg, .jpg, .gif or .pdf (optional)</param>
        /// <param name="file"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAddAttachmentToInvoiceApiResponse"/>?&gt;</returns>
        Task<IAddAttachmentToInvoiceApiResponse?> AddAttachmentToInvoiceOrDefaultAsync(string companySlug, long invoiceId, Option<string> filename = default, Option<System.IO.Stream> file = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates and adds a new attachment to an invoice draft
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="draftId">The draftId (primary key of the returned object) is returned in the GET all drafts call. </param>
        /// <param name="filename">Required. The filename. Must end with either .png, .jpeg, .jpg, .gif or .pdf (optional)</param>
        /// <param name="comment">Not required. (optional)</param>
        /// <param name="file"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAddAttachmentToInvoiceDraftApiResponse"/>&gt;</returns>
        Task<IAddAttachmentToInvoiceDraftApiResponse> AddAttachmentToInvoiceDraftAsync(string companySlug, long draftId, Option<string> filename = default, Option<string> comment = default, Option<System.IO.Stream> file = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates and adds a new attachment to an invoice draft
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="draftId">The draftId (primary key of the returned object) is returned in the GET all drafts call. </param>
        /// <param name="filename">Required. The filename. Must end with either .png, .jpeg, .jpg, .gif or .pdf (optional)</param>
        /// <param name="comment">Not required. (optional)</param>
        /// <param name="file"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAddAttachmentToInvoiceDraftApiResponse"/>?&gt;</returns>
        Task<IAddAttachmentToInvoiceDraftApiResponse?> AddAttachmentToInvoiceDraftOrDefaultAsync(string companySlug, long draftId, Option<string> filename = default, Option<string> comment = default, Option<System.IO.Stream> file = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates an invoice. This corresponds to \&quot;Ny faktura\&quot; in Fiken. There are two types of invoice lines that can be added to an invoice line: product line or free text line. Provide a product Id if you are invoicing a product. All information regarding the price and VAT for this product will be added to the invoice. It is however also possible to override the unit amount by sending information in both fields \&quot;productId\&quot; and \&quot;unitAmount\&quot;. An invoice line can also be a free text line meaning that no existing product will be associated with the invoiced line. In this case all information regarding the price and VAT of the product or service to be invoiced must be provided. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="invoiceRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateInvoiceApiResponse"/>&gt;</returns>
        Task<ICreateInvoiceApiResponse> CreateInvoiceAsync(string companySlug, InvoiceRequest invoiceRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates an invoice. This corresponds to \&quot;Ny faktura\&quot; in Fiken. There are two types of invoice lines that can be added to an invoice line: product line or free text line. Provide a product Id if you are invoicing a product. All information regarding the price and VAT for this product will be added to the invoice. It is however also possible to override the unit amount by sending information in both fields \&quot;productId\&quot; and \&quot;unitAmount\&quot;. An invoice line can also be a free text line meaning that no existing product will be associated with the invoiced line. In this case all information regarding the price and VAT of the product or service to be invoiced must be provided. 
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="invoiceRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateInvoiceApiResponse"/>?&gt;</returns>
        Task<ICreateInvoiceApiResponse?> CreateInvoiceOrDefaultAsync(string companySlug, InvoiceRequest invoiceRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates the first invoice number which is then increased by one with every new invoice. By sending an empty request body the default is base number 10000 (the first invoice number will thus be 10001), but can be specified to another starting value.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="counter"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateInvoiceCounterApiResponse"/>&gt;</returns>
        Task<ICreateInvoiceCounterApiResponse> CreateInvoiceCounterAsync(string companySlug, Option<Counter> counter = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates the first invoice number which is then increased by one with every new invoice. By sending an empty request body the default is base number 10000 (the first invoice number will thus be 10001), but can be specified to another starting value.
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="counter"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateInvoiceCounterApiResponse"/>?&gt;</returns>
        Task<ICreateInvoiceCounterApiResponse?> CreateInvoiceCounterOrDefaultAsync(string companySlug, Option<Counter> counter = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates an invoice draft.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="invoiceishDraftRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateInvoiceDraftApiResponse"/>&gt;</returns>
        Task<ICreateInvoiceDraftApiResponse> CreateInvoiceDraftAsync(string companySlug, InvoiceishDraftRequest invoiceishDraftRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates an invoice draft.
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="invoiceishDraftRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateInvoiceDraftApiResponse"/>?&gt;</returns>
        Task<ICreateInvoiceDraftApiResponse?> CreateInvoiceDraftOrDefaultAsync(string companySlug, InvoiceishDraftRequest invoiceishDraftRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates an invoice from an already created draft.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="draftId">The draftId (primary key of the returned object) is returned in the GET all drafts call. </param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateInvoiceFromDraftApiResponse"/>&gt;</returns>
        Task<ICreateInvoiceFromDraftApiResponse> CreateInvoiceFromDraftAsync(string companySlug, long draftId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates an invoice from an already created draft.
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="draftId">The draftId (primary key of the returned object) is returned in the GET all drafts call. </param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateInvoiceFromDraftApiResponse"/>?&gt;</returns>
        Task<ICreateInvoiceFromDraftApiResponse?> CreateInvoiceFromDraftOrDefaultAsync(string companySlug, long draftId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete invoice draft with specified id.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="draftId">The draftId (primary key of the returned object) is returned in the GET all drafts call. </param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteInvoiceDraftApiResponse"/>&gt;</returns>
        Task<IDeleteInvoiceDraftApiResponse> DeleteInvoiceDraftAsync(string companySlug, long draftId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete invoice draft with specified id.
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="draftId">The draftId (primary key of the returned object) is returned in the GET all drafts call. </param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteInvoiceDraftApiResponse"/>?&gt;</returns>
        Task<IDeleteInvoiceDraftApiResponse?> DeleteInvoiceDraftOrDefaultAsync(string companySlug, long draftId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns invoice with specified id.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="invoiceId">The invoiceId (primary key of the returned object) is returned in the GET all invoices call; not to be confused with invoiceNumber </param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetInvoiceApiResponse"/>&gt;</returns>
        Task<IGetInvoiceApiResponse> GetInvoiceAsync(string companySlug, long invoiceId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns invoice with specified id.
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="invoiceId">The invoiceId (primary key of the returned object) is returned in the GET all invoices call; not to be confused with invoiceNumber </param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetInvoiceApiResponse"/>?&gt;</returns>
        Task<IGetInvoiceApiResponse?> GetInvoiceOrDefaultAsync(string companySlug, long invoiceId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns all attachments for a given Invoice
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="invoiceId">The invoiceId (primary key of the returned object) is returned in the GET all invoices call; not to be confused with invoiceNumber </param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetInvoiceAttachmentsApiResponse"/>&gt;</returns>
        Task<IGetInvoiceAttachmentsApiResponse> GetInvoiceAttachmentsAsync(string companySlug, long invoiceId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns all attachments for a given Invoice
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="invoiceId">The invoiceId (primary key of the returned object) is returned in the GET all invoices call; not to be confused with invoiceNumber </param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetInvoiceAttachmentsApiResponse"/>?&gt;</returns>
        Task<IGetInvoiceAttachmentsApiResponse?> GetInvoiceAttachmentsOrDefaultAsync(string companySlug, long invoiceId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves the counter for invoices if it has been created 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetInvoiceCounterApiResponse"/>&gt;</returns>
        Task<IGetInvoiceCounterApiResponse> GetInvoiceCounterAsync(string companySlug, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves the counter for invoices if it has been created 
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetInvoiceCounterApiResponse"/>?&gt;</returns>
        Task<IGetInvoiceCounterApiResponse?> GetInvoiceCounterOrDefaultAsync(string companySlug, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns invoice draft with specified id.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="draftId">The draftId (primary key of the returned object) is returned in the GET all drafts call. </param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetInvoiceDraftApiResponse"/>&gt;</returns>
        Task<IGetInvoiceDraftApiResponse> GetInvoiceDraftAsync(string companySlug, long draftId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns invoice draft with specified id.
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="draftId">The draftId (primary key of the returned object) is returned in the GET all drafts call. </param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetInvoiceDraftApiResponse"/>?&gt;</returns>
        Task<IGetInvoiceDraftApiResponse?> GetInvoiceDraftOrDefaultAsync(string companySlug, long draftId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns all attachments for specified draft.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="draftId">The draftId (primary key of the returned object) is returned in the GET all drafts call. </param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetInvoiceDraftAttachmentsApiResponse"/>&gt;</returns>
        Task<IGetInvoiceDraftAttachmentsApiResponse> GetInvoiceDraftAttachmentsAsync(string companySlug, long draftId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns all attachments for specified draft.
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="draftId">The draftId (primary key of the returned object) is returned in the GET all drafts call. </param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetInvoiceDraftAttachmentsApiResponse"/>?&gt;</returns>
        Task<IGetInvoiceDraftAttachmentsApiResponse?> GetInvoiceDraftAttachmentsOrDefaultAsync(string companySlug, long draftId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns all invoice drafts for given company.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="page">Returns the number of the page to return. Valid page values are integers from 0 to the total number of pages. Default value is 0.  (optional, default to 0)</param>
        /// <param name="pageSize">Defines the number of entries to return on each page. Maximum number of results that can be returned at one time are 100. Default value is 25.  (optional, default to 25)</param>
        /// <param name="orderReference">Filter based on order reference for a given invoice draft (optional)</param>
        /// <param name="uuid">Filter based on the UUID of the draft. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetInvoiceDraftsApiResponse"/>&gt;</returns>
        Task<IGetInvoiceDraftsApiResponse> GetInvoiceDraftsAsync(string companySlug, Option<int> page = default, Option<int> pageSize = default, Option<string> orderReference = default, Option<Guid> uuid = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns all invoice drafts for given company.
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="page">Returns the number of the page to return. Valid page values are integers from 0 to the total number of pages. Default value is 0.  (optional, default to 0)</param>
        /// <param name="pageSize">Defines the number of entries to return on each page. Maximum number of results that can be returned at one time are 100. Default value is 25.  (optional, default to 25)</param>
        /// <param name="orderReference">Filter based on order reference for a given invoice draft (optional)</param>
        /// <param name="uuid">Filter based on the UUID of the draft. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetInvoiceDraftsApiResponse"/>?&gt;</returns>
        Task<IGetInvoiceDraftsApiResponse?> GetInvoiceDraftsOrDefaultAsync(string companySlug, Option<int> page = default, Option<int> pageSize = default, Option<string> orderReference = default, Option<Guid> uuid = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns all invoices for given company. You can filter based on issue date, last modified date, customer ID, and if the invoice is settled or not.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="page">Returns the number of the page to return. Valid page values are integers from 0 to the total number of pages. Default value is 0.  (optional, default to 0)</param>
        /// <param name="pageSize">Defines the number of entries to return on each page. Maximum number of results that can be returned at one time are 100. Default value is 25.  (optional, default to 25)</param>
        /// <param name="issueDate">Dates are represented as strings formatted as YYYY-MM-DD. Example: January 1st, 1970: \&quot;1970-01-01\&quot;  (optional)</param>
        /// <param name="issueDateLe">Filter based on date less than or equal to parameter value. Dates are represented as strings formatted as YYYY-MM-DD. Example: January 1st, 1970: \&quot;1970-01-01\&quot;  (optional)</param>
        /// <param name="issueDateLt">Filter based on date strictly less than parameter value. Dates are represented as strings formatted as YYYY-MM-DD. Example: January 1st, 1970: \&quot;1970-01-01\&quot;  (optional)</param>
        /// <param name="issueDateGe">Filter based on date greater than or equal to parameter value. Dates are represented as strings formatted as YYYY-MM-DD. Example: January 1st, 1970: \&quot;1970-01-01\&quot;  (optional)</param>
        /// <param name="issueDateGt">Filter based on date strictly greater than parameter value Dates are represented as strings formatted as YYYY-MM-DD. Example: January 1st, 1970: \&quot;1970-01-01\&quot;  (optional)</param>
        /// <param name="lastModified">Filter based on date of last modification. Returns results that were last modified on the date provided as a parameter value. Dates are represented as strings formatted as YYYY-MM-DD. Example: January 1st, 1970: \&quot;1970-01-01\&quot;  (optional)</param>
        /// <param name="lastModifiedLe">Returns results that have been last modified before or on the date provided as a parameter value. Dates are represented as strings formatted as YYYY-MM-DD. Example: January 1st, 1970: \&quot;1970-01-01\&quot;  (optional)</param>
        /// <param name="lastModifiedLt">Returns results that have been last modified strictly before the date provided as a parameter value. Dates are represented as strings formatted as YYYY-MM-DD. Example: January 1st, 1970: \&quot;1970-01-01\&quot;  (optional)</param>
        /// <param name="lastModifiedGe">Returns results that have been last modified after or on the date provided as a parameter value. Dates are represented as strings formatted as YYYY-MM-DD. Example: January 1st, 1970: \&quot;1970-01-01\&quot;  (optional)</param>
        /// <param name="lastModifiedGt">Returns results that have been last modified strictly after the date provided as a parameter value. Dates are represented as strings formatted as YYYY-MM-DD. Example: January 1st, 1970: \&quot;1970-01-01\&quot;  (optional)</param>
        /// <param name="dueDate">Filter based on due date of invoice. Returns results from the date provided as a parameter value. Dates are represented as strings formatted as YYYY-MM-DD. Example: January 1st, 1970: \&quot;1970-01-01\&quot;  (optional)</param>
        /// <param name="dueDateLe">Returns invoices with a due date before or on the date provided as a parameter value. Dates are represented as strings formatted as YYYY-MM-DD. Example: January 1st, 1970: \&quot;1970-01-01\&quot;  (optional)</param>
        /// <param name="dueDateLt">Returns invoices with a due date that have been last modified strictly before the date provided as a parameter value. Dates are represented as strings formatted as YYYY-MM-DD. Example: January 1st, 1970: \&quot;1970-01-01\&quot;  (optional)</param>
        /// <param name="dueDateGe">Returns invoices with a due date that have been last modified after or on the date provided as a parameter value. Dates are represented as strings formatted as YYYY-MM-DD. Example: January 1st, 1970: \&quot;1970-01-01\&quot;  (optional)</param>
        /// <param name="dueDateGt">Returns invoices with a due date that have been last modified strictly after the date provided as a parameter value. Dates are represented as strings formatted as YYYY-MM-DD. Example: January 1st, 1970: \&quot;1970-01-01\&quot;  (optional)</param>
        /// <param name="customerId">Returns only invoices sent to specified customer. Must be the contactId provided by a GET contacts call.  (optional)</param>
        /// <param name="settled">When set to true, returns only invoices that have been settled. Otherwise false returns all invoices that have not been fully settled.  (optional)</param>
        /// <param name="orderReference">Filter based on order reference for a given invoice (optional)</param>
        /// <param name="invoiceDraftUuid">Filter based on the UUID of the invoice draft that was used to create a given invoice (optional)</param>
        /// <param name="invoiceNumber"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetInvoicesApiResponse"/>&gt;</returns>
        Task<IGetInvoicesApiResponse> GetInvoicesAsync(string companySlug, Option<int> page = default, Option<int> pageSize = default, Option<DateOnly> issueDate = default, Option<DateOnly> issueDateLe = default, Option<DateOnly> issueDateLt = default, Option<DateOnly> issueDateGe = default, Option<DateOnly> issueDateGt = default, Option<DateOnly> lastModified = default, Option<DateOnly> lastModifiedLe = default, Option<DateOnly> lastModifiedLt = default, Option<DateOnly> lastModifiedGe = default, Option<DateOnly> lastModifiedGt = default, Option<DateOnly> dueDate = default, Option<DateOnly> dueDateLe = default, Option<DateOnly> dueDateLt = default, Option<DateOnly> dueDateGe = default, Option<DateOnly> dueDateGt = default, Option<long> customerId = default, Option<bool> settled = default, Option<string> orderReference = default, Option<Guid> invoiceDraftUuid = default, Option<string> invoiceNumber = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns all invoices for given company. You can filter based on issue date, last modified date, customer ID, and if the invoice is settled or not.
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="page">Returns the number of the page to return. Valid page values are integers from 0 to the total number of pages. Default value is 0.  (optional, default to 0)</param>
        /// <param name="pageSize">Defines the number of entries to return on each page. Maximum number of results that can be returned at one time are 100. Default value is 25.  (optional, default to 25)</param>
        /// <param name="issueDate">Dates are represented as strings formatted as YYYY-MM-DD. Example: January 1st, 1970: \&quot;1970-01-01\&quot;  (optional)</param>
        /// <param name="issueDateLe">Filter based on date less than or equal to parameter value. Dates are represented as strings formatted as YYYY-MM-DD. Example: January 1st, 1970: \&quot;1970-01-01\&quot;  (optional)</param>
        /// <param name="issueDateLt">Filter based on date strictly less than parameter value. Dates are represented as strings formatted as YYYY-MM-DD. Example: January 1st, 1970: \&quot;1970-01-01\&quot;  (optional)</param>
        /// <param name="issueDateGe">Filter based on date greater than or equal to parameter value. Dates are represented as strings formatted as YYYY-MM-DD. Example: January 1st, 1970: \&quot;1970-01-01\&quot;  (optional)</param>
        /// <param name="issueDateGt">Filter based on date strictly greater than parameter value Dates are represented as strings formatted as YYYY-MM-DD. Example: January 1st, 1970: \&quot;1970-01-01\&quot;  (optional)</param>
        /// <param name="lastModified">Filter based on date of last modification. Returns results that were last modified on the date provided as a parameter value. Dates are represented as strings formatted as YYYY-MM-DD. Example: January 1st, 1970: \&quot;1970-01-01\&quot;  (optional)</param>
        /// <param name="lastModifiedLe">Returns results that have been last modified before or on the date provided as a parameter value. Dates are represented as strings formatted as YYYY-MM-DD. Example: January 1st, 1970: \&quot;1970-01-01\&quot;  (optional)</param>
        /// <param name="lastModifiedLt">Returns results that have been last modified strictly before the date provided as a parameter value. Dates are represented as strings formatted as YYYY-MM-DD. Example: January 1st, 1970: \&quot;1970-01-01\&quot;  (optional)</param>
        /// <param name="lastModifiedGe">Returns results that have been last modified after or on the date provided as a parameter value. Dates are represented as strings formatted as YYYY-MM-DD. Example: January 1st, 1970: \&quot;1970-01-01\&quot;  (optional)</param>
        /// <param name="lastModifiedGt">Returns results that have been last modified strictly after the date provided as a parameter value. Dates are represented as strings formatted as YYYY-MM-DD. Example: January 1st, 1970: \&quot;1970-01-01\&quot;  (optional)</param>
        /// <param name="dueDate">Filter based on due date of invoice. Returns results from the date provided as a parameter value. Dates are represented as strings formatted as YYYY-MM-DD. Example: January 1st, 1970: \&quot;1970-01-01\&quot;  (optional)</param>
        /// <param name="dueDateLe">Returns invoices with a due date before or on the date provided as a parameter value. Dates are represented as strings formatted as YYYY-MM-DD. Example: January 1st, 1970: \&quot;1970-01-01\&quot;  (optional)</param>
        /// <param name="dueDateLt">Returns invoices with a due date that have been last modified strictly before the date provided as a parameter value. Dates are represented as strings formatted as YYYY-MM-DD. Example: January 1st, 1970: \&quot;1970-01-01\&quot;  (optional)</param>
        /// <param name="dueDateGe">Returns invoices with a due date that have been last modified after or on the date provided as a parameter value. Dates are represented as strings formatted as YYYY-MM-DD. Example: January 1st, 1970: \&quot;1970-01-01\&quot;  (optional)</param>
        /// <param name="dueDateGt">Returns invoices with a due date that have been last modified strictly after the date provided as a parameter value. Dates are represented as strings formatted as YYYY-MM-DD. Example: January 1st, 1970: \&quot;1970-01-01\&quot;  (optional)</param>
        /// <param name="customerId">Returns only invoices sent to specified customer. Must be the contactId provided by a GET contacts call.  (optional)</param>
        /// <param name="settled">When set to true, returns only invoices that have been settled. Otherwise false returns all invoices that have not been fully settled.  (optional)</param>
        /// <param name="orderReference">Filter based on order reference for a given invoice (optional)</param>
        /// <param name="invoiceDraftUuid">Filter based on the UUID of the invoice draft that was used to create a given invoice (optional)</param>
        /// <param name="invoiceNumber"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetInvoicesApiResponse"/>?&gt;</returns>
        Task<IGetInvoicesApiResponse?> GetInvoicesOrDefaultAsync(string companySlug, Option<int> page = default, Option<int> pageSize = default, Option<DateOnly> issueDate = default, Option<DateOnly> issueDateLe = default, Option<DateOnly> issueDateLt = default, Option<DateOnly> issueDateGe = default, Option<DateOnly> issueDateGt = default, Option<DateOnly> lastModified = default, Option<DateOnly> lastModifiedLe = default, Option<DateOnly> lastModifiedLt = default, Option<DateOnly> lastModifiedGe = default, Option<DateOnly> lastModifiedGt = default, Option<DateOnly> dueDate = default, Option<DateOnly> dueDateLe = default, Option<DateOnly> dueDateLt = default, Option<DateOnly> dueDateGe = default, Option<DateOnly> dueDateGt = default, Option<long> customerId = default, Option<bool> settled = default, Option<string> orderReference = default, Option<Guid> invoiceDraftUuid = default, Option<string> invoiceNumber = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Sends the specified document
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="sendInvoiceRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISendInvoiceApiResponse"/>&gt;</returns>
        Task<ISendInvoiceApiResponse> SendInvoiceAsync(string companySlug, SendInvoiceRequest sendInvoiceRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Sends the specified document
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="sendInvoiceRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISendInvoiceApiResponse"/>?&gt;</returns>
        Task<ISendInvoiceApiResponse?> SendInvoiceOrDefaultAsync(string companySlug, SendInvoiceRequest sendInvoiceRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates invoice with provided id. It is possible to update the due date of an invoice as well as if the invoice was sent manually, outside of Fiken. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="invoiceId">The invoiceId (primary key of the returned object) is returned in the GET all invoices call; not to be confused with invoiceNumber </param>
        /// <param name="updateInvoiceRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateInvoiceApiResponse"/>&gt;</returns>
        Task<IUpdateInvoiceApiResponse> UpdateInvoiceAsync(string companySlug, long invoiceId, UpdateInvoiceRequest updateInvoiceRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates invoice with provided id. It is possible to update the due date of an invoice as well as if the invoice was sent manually, outside of Fiken. 
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="invoiceId">The invoiceId (primary key of the returned object) is returned in the GET all invoices call; not to be confused with invoiceNumber </param>
        /// <param name="updateInvoiceRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateInvoiceApiResponse"/>?&gt;</returns>
        Task<IUpdateInvoiceApiResponse?> UpdateInvoiceOrDefaultAsync(string companySlug, long invoiceId, UpdateInvoiceRequest updateInvoiceRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates invoice draft with provided id. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="draftId">The draftId (primary key of the returned object) is returned in the GET all drafts call. </param>
        /// <param name="invoiceishDraftRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateInvoiceDraftApiResponse"/>&gt;</returns>
        Task<IUpdateInvoiceDraftApiResponse> UpdateInvoiceDraftAsync(string companySlug, long draftId, InvoiceishDraftRequest invoiceishDraftRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates invoice draft with provided id. 
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="draftId">The draftId (primary key of the returned object) is returned in the GET all drafts call. </param>
        /// <param name="invoiceishDraftRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateInvoiceDraftApiResponse"/>?&gt;</returns>
        Task<IUpdateInvoiceDraftApiResponse?> UpdateInvoiceDraftOrDefaultAsync(string companySlug, long draftId, InvoiceishDraftRequest invoiceishDraftRequest, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IAddAttachmentToInvoiceApiResponse"/>
    /// </summary>
    public interface IAddAttachmentToInvoiceApiResponse : Fiken.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 201 Created
        /// </summary>
        /// <returns></returns>
        bool IsCreated { get; }
    }

    /// <summary>
    /// The <see cref="IAddAttachmentToInvoiceDraftApiResponse"/>
    /// </summary>
    public interface IAddAttachmentToInvoiceDraftApiResponse : Fiken.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 201 Created
        /// </summary>
        /// <returns></returns>
        bool IsCreated { get; }
    }

    /// <summary>
    /// The <see cref="ICreateInvoiceApiResponse"/>
    /// </summary>
    public interface ICreateInvoiceApiResponse : Fiken.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 201 Created
        /// </summary>
        /// <returns></returns>
        bool IsCreated { get; }
    }

    /// <summary>
    /// The <see cref="ICreateInvoiceCounterApiResponse"/>
    /// </summary>
    public interface ICreateInvoiceCounterApiResponse : Fiken.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 201 Created
        /// </summary>
        /// <returns></returns>
        bool IsCreated { get; }
    }

    /// <summary>
    /// The <see cref="ICreateInvoiceDraftApiResponse"/>
    /// </summary>
    public interface ICreateInvoiceDraftApiResponse : Fiken.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 201 Created
        /// </summary>
        /// <returns></returns>
        bool IsCreated { get; }
    }

    /// <summary>
    /// The <see cref="ICreateInvoiceFromDraftApiResponse"/>
    /// </summary>
    public interface ICreateInvoiceFromDraftApiResponse : Fiken.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 201 Created
        /// </summary>
        /// <returns></returns>
        bool IsCreated { get; }
    }

    /// <summary>
    /// The <see cref="IDeleteInvoiceDraftApiResponse"/>
    /// </summary>
    public interface IDeleteInvoiceDraftApiResponse : Fiken.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 204 NoContent
        /// </summary>
        /// <returns></returns>
        bool IsNoContent { get; }
    }

    /// <summary>
    /// The <see cref="IGetInvoiceApiResponse"/>
    /// </summary>
    public interface IGetInvoiceApiResponse : Fiken.Client.IApiResponse, IOk<Fiken.Model.InvoiceResult?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetInvoiceAttachmentsApiResponse"/>
    /// </summary>
    public interface IGetInvoiceAttachmentsApiResponse : Fiken.Client.IApiResponse, IOk<List<Attachment>?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetInvoiceCounterApiResponse"/>
    /// </summary>
    public interface IGetInvoiceCounterApiResponse : Fiken.Client.IApiResponse, IOk<Fiken.Model.Counter?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetInvoiceDraftApiResponse"/>
    /// </summary>
    public interface IGetInvoiceDraftApiResponse : Fiken.Client.IApiResponse, IOk<Fiken.Model.InvoiceishDraftResult?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetInvoiceDraftAttachmentsApiResponse"/>
    /// </summary>
    public interface IGetInvoiceDraftAttachmentsApiResponse : Fiken.Client.IApiResponse, IOk<List<Attachment>?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetInvoiceDraftsApiResponse"/>
    /// </summary>
    public interface IGetInvoiceDraftsApiResponse : Fiken.Client.IApiResponse, IOk<List<InvoiceishDraftResult>?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetInvoicesApiResponse"/>
    /// </summary>
    public interface IGetInvoicesApiResponse : Fiken.Client.IApiResponse, IOk<List<InvoiceResult>?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="ISendInvoiceApiResponse"/>
    /// </summary>
    public interface ISendInvoiceApiResponse : Fiken.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IUpdateInvoiceApiResponse"/>
    /// </summary>
    public interface IUpdateInvoiceApiResponse : Fiken.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IUpdateInvoiceDraftApiResponse"/>
    /// </summary>
    public interface IUpdateInvoiceDraftApiResponse : Fiken.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 201 Created
        /// </summary>
        /// <returns></returns>
        bool IsCreated { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class InvoicesApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnAddAttachmentToInvoice;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorAddAttachmentToInvoice;

        internal void ExecuteOnAddAttachmentToInvoice(InvoicesApi.AddAttachmentToInvoiceApiResponse apiResponse)
        {
            OnAddAttachmentToInvoice?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorAddAttachmentToInvoice(Exception exception)
        {
            OnErrorAddAttachmentToInvoice?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnAddAttachmentToInvoiceDraft;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorAddAttachmentToInvoiceDraft;

        internal void ExecuteOnAddAttachmentToInvoiceDraft(InvoicesApi.AddAttachmentToInvoiceDraftApiResponse apiResponse)
        {
            OnAddAttachmentToInvoiceDraft?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorAddAttachmentToInvoiceDraft(Exception exception)
        {
            OnErrorAddAttachmentToInvoiceDraft?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnCreateInvoice;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorCreateInvoice;

        internal void ExecuteOnCreateInvoice(InvoicesApi.CreateInvoiceApiResponse apiResponse)
        {
            OnCreateInvoice?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorCreateInvoice(Exception exception)
        {
            OnErrorCreateInvoice?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnCreateInvoiceCounter;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorCreateInvoiceCounter;

        internal void ExecuteOnCreateInvoiceCounter(InvoicesApi.CreateInvoiceCounterApiResponse apiResponse)
        {
            OnCreateInvoiceCounter?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorCreateInvoiceCounter(Exception exception)
        {
            OnErrorCreateInvoiceCounter?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnCreateInvoiceDraft;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorCreateInvoiceDraft;

        internal void ExecuteOnCreateInvoiceDraft(InvoicesApi.CreateInvoiceDraftApiResponse apiResponse)
        {
            OnCreateInvoiceDraft?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorCreateInvoiceDraft(Exception exception)
        {
            OnErrorCreateInvoiceDraft?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnCreateInvoiceFromDraft;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorCreateInvoiceFromDraft;

        internal void ExecuteOnCreateInvoiceFromDraft(InvoicesApi.CreateInvoiceFromDraftApiResponse apiResponse)
        {
            OnCreateInvoiceFromDraft?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorCreateInvoiceFromDraft(Exception exception)
        {
            OnErrorCreateInvoiceFromDraft?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnDeleteInvoiceDraft;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorDeleteInvoiceDraft;

        internal void ExecuteOnDeleteInvoiceDraft(InvoicesApi.DeleteInvoiceDraftApiResponse apiResponse)
        {
            OnDeleteInvoiceDraft?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDeleteInvoiceDraft(Exception exception)
        {
            OnErrorDeleteInvoiceDraft?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetInvoice;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetInvoice;

        internal void ExecuteOnGetInvoice(InvoicesApi.GetInvoiceApiResponse apiResponse)
        {
            OnGetInvoice?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetInvoice(Exception exception)
        {
            OnErrorGetInvoice?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetInvoiceAttachments;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetInvoiceAttachments;

        internal void ExecuteOnGetInvoiceAttachments(InvoicesApi.GetInvoiceAttachmentsApiResponse apiResponse)
        {
            OnGetInvoiceAttachments?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetInvoiceAttachments(Exception exception)
        {
            OnErrorGetInvoiceAttachments?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetInvoiceCounter;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetInvoiceCounter;

        internal void ExecuteOnGetInvoiceCounter(InvoicesApi.GetInvoiceCounterApiResponse apiResponse)
        {
            OnGetInvoiceCounter?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetInvoiceCounter(Exception exception)
        {
            OnErrorGetInvoiceCounter?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetInvoiceDraft;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetInvoiceDraft;

        internal void ExecuteOnGetInvoiceDraft(InvoicesApi.GetInvoiceDraftApiResponse apiResponse)
        {
            OnGetInvoiceDraft?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetInvoiceDraft(Exception exception)
        {
            OnErrorGetInvoiceDraft?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetInvoiceDraftAttachments;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetInvoiceDraftAttachments;

        internal void ExecuteOnGetInvoiceDraftAttachments(InvoicesApi.GetInvoiceDraftAttachmentsApiResponse apiResponse)
        {
            OnGetInvoiceDraftAttachments?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetInvoiceDraftAttachments(Exception exception)
        {
            OnErrorGetInvoiceDraftAttachments?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetInvoiceDrafts;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetInvoiceDrafts;

        internal void ExecuteOnGetInvoiceDrafts(InvoicesApi.GetInvoiceDraftsApiResponse apiResponse)
        {
            OnGetInvoiceDrafts?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetInvoiceDrafts(Exception exception)
        {
            OnErrorGetInvoiceDrafts?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetInvoices;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetInvoices;

        internal void ExecuteOnGetInvoices(InvoicesApi.GetInvoicesApiResponse apiResponse)
        {
            OnGetInvoices?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetInvoices(Exception exception)
        {
            OnErrorGetInvoices?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnSendInvoice;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorSendInvoice;

        internal void ExecuteOnSendInvoice(InvoicesApi.SendInvoiceApiResponse apiResponse)
        {
            OnSendInvoice?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorSendInvoice(Exception exception)
        {
            OnErrorSendInvoice?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnUpdateInvoice;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorUpdateInvoice;

        internal void ExecuteOnUpdateInvoice(InvoicesApi.UpdateInvoiceApiResponse apiResponse)
        {
            OnUpdateInvoice?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorUpdateInvoice(Exception exception)
        {
            OnErrorUpdateInvoice?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnUpdateInvoiceDraft;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorUpdateInvoiceDraft;

        internal void ExecuteOnUpdateInvoiceDraft(InvoicesApi.UpdateInvoiceDraftApiResponse apiResponse)
        {
            OnUpdateInvoiceDraft?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorUpdateInvoiceDraft(Exception exception)
        {
            OnErrorUpdateInvoiceDraft?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class InvoicesApi : IInvoicesApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<InvoicesApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public InvoicesApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="OauthTokenProvider"/>
        /// </summary>
        public TokenProvider<OAuthToken> OauthTokenProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="InvoicesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public InvoicesApi(ILogger<InvoicesApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, InvoicesApiEvents invoicesApiEvents,
            TokenProvider<OAuthToken> oauthTokenProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<InvoicesApi>();
            HttpClient = httpClient;
            Events = invoicesApiEvents;
            OauthTokenProvider = oauthTokenProvider;
        }

        partial void FormatAddAttachmentToInvoice(ref string companySlug, ref long invoiceId, ref Option<string> filename, ref Option<System.IO.Stream> file);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="companySlug"></param>
        /// <param name="filename"></param>
        /// <param name="file"></param>
        /// <returns></returns>
        private void ValidateAddAttachmentToInvoice(string companySlug, Option<string> filename, Option<System.IO.Stream> file)
        {
            if (companySlug == null)
                throw new ArgumentNullException(nameof(companySlug));

            if (filename.IsSet && filename.Value == null)
                throw new ArgumentNullException(nameof(filename));

            if (file.IsSet && file.Value == null)
                throw new ArgumentNullException(nameof(file));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="invoiceId"></param>
        /// <param name="filename"></param>
        /// <param name="file"></param>
        private void AfterAddAttachmentToInvoiceDefaultImplementation(IAddAttachmentToInvoiceApiResponse apiResponseLocalVar, string companySlug, long invoiceId, Option<string> filename, Option<System.IO.Stream> file)
        {
            bool suppressDefaultLog = false;
            AfterAddAttachmentToInvoice(ref suppressDefaultLog, apiResponseLocalVar, companySlug, invoiceId, filename, file);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="invoiceId"></param>
        /// <param name="filename"></param>
        /// <param name="file"></param>
        partial void AfterAddAttachmentToInvoice(ref bool suppressDefaultLog, IAddAttachmentToInvoiceApiResponse apiResponseLocalVar, string companySlug, long invoiceId, Option<string> filename, Option<System.IO.Stream> file);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="invoiceId"></param>
        /// <param name="filename"></param>
        /// <param name="file"></param>
        private void OnErrorAddAttachmentToInvoiceDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string companySlug, long invoiceId, Option<string> filename, Option<System.IO.Stream> file)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorAddAttachmentToInvoice(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, companySlug, invoiceId, filename, file);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="invoiceId"></param>
        /// <param name="filename"></param>
        /// <param name="file"></param>
        partial void OnErrorAddAttachmentToInvoice(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string companySlug, long invoiceId, Option<string> filename, Option<System.IO.Stream> file);

        /// <summary>
        ///  Creates and adds a new attachment to an Invoice
        /// </summary>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="invoiceId">The invoiceId (primary key of the returned object) is returned in the GET all invoices call; not to be confused with invoiceNumber </param>
        /// <param name="filename">The filename. Must end with either .png, .jpeg, .jpg, .gif or .pdf (optional)</param>
        /// <param name="file"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAddAttachmentToInvoiceApiResponse"/>&gt;</returns>
        public async Task<IAddAttachmentToInvoiceApiResponse?> AddAttachmentToInvoiceOrDefaultAsync(string companySlug, long invoiceId, Option<string> filename = default, Option<System.IO.Stream> file = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await AddAttachmentToInvoiceAsync(companySlug, invoiceId, filename, file, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  Creates and adds a new attachment to an Invoice
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="invoiceId">The invoiceId (primary key of the returned object) is returned in the GET all invoices call; not to be confused with invoiceNumber </param>
        /// <param name="filename">The filename. Must end with either .png, .jpeg, .jpg, .gif or .pdf (optional)</param>
        /// <param name="file"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAddAttachmentToInvoiceApiResponse"/>&gt;</returns>
        public async Task<IAddAttachmentToInvoiceApiResponse> AddAttachmentToInvoiceAsync(string companySlug, long invoiceId, Option<string> filename = default, Option<System.IO.Stream> file = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateAddAttachmentToInvoice(companySlug, filename, file);

                FormatAddAttachmentToInvoice(ref companySlug, ref invoiceId, ref filename, ref file);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/companies/{companySlug}/invoices/{invoiceId}/attachments";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BcompanySlug%7D", Uri.EscapeDataString(companySlug.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BinvoiceId%7D", Uri.EscapeDataString(invoiceId.ToString()));

                    MultipartContent multipartContentLocalVar = new MultipartContent();

                    httpRequestMessageLocalVar.Content = multipartContentLocalVar;

                    List<KeyValuePair<string?, string?>> formParameterLocalVars = new List<KeyValuePair<string?, string?>>();

                    multipartContentLocalVar.Add(new FormUrlEncodedContent(formParameterLocalVars));                    if (filename.IsSet)
                        formParameterLocalVars.Add(new KeyValuePair<string?, string?>("filename", ClientUtils.ParameterToString(filename.Value)));

                    if (file.IsSet)
                        multipartContentLocalVar.Add(new StreamContent(file.Value));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "multipart/form-data"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<AddAttachmentToInvoiceApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<AddAttachmentToInvoiceApiResponse>();

                        AddAttachmentToInvoiceApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/companies/{companySlug}/invoices/{invoiceId}/attachments", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterAddAttachmentToInvoiceDefaultImplementation(apiResponseLocalVar, companySlug, invoiceId, filename, file);

                        Events.ExecuteOnAddAttachmentToInvoice(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorAddAttachmentToInvoiceDefaultImplementation(e, "/companies/{companySlug}/invoices/{invoiceId}/attachments", uriBuilderLocalVar.Path, companySlug, invoiceId, filename, file);
                Events.ExecuteOnErrorAddAttachmentToInvoice(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="AddAttachmentToInvoiceApiResponse"/>
        /// </summary>
        public partial class AddAttachmentToInvoiceApiResponse : Fiken.Client.ApiResponse, IAddAttachmentToInvoiceApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<AddAttachmentToInvoiceApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="AddAttachmentToInvoiceApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public AddAttachmentToInvoiceApiResponse(ILogger<AddAttachmentToInvoiceApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public bool IsCreated => 201 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatAddAttachmentToInvoiceDraft(ref string companySlug, ref long draftId, ref Option<string> filename, ref Option<string> comment, ref Option<System.IO.Stream> file);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="companySlug"></param>
        /// <param name="filename"></param>
        /// <param name="comment"></param>
        /// <param name="file"></param>
        /// <returns></returns>
        private void ValidateAddAttachmentToInvoiceDraft(string companySlug, Option<string> filename, Option<string> comment, Option<System.IO.Stream> file)
        {
            if (companySlug == null)
                throw new ArgumentNullException(nameof(companySlug));

            if (filename.IsSet && filename.Value == null)
                throw new ArgumentNullException(nameof(filename));

            if (comment.IsSet && comment.Value == null)
                throw new ArgumentNullException(nameof(comment));

            if (file.IsSet && file.Value == null)
                throw new ArgumentNullException(nameof(file));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="draftId"></param>
        /// <param name="filename"></param>
        /// <param name="comment"></param>
        /// <param name="file"></param>
        private void AfterAddAttachmentToInvoiceDraftDefaultImplementation(IAddAttachmentToInvoiceDraftApiResponse apiResponseLocalVar, string companySlug, long draftId, Option<string> filename, Option<string> comment, Option<System.IO.Stream> file)
        {
            bool suppressDefaultLog = false;
            AfterAddAttachmentToInvoiceDraft(ref suppressDefaultLog, apiResponseLocalVar, companySlug, draftId, filename, comment, file);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="draftId"></param>
        /// <param name="filename"></param>
        /// <param name="comment"></param>
        /// <param name="file"></param>
        partial void AfterAddAttachmentToInvoiceDraft(ref bool suppressDefaultLog, IAddAttachmentToInvoiceDraftApiResponse apiResponseLocalVar, string companySlug, long draftId, Option<string> filename, Option<string> comment, Option<System.IO.Stream> file);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="draftId"></param>
        /// <param name="filename"></param>
        /// <param name="comment"></param>
        /// <param name="file"></param>
        private void OnErrorAddAttachmentToInvoiceDraftDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string companySlug, long draftId, Option<string> filename, Option<string> comment, Option<System.IO.Stream> file)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorAddAttachmentToInvoiceDraft(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, companySlug, draftId, filename, comment, file);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="draftId"></param>
        /// <param name="filename"></param>
        /// <param name="comment"></param>
        /// <param name="file"></param>
        partial void OnErrorAddAttachmentToInvoiceDraft(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string companySlug, long draftId, Option<string> filename, Option<string> comment, Option<System.IO.Stream> file);

        /// <summary>
        ///  Creates and adds a new attachment to an invoice draft
        /// </summary>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="draftId">The draftId (primary key of the returned object) is returned in the GET all drafts call. </param>
        /// <param name="filename">Required. The filename. Must end with either .png, .jpeg, .jpg, .gif or .pdf (optional)</param>
        /// <param name="comment">Not required. (optional)</param>
        /// <param name="file"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAddAttachmentToInvoiceDraftApiResponse"/>&gt;</returns>
        public async Task<IAddAttachmentToInvoiceDraftApiResponse?> AddAttachmentToInvoiceDraftOrDefaultAsync(string companySlug, long draftId, Option<string> filename = default, Option<string> comment = default, Option<System.IO.Stream> file = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await AddAttachmentToInvoiceDraftAsync(companySlug, draftId, filename, comment, file, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  Creates and adds a new attachment to an invoice draft
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="draftId">The draftId (primary key of the returned object) is returned in the GET all drafts call. </param>
        /// <param name="filename">Required. The filename. Must end with either .png, .jpeg, .jpg, .gif or .pdf (optional)</param>
        /// <param name="comment">Not required. (optional)</param>
        /// <param name="file"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAddAttachmentToInvoiceDraftApiResponse"/>&gt;</returns>
        public async Task<IAddAttachmentToInvoiceDraftApiResponse> AddAttachmentToInvoiceDraftAsync(string companySlug, long draftId, Option<string> filename = default, Option<string> comment = default, Option<System.IO.Stream> file = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateAddAttachmentToInvoiceDraft(companySlug, filename, comment, file);

                FormatAddAttachmentToInvoiceDraft(ref companySlug, ref draftId, ref filename, ref comment, ref file);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/companies/{companySlug}/invoices/drafts/{draftId}/attachments";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BcompanySlug%7D", Uri.EscapeDataString(companySlug.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BdraftId%7D", Uri.EscapeDataString(draftId.ToString()));

                    MultipartContent multipartContentLocalVar = new MultipartContent();

                    httpRequestMessageLocalVar.Content = multipartContentLocalVar;

                    List<KeyValuePair<string?, string?>> formParameterLocalVars = new List<KeyValuePair<string?, string?>>();

                    multipartContentLocalVar.Add(new FormUrlEncodedContent(formParameterLocalVars));                    if (filename.IsSet)
                        formParameterLocalVars.Add(new KeyValuePair<string?, string?>("filename", ClientUtils.ParameterToString(filename.Value)));

                    if (comment.IsSet)
                        formParameterLocalVars.Add(new KeyValuePair<string?, string?>("comment", ClientUtils.ParameterToString(comment.Value)));

                    if (file.IsSet)
                        multipartContentLocalVar.Add(new StreamContent(file.Value));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "multipart/form-data"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<AddAttachmentToInvoiceDraftApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<AddAttachmentToInvoiceDraftApiResponse>();

                        AddAttachmentToInvoiceDraftApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/companies/{companySlug}/invoices/drafts/{draftId}/attachments", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterAddAttachmentToInvoiceDraftDefaultImplementation(apiResponseLocalVar, companySlug, draftId, filename, comment, file);

                        Events.ExecuteOnAddAttachmentToInvoiceDraft(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorAddAttachmentToInvoiceDraftDefaultImplementation(e, "/companies/{companySlug}/invoices/drafts/{draftId}/attachments", uriBuilderLocalVar.Path, companySlug, draftId, filename, comment, file);
                Events.ExecuteOnErrorAddAttachmentToInvoiceDraft(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="AddAttachmentToInvoiceDraftApiResponse"/>
        /// </summary>
        public partial class AddAttachmentToInvoiceDraftApiResponse : Fiken.Client.ApiResponse, IAddAttachmentToInvoiceDraftApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<AddAttachmentToInvoiceDraftApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="AddAttachmentToInvoiceDraftApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public AddAttachmentToInvoiceDraftApiResponse(ILogger<AddAttachmentToInvoiceDraftApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public bool IsCreated => 201 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatCreateInvoice(ref string companySlug, InvoiceRequest invoiceRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="companySlug"></param>
        /// <param name="invoiceRequest"></param>
        /// <returns></returns>
        private void ValidateCreateInvoice(string companySlug, InvoiceRequest invoiceRequest)
        {
            if (companySlug == null)
                throw new ArgumentNullException(nameof(companySlug));

            if (invoiceRequest == null)
                throw new ArgumentNullException(nameof(invoiceRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="invoiceRequest"></param>
        private void AfterCreateInvoiceDefaultImplementation(ICreateInvoiceApiResponse apiResponseLocalVar, string companySlug, InvoiceRequest invoiceRequest)
        {
            bool suppressDefaultLog = false;
            AfterCreateInvoice(ref suppressDefaultLog, apiResponseLocalVar, companySlug, invoiceRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="invoiceRequest"></param>
        partial void AfterCreateInvoice(ref bool suppressDefaultLog, ICreateInvoiceApiResponse apiResponseLocalVar, string companySlug, InvoiceRequest invoiceRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="invoiceRequest"></param>
        private void OnErrorCreateInvoiceDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string companySlug, InvoiceRequest invoiceRequest)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorCreateInvoice(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, companySlug, invoiceRequest);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="invoiceRequest"></param>
        partial void OnErrorCreateInvoice(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string companySlug, InvoiceRequest invoiceRequest);

        /// <summary>
        ///  Creates an invoice. This corresponds to \&quot;Ny faktura\&quot; in Fiken. There are two types of invoice lines that can be added to an invoice line: product line or free text line. Provide a product Id if you are invoicing a product. All information regarding the price and VAT for this product will be added to the invoice. It is however also possible to override the unit amount by sending information in both fields \&quot;productId\&quot; and \&quot;unitAmount\&quot;. An invoice line can also be a free text line meaning that no existing product will be associated with the invoiced line. In this case all information regarding the price and VAT of the product or service to be invoiced must be provided. 
        /// </summary>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="invoiceRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateInvoiceApiResponse"/>&gt;</returns>
        public async Task<ICreateInvoiceApiResponse?> CreateInvoiceOrDefaultAsync(string companySlug, InvoiceRequest invoiceRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await CreateInvoiceAsync(companySlug, invoiceRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  Creates an invoice. This corresponds to \&quot;Ny faktura\&quot; in Fiken. There are two types of invoice lines that can be added to an invoice line: product line or free text line. Provide a product Id if you are invoicing a product. All information regarding the price and VAT for this product will be added to the invoice. It is however also possible to override the unit amount by sending information in both fields \&quot;productId\&quot; and \&quot;unitAmount\&quot;. An invoice line can also be a free text line meaning that no existing product will be associated with the invoiced line. In this case all information regarding the price and VAT of the product or service to be invoiced must be provided. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="invoiceRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateInvoiceApiResponse"/>&gt;</returns>
        public async Task<ICreateInvoiceApiResponse> CreateInvoiceAsync(string companySlug, InvoiceRequest invoiceRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateCreateInvoice(companySlug, invoiceRequest);

                FormatCreateInvoice(ref companySlug, invoiceRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/companies/{companySlug}/invoices";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BcompanySlug%7D", Uri.EscapeDataString(companySlug.ToString()));

                    httpRequestMessageLocalVar.Content = (invoiceRequest as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(invoiceRequest, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<CreateInvoiceApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<CreateInvoiceApiResponse>();

                        CreateInvoiceApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/companies/{companySlug}/invoices", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterCreateInvoiceDefaultImplementation(apiResponseLocalVar, companySlug, invoiceRequest);

                        Events.ExecuteOnCreateInvoice(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorCreateInvoiceDefaultImplementation(e, "/companies/{companySlug}/invoices", uriBuilderLocalVar.Path, companySlug, invoiceRequest);
                Events.ExecuteOnErrorCreateInvoice(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="CreateInvoiceApiResponse"/>
        /// </summary>
        public partial class CreateInvoiceApiResponse : Fiken.Client.ApiResponse, ICreateInvoiceApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<CreateInvoiceApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="CreateInvoiceApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public CreateInvoiceApiResponse(ILogger<CreateInvoiceApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public bool IsCreated => 201 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatCreateInvoiceCounter(ref string companySlug, Option<Counter> counter);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="companySlug"></param>
        /// <param name="counter"></param>
        /// <returns></returns>
        private void ValidateCreateInvoiceCounter(string companySlug, Option<Counter> counter)
        {
            if (companySlug == null)
                throw new ArgumentNullException(nameof(companySlug));

            if (counter.IsSet && counter.Value == null)
                throw new ArgumentNullException(nameof(counter));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="counter"></param>
        private void AfterCreateInvoiceCounterDefaultImplementation(ICreateInvoiceCounterApiResponse apiResponseLocalVar, string companySlug, Option<Counter> counter)
        {
            bool suppressDefaultLog = false;
            AfterCreateInvoiceCounter(ref suppressDefaultLog, apiResponseLocalVar, companySlug, counter);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="counter"></param>
        partial void AfterCreateInvoiceCounter(ref bool suppressDefaultLog, ICreateInvoiceCounterApiResponse apiResponseLocalVar, string companySlug, Option<Counter> counter);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="counter"></param>
        private void OnErrorCreateInvoiceCounterDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string companySlug, Option<Counter> counter)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorCreateInvoiceCounter(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, companySlug, counter);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="counter"></param>
        partial void OnErrorCreateInvoiceCounter(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string companySlug, Option<Counter> counter);

        /// <summary>
        ///  Creates the first invoice number which is then increased by one with every new invoice. By sending an empty request body the default is base number 10000 (the first invoice number will thus be 10001), but can be specified to another starting value.
        /// </summary>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="counter"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateInvoiceCounterApiResponse"/>&gt;</returns>
        public async Task<ICreateInvoiceCounterApiResponse?> CreateInvoiceCounterOrDefaultAsync(string companySlug, Option<Counter> counter = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await CreateInvoiceCounterAsync(companySlug, counter, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  Creates the first invoice number which is then increased by one with every new invoice. By sending an empty request body the default is base number 10000 (the first invoice number will thus be 10001), but can be specified to another starting value.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="counter"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateInvoiceCounterApiResponse"/>&gt;</returns>
        public async Task<ICreateInvoiceCounterApiResponse> CreateInvoiceCounterAsync(string companySlug, Option<Counter> counter = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateCreateInvoiceCounter(companySlug, counter);

                FormatCreateInvoiceCounter(ref companySlug, counter);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/companies/{companySlug}/invoices/counter";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BcompanySlug%7D", Uri.EscapeDataString(companySlug.ToString()));

                    if (counter.IsSet)
                        httpRequestMessageLocalVar.Content = (counter.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(counter.Value, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<CreateInvoiceCounterApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<CreateInvoiceCounterApiResponse>();

                        CreateInvoiceCounterApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/companies/{companySlug}/invoices/counter", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterCreateInvoiceCounterDefaultImplementation(apiResponseLocalVar, companySlug, counter);

                        Events.ExecuteOnCreateInvoiceCounter(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorCreateInvoiceCounterDefaultImplementation(e, "/companies/{companySlug}/invoices/counter", uriBuilderLocalVar.Path, companySlug, counter);
                Events.ExecuteOnErrorCreateInvoiceCounter(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="CreateInvoiceCounterApiResponse"/>
        /// </summary>
        public partial class CreateInvoiceCounterApiResponse : Fiken.Client.ApiResponse, ICreateInvoiceCounterApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<CreateInvoiceCounterApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="CreateInvoiceCounterApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public CreateInvoiceCounterApiResponse(ILogger<CreateInvoiceCounterApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public bool IsCreated => 201 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatCreateInvoiceDraft(ref string companySlug, InvoiceishDraftRequest invoiceishDraftRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="companySlug"></param>
        /// <param name="invoiceishDraftRequest"></param>
        /// <returns></returns>
        private void ValidateCreateInvoiceDraft(string companySlug, InvoiceishDraftRequest invoiceishDraftRequest)
        {
            if (companySlug == null)
                throw new ArgumentNullException(nameof(companySlug));

            if (invoiceishDraftRequest == null)
                throw new ArgumentNullException(nameof(invoiceishDraftRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="invoiceishDraftRequest"></param>
        private void AfterCreateInvoiceDraftDefaultImplementation(ICreateInvoiceDraftApiResponse apiResponseLocalVar, string companySlug, InvoiceishDraftRequest invoiceishDraftRequest)
        {
            bool suppressDefaultLog = false;
            AfterCreateInvoiceDraft(ref suppressDefaultLog, apiResponseLocalVar, companySlug, invoiceishDraftRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="invoiceishDraftRequest"></param>
        partial void AfterCreateInvoiceDraft(ref bool suppressDefaultLog, ICreateInvoiceDraftApiResponse apiResponseLocalVar, string companySlug, InvoiceishDraftRequest invoiceishDraftRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="invoiceishDraftRequest"></param>
        private void OnErrorCreateInvoiceDraftDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string companySlug, InvoiceishDraftRequest invoiceishDraftRequest)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorCreateInvoiceDraft(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, companySlug, invoiceishDraftRequest);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="invoiceishDraftRequest"></param>
        partial void OnErrorCreateInvoiceDraft(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string companySlug, InvoiceishDraftRequest invoiceishDraftRequest);

        /// <summary>
        ///  Creates an invoice draft.
        /// </summary>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="invoiceishDraftRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateInvoiceDraftApiResponse"/>&gt;</returns>
        public async Task<ICreateInvoiceDraftApiResponse?> CreateInvoiceDraftOrDefaultAsync(string companySlug, InvoiceishDraftRequest invoiceishDraftRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await CreateInvoiceDraftAsync(companySlug, invoiceishDraftRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  Creates an invoice draft.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="invoiceishDraftRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateInvoiceDraftApiResponse"/>&gt;</returns>
        public async Task<ICreateInvoiceDraftApiResponse> CreateInvoiceDraftAsync(string companySlug, InvoiceishDraftRequest invoiceishDraftRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateCreateInvoiceDraft(companySlug, invoiceishDraftRequest);

                FormatCreateInvoiceDraft(ref companySlug, invoiceishDraftRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/companies/{companySlug}/invoices/drafts";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BcompanySlug%7D", Uri.EscapeDataString(companySlug.ToString()));

                    httpRequestMessageLocalVar.Content = (invoiceishDraftRequest as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(invoiceishDraftRequest, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<CreateInvoiceDraftApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<CreateInvoiceDraftApiResponse>();

                        CreateInvoiceDraftApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/companies/{companySlug}/invoices/drafts", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterCreateInvoiceDraftDefaultImplementation(apiResponseLocalVar, companySlug, invoiceishDraftRequest);

                        Events.ExecuteOnCreateInvoiceDraft(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorCreateInvoiceDraftDefaultImplementation(e, "/companies/{companySlug}/invoices/drafts", uriBuilderLocalVar.Path, companySlug, invoiceishDraftRequest);
                Events.ExecuteOnErrorCreateInvoiceDraft(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="CreateInvoiceDraftApiResponse"/>
        /// </summary>
        public partial class CreateInvoiceDraftApiResponse : Fiken.Client.ApiResponse, ICreateInvoiceDraftApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<CreateInvoiceDraftApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="CreateInvoiceDraftApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public CreateInvoiceDraftApiResponse(ILogger<CreateInvoiceDraftApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public bool IsCreated => 201 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatCreateInvoiceFromDraft(ref string companySlug, ref long draftId);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="companySlug"></param>
        /// <returns></returns>
        private void ValidateCreateInvoiceFromDraft(string companySlug)
        {
            if (companySlug == null)
                throw new ArgumentNullException(nameof(companySlug));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="draftId"></param>
        private void AfterCreateInvoiceFromDraftDefaultImplementation(ICreateInvoiceFromDraftApiResponse apiResponseLocalVar, string companySlug, long draftId)
        {
            bool suppressDefaultLog = false;
            AfterCreateInvoiceFromDraft(ref suppressDefaultLog, apiResponseLocalVar, companySlug, draftId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="draftId"></param>
        partial void AfterCreateInvoiceFromDraft(ref bool suppressDefaultLog, ICreateInvoiceFromDraftApiResponse apiResponseLocalVar, string companySlug, long draftId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="draftId"></param>
        private void OnErrorCreateInvoiceFromDraftDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string companySlug, long draftId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorCreateInvoiceFromDraft(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, companySlug, draftId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="draftId"></param>
        partial void OnErrorCreateInvoiceFromDraft(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string companySlug, long draftId);

        /// <summary>
        ///  Creates an invoice from an already created draft.
        /// </summary>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="draftId">The draftId (primary key of the returned object) is returned in the GET all drafts call. </param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateInvoiceFromDraftApiResponse"/>&gt;</returns>
        public async Task<ICreateInvoiceFromDraftApiResponse?> CreateInvoiceFromDraftOrDefaultAsync(string companySlug, long draftId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await CreateInvoiceFromDraftAsync(companySlug, draftId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  Creates an invoice from an already created draft.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="draftId">The draftId (primary key of the returned object) is returned in the GET all drafts call. </param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateInvoiceFromDraftApiResponse"/>&gt;</returns>
        public async Task<ICreateInvoiceFromDraftApiResponse> CreateInvoiceFromDraftAsync(string companySlug, long draftId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateCreateInvoiceFromDraft(companySlug);

                FormatCreateInvoiceFromDraft(ref companySlug, ref draftId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/companies/{companySlug}/invoices/drafts/{draftId}/createInvoice";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BcompanySlug%7D", Uri.EscapeDataString(companySlug.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BdraftId%7D", Uri.EscapeDataString(draftId.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<CreateInvoiceFromDraftApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<CreateInvoiceFromDraftApiResponse>();

                        CreateInvoiceFromDraftApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/companies/{companySlug}/invoices/drafts/{draftId}/createInvoice", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterCreateInvoiceFromDraftDefaultImplementation(apiResponseLocalVar, companySlug, draftId);

                        Events.ExecuteOnCreateInvoiceFromDraft(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorCreateInvoiceFromDraftDefaultImplementation(e, "/companies/{companySlug}/invoices/drafts/{draftId}/createInvoice", uriBuilderLocalVar.Path, companySlug, draftId);
                Events.ExecuteOnErrorCreateInvoiceFromDraft(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="CreateInvoiceFromDraftApiResponse"/>
        /// </summary>
        public partial class CreateInvoiceFromDraftApiResponse : Fiken.Client.ApiResponse, ICreateInvoiceFromDraftApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<CreateInvoiceFromDraftApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="CreateInvoiceFromDraftApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public CreateInvoiceFromDraftApiResponse(ILogger<CreateInvoiceFromDraftApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public bool IsCreated => 201 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatDeleteInvoiceDraft(ref string companySlug, ref long draftId);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="companySlug"></param>
        /// <returns></returns>
        private void ValidateDeleteInvoiceDraft(string companySlug)
        {
            if (companySlug == null)
                throw new ArgumentNullException(nameof(companySlug));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="draftId"></param>
        private void AfterDeleteInvoiceDraftDefaultImplementation(IDeleteInvoiceDraftApiResponse apiResponseLocalVar, string companySlug, long draftId)
        {
            bool suppressDefaultLog = false;
            AfterDeleteInvoiceDraft(ref suppressDefaultLog, apiResponseLocalVar, companySlug, draftId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="draftId"></param>
        partial void AfterDeleteInvoiceDraft(ref bool suppressDefaultLog, IDeleteInvoiceDraftApiResponse apiResponseLocalVar, string companySlug, long draftId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="draftId"></param>
        private void OnErrorDeleteInvoiceDraftDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string companySlug, long draftId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorDeleteInvoiceDraft(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, companySlug, draftId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="draftId"></param>
        partial void OnErrorDeleteInvoiceDraft(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string companySlug, long draftId);

        /// <summary>
        ///  Delete invoice draft with specified id.
        /// </summary>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="draftId">The draftId (primary key of the returned object) is returned in the GET all drafts call. </param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteInvoiceDraftApiResponse"/>&gt;</returns>
        public async Task<IDeleteInvoiceDraftApiResponse?> DeleteInvoiceDraftOrDefaultAsync(string companySlug, long draftId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DeleteInvoiceDraftAsync(companySlug, draftId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  Delete invoice draft with specified id.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="draftId">The draftId (primary key of the returned object) is returned in the GET all drafts call. </param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteInvoiceDraftApiResponse"/>&gt;</returns>
        public async Task<IDeleteInvoiceDraftApiResponse> DeleteInvoiceDraftAsync(string companySlug, long draftId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateDeleteInvoiceDraft(companySlug);

                FormatDeleteInvoiceDraft(ref companySlug, ref draftId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/companies/{companySlug}/invoices/drafts/{draftId}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BcompanySlug%7D", Uri.EscapeDataString(companySlug.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BdraftId%7D", Uri.EscapeDataString(draftId.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    httpRequestMessageLocalVar.Method = HttpMethod.Delete;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<DeleteInvoiceDraftApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DeleteInvoiceDraftApiResponse>();

                        DeleteInvoiceDraftApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/companies/{companySlug}/invoices/drafts/{draftId}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterDeleteInvoiceDraftDefaultImplementation(apiResponseLocalVar, companySlug, draftId);

                        Events.ExecuteOnDeleteInvoiceDraft(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDeleteInvoiceDraftDefaultImplementation(e, "/companies/{companySlug}/invoices/drafts/{draftId}", uriBuilderLocalVar.Path, companySlug, draftId);
                Events.ExecuteOnErrorDeleteInvoiceDraft(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DeleteInvoiceDraftApiResponse"/>
        /// </summary>
        public partial class DeleteInvoiceDraftApiResponse : Fiken.Client.ApiResponse, IDeleteInvoiceDraftApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DeleteInvoiceDraftApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DeleteInvoiceDraftApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeleteInvoiceDraftApiResponse(ILogger<DeleteInvoiceDraftApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 204 NoContent
            /// </summary>
            /// <returns></returns>
            public bool IsNoContent => 204 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetInvoice(ref string companySlug, ref long invoiceId);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="companySlug"></param>
        /// <returns></returns>
        private void ValidateGetInvoice(string companySlug)
        {
            if (companySlug == null)
                throw new ArgumentNullException(nameof(companySlug));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="invoiceId"></param>
        private void AfterGetInvoiceDefaultImplementation(IGetInvoiceApiResponse apiResponseLocalVar, string companySlug, long invoiceId)
        {
            bool suppressDefaultLog = false;
            AfterGetInvoice(ref suppressDefaultLog, apiResponseLocalVar, companySlug, invoiceId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="invoiceId"></param>
        partial void AfterGetInvoice(ref bool suppressDefaultLog, IGetInvoiceApiResponse apiResponseLocalVar, string companySlug, long invoiceId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="invoiceId"></param>
        private void OnErrorGetInvoiceDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string companySlug, long invoiceId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetInvoice(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, companySlug, invoiceId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="invoiceId"></param>
        partial void OnErrorGetInvoice(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string companySlug, long invoiceId);

        /// <summary>
        ///  Returns invoice with specified id.
        /// </summary>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="invoiceId">The invoiceId (primary key of the returned object) is returned in the GET all invoices call; not to be confused with invoiceNumber </param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetInvoiceApiResponse"/>&gt;</returns>
        public async Task<IGetInvoiceApiResponse?> GetInvoiceOrDefaultAsync(string companySlug, long invoiceId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetInvoiceAsync(companySlug, invoiceId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  Returns invoice with specified id.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="invoiceId">The invoiceId (primary key of the returned object) is returned in the GET all invoices call; not to be confused with invoiceNumber </param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetInvoiceApiResponse"/>&gt;</returns>
        public async Task<IGetInvoiceApiResponse> GetInvoiceAsync(string companySlug, long invoiceId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetInvoice(companySlug);

                FormatGetInvoice(ref companySlug, ref invoiceId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/companies/{companySlug}/invoices/{invoiceId}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BcompanySlug%7D", Uri.EscapeDataString(companySlug.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BinvoiceId%7D", Uri.EscapeDataString(invoiceId.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetInvoiceApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetInvoiceApiResponse>();

                        GetInvoiceApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/companies/{companySlug}/invoices/{invoiceId}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetInvoiceDefaultImplementation(apiResponseLocalVar, companySlug, invoiceId);

                        Events.ExecuteOnGetInvoice(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetInvoiceDefaultImplementation(e, "/companies/{companySlug}/invoices/{invoiceId}", uriBuilderLocalVar.Path, companySlug, invoiceId);
                Events.ExecuteOnErrorGetInvoice(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetInvoiceApiResponse"/>
        /// </summary>
        public partial class GetInvoiceApiResponse : Fiken.Client.ApiResponse, IGetInvoiceApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetInvoiceApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetInvoiceApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetInvoiceApiResponse(ILogger<GetInvoiceApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Fiken.Model.InvoiceResult? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Fiken.Model.InvoiceResult>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Fiken.Model.InvoiceResult? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetInvoiceAttachments(ref string companySlug, ref long invoiceId);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="companySlug"></param>
        /// <returns></returns>
        private void ValidateGetInvoiceAttachments(string companySlug)
        {
            if (companySlug == null)
                throw new ArgumentNullException(nameof(companySlug));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="invoiceId"></param>
        private void AfterGetInvoiceAttachmentsDefaultImplementation(IGetInvoiceAttachmentsApiResponse apiResponseLocalVar, string companySlug, long invoiceId)
        {
            bool suppressDefaultLog = false;
            AfterGetInvoiceAttachments(ref suppressDefaultLog, apiResponseLocalVar, companySlug, invoiceId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="invoiceId"></param>
        partial void AfterGetInvoiceAttachments(ref bool suppressDefaultLog, IGetInvoiceAttachmentsApiResponse apiResponseLocalVar, string companySlug, long invoiceId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="invoiceId"></param>
        private void OnErrorGetInvoiceAttachmentsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string companySlug, long invoiceId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetInvoiceAttachments(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, companySlug, invoiceId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="invoiceId"></param>
        partial void OnErrorGetInvoiceAttachments(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string companySlug, long invoiceId);

        /// <summary>
        ///  Returns all attachments for a given Invoice
        /// </summary>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="invoiceId">The invoiceId (primary key of the returned object) is returned in the GET all invoices call; not to be confused with invoiceNumber </param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetInvoiceAttachmentsApiResponse"/>&gt;</returns>
        public async Task<IGetInvoiceAttachmentsApiResponse?> GetInvoiceAttachmentsOrDefaultAsync(string companySlug, long invoiceId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetInvoiceAttachmentsAsync(companySlug, invoiceId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  Returns all attachments for a given Invoice
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="invoiceId">The invoiceId (primary key of the returned object) is returned in the GET all invoices call; not to be confused with invoiceNumber </param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetInvoiceAttachmentsApiResponse"/>&gt;</returns>
        public async Task<IGetInvoiceAttachmentsApiResponse> GetInvoiceAttachmentsAsync(string companySlug, long invoiceId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetInvoiceAttachments(companySlug);

                FormatGetInvoiceAttachments(ref companySlug, ref invoiceId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/companies/{companySlug}/invoices/{invoiceId}/attachments";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BcompanySlug%7D", Uri.EscapeDataString(companySlug.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BinvoiceId%7D", Uri.EscapeDataString(invoiceId.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetInvoiceAttachmentsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetInvoiceAttachmentsApiResponse>();

                        GetInvoiceAttachmentsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/companies/{companySlug}/invoices/{invoiceId}/attachments", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetInvoiceAttachmentsDefaultImplementation(apiResponseLocalVar, companySlug, invoiceId);

                        Events.ExecuteOnGetInvoiceAttachments(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetInvoiceAttachmentsDefaultImplementation(e, "/companies/{companySlug}/invoices/{invoiceId}/attachments", uriBuilderLocalVar.Path, companySlug, invoiceId);
                Events.ExecuteOnErrorGetInvoiceAttachments(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetInvoiceAttachmentsApiResponse"/>
        /// </summary>
        public partial class GetInvoiceAttachmentsApiResponse : Fiken.Client.ApiResponse, IGetInvoiceAttachmentsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetInvoiceAttachmentsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetInvoiceAttachmentsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetInvoiceAttachmentsApiResponse(ILogger<GetInvoiceAttachmentsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<Attachment>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<Attachment>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<Attachment>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetInvoiceCounter(ref string companySlug);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="companySlug"></param>
        /// <returns></returns>
        private void ValidateGetInvoiceCounter(string companySlug)
        {
            if (companySlug == null)
                throw new ArgumentNullException(nameof(companySlug));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companySlug"></param>
        private void AfterGetInvoiceCounterDefaultImplementation(IGetInvoiceCounterApiResponse apiResponseLocalVar, string companySlug)
        {
            bool suppressDefaultLog = false;
            AfterGetInvoiceCounter(ref suppressDefaultLog, apiResponseLocalVar, companySlug);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companySlug"></param>
        partial void AfterGetInvoiceCounter(ref bool suppressDefaultLog, IGetInvoiceCounterApiResponse apiResponseLocalVar, string companySlug);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companySlug"></param>
        private void OnErrorGetInvoiceCounterDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string companySlug)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetInvoiceCounter(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, companySlug);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companySlug"></param>
        partial void OnErrorGetInvoiceCounter(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string companySlug);

        /// <summary>
        ///  Retrieves the counter for invoices if it has been created 
        /// </summary>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetInvoiceCounterApiResponse"/>&gt;</returns>
        public async Task<IGetInvoiceCounterApiResponse?> GetInvoiceCounterOrDefaultAsync(string companySlug, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetInvoiceCounterAsync(companySlug, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  Retrieves the counter for invoices if it has been created 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetInvoiceCounterApiResponse"/>&gt;</returns>
        public async Task<IGetInvoiceCounterApiResponse> GetInvoiceCounterAsync(string companySlug, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetInvoiceCounter(companySlug);

                FormatGetInvoiceCounter(ref companySlug);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/companies/{companySlug}/invoices/counter";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BcompanySlug%7D", Uri.EscapeDataString(companySlug.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetInvoiceCounterApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetInvoiceCounterApiResponse>();

                        GetInvoiceCounterApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/companies/{companySlug}/invoices/counter", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetInvoiceCounterDefaultImplementation(apiResponseLocalVar, companySlug);

                        Events.ExecuteOnGetInvoiceCounter(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetInvoiceCounterDefaultImplementation(e, "/companies/{companySlug}/invoices/counter", uriBuilderLocalVar.Path, companySlug);
                Events.ExecuteOnErrorGetInvoiceCounter(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetInvoiceCounterApiResponse"/>
        /// </summary>
        public partial class GetInvoiceCounterApiResponse : Fiken.Client.ApiResponse, IGetInvoiceCounterApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetInvoiceCounterApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetInvoiceCounterApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetInvoiceCounterApiResponse(ILogger<GetInvoiceCounterApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Fiken.Model.Counter? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Fiken.Model.Counter>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Fiken.Model.Counter? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetInvoiceDraft(ref string companySlug, ref long draftId);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="companySlug"></param>
        /// <returns></returns>
        private void ValidateGetInvoiceDraft(string companySlug)
        {
            if (companySlug == null)
                throw new ArgumentNullException(nameof(companySlug));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="draftId"></param>
        private void AfterGetInvoiceDraftDefaultImplementation(IGetInvoiceDraftApiResponse apiResponseLocalVar, string companySlug, long draftId)
        {
            bool suppressDefaultLog = false;
            AfterGetInvoiceDraft(ref suppressDefaultLog, apiResponseLocalVar, companySlug, draftId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="draftId"></param>
        partial void AfterGetInvoiceDraft(ref bool suppressDefaultLog, IGetInvoiceDraftApiResponse apiResponseLocalVar, string companySlug, long draftId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="draftId"></param>
        private void OnErrorGetInvoiceDraftDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string companySlug, long draftId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetInvoiceDraft(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, companySlug, draftId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="draftId"></param>
        partial void OnErrorGetInvoiceDraft(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string companySlug, long draftId);

        /// <summary>
        ///  Returns invoice draft with specified id.
        /// </summary>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="draftId">The draftId (primary key of the returned object) is returned in the GET all drafts call. </param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetInvoiceDraftApiResponse"/>&gt;</returns>
        public async Task<IGetInvoiceDraftApiResponse?> GetInvoiceDraftOrDefaultAsync(string companySlug, long draftId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetInvoiceDraftAsync(companySlug, draftId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  Returns invoice draft with specified id.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="draftId">The draftId (primary key of the returned object) is returned in the GET all drafts call. </param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetInvoiceDraftApiResponse"/>&gt;</returns>
        public async Task<IGetInvoiceDraftApiResponse> GetInvoiceDraftAsync(string companySlug, long draftId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetInvoiceDraft(companySlug);

                FormatGetInvoiceDraft(ref companySlug, ref draftId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/companies/{companySlug}/invoices/drafts/{draftId}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BcompanySlug%7D", Uri.EscapeDataString(companySlug.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BdraftId%7D", Uri.EscapeDataString(draftId.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetInvoiceDraftApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetInvoiceDraftApiResponse>();

                        GetInvoiceDraftApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/companies/{companySlug}/invoices/drafts/{draftId}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetInvoiceDraftDefaultImplementation(apiResponseLocalVar, companySlug, draftId);

                        Events.ExecuteOnGetInvoiceDraft(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetInvoiceDraftDefaultImplementation(e, "/companies/{companySlug}/invoices/drafts/{draftId}", uriBuilderLocalVar.Path, companySlug, draftId);
                Events.ExecuteOnErrorGetInvoiceDraft(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetInvoiceDraftApiResponse"/>
        /// </summary>
        public partial class GetInvoiceDraftApiResponse : Fiken.Client.ApiResponse, IGetInvoiceDraftApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetInvoiceDraftApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetInvoiceDraftApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetInvoiceDraftApiResponse(ILogger<GetInvoiceDraftApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Fiken.Model.InvoiceishDraftResult? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Fiken.Model.InvoiceishDraftResult>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Fiken.Model.InvoiceishDraftResult? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetInvoiceDraftAttachments(ref string companySlug, ref long draftId);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="companySlug"></param>
        /// <returns></returns>
        private void ValidateGetInvoiceDraftAttachments(string companySlug)
        {
            if (companySlug == null)
                throw new ArgumentNullException(nameof(companySlug));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="draftId"></param>
        private void AfterGetInvoiceDraftAttachmentsDefaultImplementation(IGetInvoiceDraftAttachmentsApiResponse apiResponseLocalVar, string companySlug, long draftId)
        {
            bool suppressDefaultLog = false;
            AfterGetInvoiceDraftAttachments(ref suppressDefaultLog, apiResponseLocalVar, companySlug, draftId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="draftId"></param>
        partial void AfterGetInvoiceDraftAttachments(ref bool suppressDefaultLog, IGetInvoiceDraftAttachmentsApiResponse apiResponseLocalVar, string companySlug, long draftId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="draftId"></param>
        private void OnErrorGetInvoiceDraftAttachmentsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string companySlug, long draftId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetInvoiceDraftAttachments(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, companySlug, draftId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="draftId"></param>
        partial void OnErrorGetInvoiceDraftAttachments(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string companySlug, long draftId);

        /// <summary>
        ///  Returns all attachments for specified draft.
        /// </summary>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="draftId">The draftId (primary key of the returned object) is returned in the GET all drafts call. </param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetInvoiceDraftAttachmentsApiResponse"/>&gt;</returns>
        public async Task<IGetInvoiceDraftAttachmentsApiResponse?> GetInvoiceDraftAttachmentsOrDefaultAsync(string companySlug, long draftId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetInvoiceDraftAttachmentsAsync(companySlug, draftId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  Returns all attachments for specified draft.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="draftId">The draftId (primary key of the returned object) is returned in the GET all drafts call. </param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetInvoiceDraftAttachmentsApiResponse"/>&gt;</returns>
        public async Task<IGetInvoiceDraftAttachmentsApiResponse> GetInvoiceDraftAttachmentsAsync(string companySlug, long draftId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetInvoiceDraftAttachments(companySlug);

                FormatGetInvoiceDraftAttachments(ref companySlug, ref draftId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/companies/{companySlug}/invoices/drafts/{draftId}/attachments";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BcompanySlug%7D", Uri.EscapeDataString(companySlug.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BdraftId%7D", Uri.EscapeDataString(draftId.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetInvoiceDraftAttachmentsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetInvoiceDraftAttachmentsApiResponse>();

                        GetInvoiceDraftAttachmentsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/companies/{companySlug}/invoices/drafts/{draftId}/attachments", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetInvoiceDraftAttachmentsDefaultImplementation(apiResponseLocalVar, companySlug, draftId);

                        Events.ExecuteOnGetInvoiceDraftAttachments(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetInvoiceDraftAttachmentsDefaultImplementation(e, "/companies/{companySlug}/invoices/drafts/{draftId}/attachments", uriBuilderLocalVar.Path, companySlug, draftId);
                Events.ExecuteOnErrorGetInvoiceDraftAttachments(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetInvoiceDraftAttachmentsApiResponse"/>
        /// </summary>
        public partial class GetInvoiceDraftAttachmentsApiResponse : Fiken.Client.ApiResponse, IGetInvoiceDraftAttachmentsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetInvoiceDraftAttachmentsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetInvoiceDraftAttachmentsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetInvoiceDraftAttachmentsApiResponse(ILogger<GetInvoiceDraftAttachmentsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<Attachment>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<Attachment>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<Attachment>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetInvoiceDrafts(ref string companySlug, ref Option<int> page, ref Option<int> pageSize, ref Option<string> orderReference, ref Option<Guid> uuid);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="companySlug"></param>
        /// <param name="orderReference"></param>
        /// <returns></returns>
        private void ValidateGetInvoiceDrafts(string companySlug, Option<string> orderReference)
        {
            if (companySlug == null)
                throw new ArgumentNullException(nameof(companySlug));

            if (orderReference.IsSet && orderReference.Value == null)
                throw new ArgumentNullException(nameof(orderReference));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="orderReference"></param>
        /// <param name="uuid"></param>
        private void AfterGetInvoiceDraftsDefaultImplementation(IGetInvoiceDraftsApiResponse apiResponseLocalVar, string companySlug, Option<int> page, Option<int> pageSize, Option<string> orderReference, Option<Guid> uuid)
        {
            bool suppressDefaultLog = false;
            AfterGetInvoiceDrafts(ref suppressDefaultLog, apiResponseLocalVar, companySlug, page, pageSize, orderReference, uuid);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="orderReference"></param>
        /// <param name="uuid"></param>
        partial void AfterGetInvoiceDrafts(ref bool suppressDefaultLog, IGetInvoiceDraftsApiResponse apiResponseLocalVar, string companySlug, Option<int> page, Option<int> pageSize, Option<string> orderReference, Option<Guid> uuid);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="orderReference"></param>
        /// <param name="uuid"></param>
        private void OnErrorGetInvoiceDraftsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string companySlug, Option<int> page, Option<int> pageSize, Option<string> orderReference, Option<Guid> uuid)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetInvoiceDrafts(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, companySlug, page, pageSize, orderReference, uuid);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="orderReference"></param>
        /// <param name="uuid"></param>
        partial void OnErrorGetInvoiceDrafts(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string companySlug, Option<int> page, Option<int> pageSize, Option<string> orderReference, Option<Guid> uuid);

        /// <summary>
        ///  Returns all invoice drafts for given company.
        /// </summary>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="page">Returns the number of the page to return. Valid page values are integers from 0 to the total number of pages. Default value is 0.  (optional, default to 0)</param>
        /// <param name="pageSize">Defines the number of entries to return on each page. Maximum number of results that can be returned at one time are 100. Default value is 25.  (optional, default to 25)</param>
        /// <param name="orderReference">Filter based on order reference for a given invoice draft (optional)</param>
        /// <param name="uuid">Filter based on the UUID of the draft. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetInvoiceDraftsApiResponse"/>&gt;</returns>
        public async Task<IGetInvoiceDraftsApiResponse?> GetInvoiceDraftsOrDefaultAsync(string companySlug, Option<int> page = default, Option<int> pageSize = default, Option<string> orderReference = default, Option<Guid> uuid = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetInvoiceDraftsAsync(companySlug, page, pageSize, orderReference, uuid, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  Returns all invoice drafts for given company.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="page">Returns the number of the page to return. Valid page values are integers from 0 to the total number of pages. Default value is 0.  (optional, default to 0)</param>
        /// <param name="pageSize">Defines the number of entries to return on each page. Maximum number of results that can be returned at one time are 100. Default value is 25.  (optional, default to 25)</param>
        /// <param name="orderReference">Filter based on order reference for a given invoice draft (optional)</param>
        /// <param name="uuid">Filter based on the UUID of the draft. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetInvoiceDraftsApiResponse"/>&gt;</returns>
        public async Task<IGetInvoiceDraftsApiResponse> GetInvoiceDraftsAsync(string companySlug, Option<int> page = default, Option<int> pageSize = default, Option<string> orderReference = default, Option<Guid> uuid = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetInvoiceDrafts(companySlug, orderReference);

                FormatGetInvoiceDrafts(ref companySlug, ref page, ref pageSize, ref orderReference, ref uuid);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/companies/{companySlug}/invoices/drafts";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BcompanySlug%7D", Uri.EscapeDataString(companySlug.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (page.IsSet)
                        parseQueryStringLocalVar["page"] = ClientUtils.ParameterToString(page.Value);

                    if (pageSize.IsSet)
                        parseQueryStringLocalVar["pageSize"] = ClientUtils.ParameterToString(pageSize.Value);

                    if (orderReference.IsSet)
                        parseQueryStringLocalVar["orderReference"] = ClientUtils.ParameterToString(orderReference.Value);

                    if (uuid.IsSet)
                        parseQueryStringLocalVar["uuid"] = ClientUtils.ParameterToString(uuid.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetInvoiceDraftsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetInvoiceDraftsApiResponse>();

                        GetInvoiceDraftsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/companies/{companySlug}/invoices/drafts", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetInvoiceDraftsDefaultImplementation(apiResponseLocalVar, companySlug, page, pageSize, orderReference, uuid);

                        Events.ExecuteOnGetInvoiceDrafts(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetInvoiceDraftsDefaultImplementation(e, "/companies/{companySlug}/invoices/drafts", uriBuilderLocalVar.Path, companySlug, page, pageSize, orderReference, uuid);
                Events.ExecuteOnErrorGetInvoiceDrafts(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetInvoiceDraftsApiResponse"/>
        /// </summary>
        public partial class GetInvoiceDraftsApiResponse : Fiken.Client.ApiResponse, IGetInvoiceDraftsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetInvoiceDraftsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetInvoiceDraftsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetInvoiceDraftsApiResponse(ILogger<GetInvoiceDraftsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<InvoiceishDraftResult>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<InvoiceishDraftResult>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<InvoiceishDraftResult>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetInvoices(ref string companySlug, ref Option<int> page, ref Option<int> pageSize, ref Option<DateOnly> issueDate, ref Option<DateOnly> issueDateLe, ref Option<DateOnly> issueDateLt, ref Option<DateOnly> issueDateGe, ref Option<DateOnly> issueDateGt, ref Option<DateOnly> lastModified, ref Option<DateOnly> lastModifiedLe, ref Option<DateOnly> lastModifiedLt, ref Option<DateOnly> lastModifiedGe, ref Option<DateOnly> lastModifiedGt, ref Option<DateOnly> dueDate, ref Option<DateOnly> dueDateLe, ref Option<DateOnly> dueDateLt, ref Option<DateOnly> dueDateGe, ref Option<DateOnly> dueDateGt, ref Option<long> customerId, ref Option<bool> settled, ref Option<string> orderReference, ref Option<Guid> invoiceDraftUuid, ref Option<string> invoiceNumber);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="companySlug"></param>
        /// <param name="orderReference"></param>
        /// <param name="invoiceNumber"></param>
        /// <returns></returns>
        private void ValidateGetInvoices(string companySlug, Option<string> orderReference, Option<string> invoiceNumber)
        {
            if (companySlug == null)
                throw new ArgumentNullException(nameof(companySlug));

            if (orderReference.IsSet && orderReference.Value == null)
                throw new ArgumentNullException(nameof(orderReference));

            if (invoiceNumber.IsSet && invoiceNumber.Value == null)
                throw new ArgumentNullException(nameof(invoiceNumber));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="issueDate"></param>
        /// <param name="issueDateLe"></param>
        /// <param name="issueDateLt"></param>
        /// <param name="issueDateGe"></param>
        /// <param name="issueDateGt"></param>
        /// <param name="lastModified"></param>
        /// <param name="lastModifiedLe"></param>
        /// <param name="lastModifiedLt"></param>
        /// <param name="lastModifiedGe"></param>
        /// <param name="lastModifiedGt"></param>
        /// <param name="dueDate"></param>
        /// <param name="dueDateLe"></param>
        /// <param name="dueDateLt"></param>
        /// <param name="dueDateGe"></param>
        /// <param name="dueDateGt"></param>
        /// <param name="customerId"></param>
        /// <param name="settled"></param>
        /// <param name="orderReference"></param>
        /// <param name="invoiceDraftUuid"></param>
        /// <param name="invoiceNumber"></param>
        private void AfterGetInvoicesDefaultImplementation(IGetInvoicesApiResponse apiResponseLocalVar, string companySlug, Option<int> page, Option<int> pageSize, Option<DateOnly> issueDate, Option<DateOnly> issueDateLe, Option<DateOnly> issueDateLt, Option<DateOnly> issueDateGe, Option<DateOnly> issueDateGt, Option<DateOnly> lastModified, Option<DateOnly> lastModifiedLe, Option<DateOnly> lastModifiedLt, Option<DateOnly> lastModifiedGe, Option<DateOnly> lastModifiedGt, Option<DateOnly> dueDate, Option<DateOnly> dueDateLe, Option<DateOnly> dueDateLt, Option<DateOnly> dueDateGe, Option<DateOnly> dueDateGt, Option<long> customerId, Option<bool> settled, Option<string> orderReference, Option<Guid> invoiceDraftUuid, Option<string> invoiceNumber)
        {
            bool suppressDefaultLog = false;
            AfterGetInvoices(ref suppressDefaultLog, apiResponseLocalVar, companySlug, page, pageSize, issueDate, issueDateLe, issueDateLt, issueDateGe, issueDateGt, lastModified, lastModifiedLe, lastModifiedLt, lastModifiedGe, lastModifiedGt, dueDate, dueDateLe, dueDateLt, dueDateGe, dueDateGt, customerId, settled, orderReference, invoiceDraftUuid, invoiceNumber);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="issueDate"></param>
        /// <param name="issueDateLe"></param>
        /// <param name="issueDateLt"></param>
        /// <param name="issueDateGe"></param>
        /// <param name="issueDateGt"></param>
        /// <param name="lastModified"></param>
        /// <param name="lastModifiedLe"></param>
        /// <param name="lastModifiedLt"></param>
        /// <param name="lastModifiedGe"></param>
        /// <param name="lastModifiedGt"></param>
        /// <param name="dueDate"></param>
        /// <param name="dueDateLe"></param>
        /// <param name="dueDateLt"></param>
        /// <param name="dueDateGe"></param>
        /// <param name="dueDateGt"></param>
        /// <param name="customerId"></param>
        /// <param name="settled"></param>
        /// <param name="orderReference"></param>
        /// <param name="invoiceDraftUuid"></param>
        /// <param name="invoiceNumber"></param>
        partial void AfterGetInvoices(ref bool suppressDefaultLog, IGetInvoicesApiResponse apiResponseLocalVar, string companySlug, Option<int> page, Option<int> pageSize, Option<DateOnly> issueDate, Option<DateOnly> issueDateLe, Option<DateOnly> issueDateLt, Option<DateOnly> issueDateGe, Option<DateOnly> issueDateGt, Option<DateOnly> lastModified, Option<DateOnly> lastModifiedLe, Option<DateOnly> lastModifiedLt, Option<DateOnly> lastModifiedGe, Option<DateOnly> lastModifiedGt, Option<DateOnly> dueDate, Option<DateOnly> dueDateLe, Option<DateOnly> dueDateLt, Option<DateOnly> dueDateGe, Option<DateOnly> dueDateGt, Option<long> customerId, Option<bool> settled, Option<string> orderReference, Option<Guid> invoiceDraftUuid, Option<string> invoiceNumber);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="issueDate"></param>
        /// <param name="issueDateLe"></param>
        /// <param name="issueDateLt"></param>
        /// <param name="issueDateGe"></param>
        /// <param name="issueDateGt"></param>
        /// <param name="lastModified"></param>
        /// <param name="lastModifiedLe"></param>
        /// <param name="lastModifiedLt"></param>
        /// <param name="lastModifiedGe"></param>
        /// <param name="lastModifiedGt"></param>
        /// <param name="dueDate"></param>
        /// <param name="dueDateLe"></param>
        /// <param name="dueDateLt"></param>
        /// <param name="dueDateGe"></param>
        /// <param name="dueDateGt"></param>
        /// <param name="customerId"></param>
        /// <param name="settled"></param>
        /// <param name="orderReference"></param>
        /// <param name="invoiceDraftUuid"></param>
        /// <param name="invoiceNumber"></param>
        private void OnErrorGetInvoicesDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string companySlug, Option<int> page, Option<int> pageSize, Option<DateOnly> issueDate, Option<DateOnly> issueDateLe, Option<DateOnly> issueDateLt, Option<DateOnly> issueDateGe, Option<DateOnly> issueDateGt, Option<DateOnly> lastModified, Option<DateOnly> lastModifiedLe, Option<DateOnly> lastModifiedLt, Option<DateOnly> lastModifiedGe, Option<DateOnly> lastModifiedGt, Option<DateOnly> dueDate, Option<DateOnly> dueDateLe, Option<DateOnly> dueDateLt, Option<DateOnly> dueDateGe, Option<DateOnly> dueDateGt, Option<long> customerId, Option<bool> settled, Option<string> orderReference, Option<Guid> invoiceDraftUuid, Option<string> invoiceNumber)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetInvoices(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, companySlug, page, pageSize, issueDate, issueDateLe, issueDateLt, issueDateGe, issueDateGt, lastModified, lastModifiedLe, lastModifiedLt, lastModifiedGe, lastModifiedGt, dueDate, dueDateLe, dueDateLt, dueDateGe, dueDateGt, customerId, settled, orderReference, invoiceDraftUuid, invoiceNumber);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="issueDate"></param>
        /// <param name="issueDateLe"></param>
        /// <param name="issueDateLt"></param>
        /// <param name="issueDateGe"></param>
        /// <param name="issueDateGt"></param>
        /// <param name="lastModified"></param>
        /// <param name="lastModifiedLe"></param>
        /// <param name="lastModifiedLt"></param>
        /// <param name="lastModifiedGe"></param>
        /// <param name="lastModifiedGt"></param>
        /// <param name="dueDate"></param>
        /// <param name="dueDateLe"></param>
        /// <param name="dueDateLt"></param>
        /// <param name="dueDateGe"></param>
        /// <param name="dueDateGt"></param>
        /// <param name="customerId"></param>
        /// <param name="settled"></param>
        /// <param name="orderReference"></param>
        /// <param name="invoiceDraftUuid"></param>
        /// <param name="invoiceNumber"></param>
        partial void OnErrorGetInvoices(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string companySlug, Option<int> page, Option<int> pageSize, Option<DateOnly> issueDate, Option<DateOnly> issueDateLe, Option<DateOnly> issueDateLt, Option<DateOnly> issueDateGe, Option<DateOnly> issueDateGt, Option<DateOnly> lastModified, Option<DateOnly> lastModifiedLe, Option<DateOnly> lastModifiedLt, Option<DateOnly> lastModifiedGe, Option<DateOnly> lastModifiedGt, Option<DateOnly> dueDate, Option<DateOnly> dueDateLe, Option<DateOnly> dueDateLt, Option<DateOnly> dueDateGe, Option<DateOnly> dueDateGt, Option<long> customerId, Option<bool> settled, Option<string> orderReference, Option<Guid> invoiceDraftUuid, Option<string> invoiceNumber);

        /// <summary>
        ///  Returns all invoices for given company. You can filter based on issue date, last modified date, customer ID, and if the invoice is settled or not.
        /// </summary>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="page">Returns the number of the page to return. Valid page values are integers from 0 to the total number of pages. Default value is 0.  (optional, default to 0)</param>
        /// <param name="pageSize">Defines the number of entries to return on each page. Maximum number of results that can be returned at one time are 100. Default value is 25.  (optional, default to 25)</param>
        /// <param name="issueDate">Dates are represented as strings formatted as YYYY-MM-DD. Example: January 1st, 1970: \&quot;1970-01-01\&quot;  (optional)</param>
        /// <param name="issueDateLe">Filter based on date less than or equal to parameter value. Dates are represented as strings formatted as YYYY-MM-DD. Example: January 1st, 1970: \&quot;1970-01-01\&quot;  (optional)</param>
        /// <param name="issueDateLt">Filter based on date strictly less than parameter value. Dates are represented as strings formatted as YYYY-MM-DD. Example: January 1st, 1970: \&quot;1970-01-01\&quot;  (optional)</param>
        /// <param name="issueDateGe">Filter based on date greater than or equal to parameter value. Dates are represented as strings formatted as YYYY-MM-DD. Example: January 1st, 1970: \&quot;1970-01-01\&quot;  (optional)</param>
        /// <param name="issueDateGt">Filter based on date strictly greater than parameter value Dates are represented as strings formatted as YYYY-MM-DD. Example: January 1st, 1970: \&quot;1970-01-01\&quot;  (optional)</param>
        /// <param name="lastModified">Filter based on date of last modification. Returns results that were last modified on the date provided as a parameter value. Dates are represented as strings formatted as YYYY-MM-DD. Example: January 1st, 1970: \&quot;1970-01-01\&quot;  (optional)</param>
        /// <param name="lastModifiedLe">Returns results that have been last modified before or on the date provided as a parameter value. Dates are represented as strings formatted as YYYY-MM-DD. Example: January 1st, 1970: \&quot;1970-01-01\&quot;  (optional)</param>
        /// <param name="lastModifiedLt">Returns results that have been last modified strictly before the date provided as a parameter value. Dates are represented as strings formatted as YYYY-MM-DD. Example: January 1st, 1970: \&quot;1970-01-01\&quot;  (optional)</param>
        /// <param name="lastModifiedGe">Returns results that have been last modified after or on the date provided as a parameter value. Dates are represented as strings formatted as YYYY-MM-DD. Example: January 1st, 1970: \&quot;1970-01-01\&quot;  (optional)</param>
        /// <param name="lastModifiedGt">Returns results that have been last modified strictly after the date provided as a parameter value. Dates are represented as strings formatted as YYYY-MM-DD. Example: January 1st, 1970: \&quot;1970-01-01\&quot;  (optional)</param>
        /// <param name="dueDate">Filter based on due date of invoice. Returns results from the date provided as a parameter value. Dates are represented as strings formatted as YYYY-MM-DD. Example: January 1st, 1970: \&quot;1970-01-01\&quot;  (optional)</param>
        /// <param name="dueDateLe">Returns invoices with a due date before or on the date provided as a parameter value. Dates are represented as strings formatted as YYYY-MM-DD. Example: January 1st, 1970: \&quot;1970-01-01\&quot;  (optional)</param>
        /// <param name="dueDateLt">Returns invoices with a due date that have been last modified strictly before the date provided as a parameter value. Dates are represented as strings formatted as YYYY-MM-DD. Example: January 1st, 1970: \&quot;1970-01-01\&quot;  (optional)</param>
        /// <param name="dueDateGe">Returns invoices with a due date that have been last modified after or on the date provided as a parameter value. Dates are represented as strings formatted as YYYY-MM-DD. Example: January 1st, 1970: \&quot;1970-01-01\&quot;  (optional)</param>
        /// <param name="dueDateGt">Returns invoices with a due date that have been last modified strictly after the date provided as a parameter value. Dates are represented as strings formatted as YYYY-MM-DD. Example: January 1st, 1970: \&quot;1970-01-01\&quot;  (optional)</param>
        /// <param name="customerId">Returns only invoices sent to specified customer. Must be the contactId provided by a GET contacts call.  (optional)</param>
        /// <param name="settled">When set to true, returns only invoices that have been settled. Otherwise false returns all invoices that have not been fully settled.  (optional)</param>
        /// <param name="orderReference">Filter based on order reference for a given invoice (optional)</param>
        /// <param name="invoiceDraftUuid">Filter based on the UUID of the invoice draft that was used to create a given invoice (optional)</param>
        /// <param name="invoiceNumber"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetInvoicesApiResponse"/>&gt;</returns>
        public async Task<IGetInvoicesApiResponse?> GetInvoicesOrDefaultAsync(string companySlug, Option<int> page = default, Option<int> pageSize = default, Option<DateOnly> issueDate = default, Option<DateOnly> issueDateLe = default, Option<DateOnly> issueDateLt = default, Option<DateOnly> issueDateGe = default, Option<DateOnly> issueDateGt = default, Option<DateOnly> lastModified = default, Option<DateOnly> lastModifiedLe = default, Option<DateOnly> lastModifiedLt = default, Option<DateOnly> lastModifiedGe = default, Option<DateOnly> lastModifiedGt = default, Option<DateOnly> dueDate = default, Option<DateOnly> dueDateLe = default, Option<DateOnly> dueDateLt = default, Option<DateOnly> dueDateGe = default, Option<DateOnly> dueDateGt = default, Option<long> customerId = default, Option<bool> settled = default, Option<string> orderReference = default, Option<Guid> invoiceDraftUuid = default, Option<string> invoiceNumber = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetInvoicesAsync(companySlug, page, pageSize, issueDate, issueDateLe, issueDateLt, issueDateGe, issueDateGt, lastModified, lastModifiedLe, lastModifiedLt, lastModifiedGe, lastModifiedGt, dueDate, dueDateLe, dueDateLt, dueDateGe, dueDateGt, customerId, settled, orderReference, invoiceDraftUuid, invoiceNumber, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  Returns all invoices for given company. You can filter based on issue date, last modified date, customer ID, and if the invoice is settled or not.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="page">Returns the number of the page to return. Valid page values are integers from 0 to the total number of pages. Default value is 0.  (optional, default to 0)</param>
        /// <param name="pageSize">Defines the number of entries to return on each page. Maximum number of results that can be returned at one time are 100. Default value is 25.  (optional, default to 25)</param>
        /// <param name="issueDate">Dates are represented as strings formatted as YYYY-MM-DD. Example: January 1st, 1970: \&quot;1970-01-01\&quot;  (optional)</param>
        /// <param name="issueDateLe">Filter based on date less than or equal to parameter value. Dates are represented as strings formatted as YYYY-MM-DD. Example: January 1st, 1970: \&quot;1970-01-01\&quot;  (optional)</param>
        /// <param name="issueDateLt">Filter based on date strictly less than parameter value. Dates are represented as strings formatted as YYYY-MM-DD. Example: January 1st, 1970: \&quot;1970-01-01\&quot;  (optional)</param>
        /// <param name="issueDateGe">Filter based on date greater than or equal to parameter value. Dates are represented as strings formatted as YYYY-MM-DD. Example: January 1st, 1970: \&quot;1970-01-01\&quot;  (optional)</param>
        /// <param name="issueDateGt">Filter based on date strictly greater than parameter value Dates are represented as strings formatted as YYYY-MM-DD. Example: January 1st, 1970: \&quot;1970-01-01\&quot;  (optional)</param>
        /// <param name="lastModified">Filter based on date of last modification. Returns results that were last modified on the date provided as a parameter value. Dates are represented as strings formatted as YYYY-MM-DD. Example: January 1st, 1970: \&quot;1970-01-01\&quot;  (optional)</param>
        /// <param name="lastModifiedLe">Returns results that have been last modified before or on the date provided as a parameter value. Dates are represented as strings formatted as YYYY-MM-DD. Example: January 1st, 1970: \&quot;1970-01-01\&quot;  (optional)</param>
        /// <param name="lastModifiedLt">Returns results that have been last modified strictly before the date provided as a parameter value. Dates are represented as strings formatted as YYYY-MM-DD. Example: January 1st, 1970: \&quot;1970-01-01\&quot;  (optional)</param>
        /// <param name="lastModifiedGe">Returns results that have been last modified after or on the date provided as a parameter value. Dates are represented as strings formatted as YYYY-MM-DD. Example: January 1st, 1970: \&quot;1970-01-01\&quot;  (optional)</param>
        /// <param name="lastModifiedGt">Returns results that have been last modified strictly after the date provided as a parameter value. Dates are represented as strings formatted as YYYY-MM-DD. Example: January 1st, 1970: \&quot;1970-01-01\&quot;  (optional)</param>
        /// <param name="dueDate">Filter based on due date of invoice. Returns results from the date provided as a parameter value. Dates are represented as strings formatted as YYYY-MM-DD. Example: January 1st, 1970: \&quot;1970-01-01\&quot;  (optional)</param>
        /// <param name="dueDateLe">Returns invoices with a due date before or on the date provided as a parameter value. Dates are represented as strings formatted as YYYY-MM-DD. Example: January 1st, 1970: \&quot;1970-01-01\&quot;  (optional)</param>
        /// <param name="dueDateLt">Returns invoices with a due date that have been last modified strictly before the date provided as a parameter value. Dates are represented as strings formatted as YYYY-MM-DD. Example: January 1st, 1970: \&quot;1970-01-01\&quot;  (optional)</param>
        /// <param name="dueDateGe">Returns invoices with a due date that have been last modified after or on the date provided as a parameter value. Dates are represented as strings formatted as YYYY-MM-DD. Example: January 1st, 1970: \&quot;1970-01-01\&quot;  (optional)</param>
        /// <param name="dueDateGt">Returns invoices with a due date that have been last modified strictly after the date provided as a parameter value. Dates are represented as strings formatted as YYYY-MM-DD. Example: January 1st, 1970: \&quot;1970-01-01\&quot;  (optional)</param>
        /// <param name="customerId">Returns only invoices sent to specified customer. Must be the contactId provided by a GET contacts call.  (optional)</param>
        /// <param name="settled">When set to true, returns only invoices that have been settled. Otherwise false returns all invoices that have not been fully settled.  (optional)</param>
        /// <param name="orderReference">Filter based on order reference for a given invoice (optional)</param>
        /// <param name="invoiceDraftUuid">Filter based on the UUID of the invoice draft that was used to create a given invoice (optional)</param>
        /// <param name="invoiceNumber"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetInvoicesApiResponse"/>&gt;</returns>
        public async Task<IGetInvoicesApiResponse> GetInvoicesAsync(string companySlug, Option<int> page = default, Option<int> pageSize = default, Option<DateOnly> issueDate = default, Option<DateOnly> issueDateLe = default, Option<DateOnly> issueDateLt = default, Option<DateOnly> issueDateGe = default, Option<DateOnly> issueDateGt = default, Option<DateOnly> lastModified = default, Option<DateOnly> lastModifiedLe = default, Option<DateOnly> lastModifiedLt = default, Option<DateOnly> lastModifiedGe = default, Option<DateOnly> lastModifiedGt = default, Option<DateOnly> dueDate = default, Option<DateOnly> dueDateLe = default, Option<DateOnly> dueDateLt = default, Option<DateOnly> dueDateGe = default, Option<DateOnly> dueDateGt = default, Option<long> customerId = default, Option<bool> settled = default, Option<string> orderReference = default, Option<Guid> invoiceDraftUuid = default, Option<string> invoiceNumber = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetInvoices(companySlug, orderReference, invoiceNumber);

                FormatGetInvoices(ref companySlug, ref page, ref pageSize, ref issueDate, ref issueDateLe, ref issueDateLt, ref issueDateGe, ref issueDateGt, ref lastModified, ref lastModifiedLe, ref lastModifiedLt, ref lastModifiedGe, ref lastModifiedGt, ref dueDate, ref dueDateLe, ref dueDateLt, ref dueDateGe, ref dueDateGt, ref customerId, ref settled, ref orderReference, ref invoiceDraftUuid, ref invoiceNumber);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/companies/{companySlug}/invoices";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BcompanySlug%7D", Uri.EscapeDataString(companySlug.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (page.IsSet)
                        parseQueryStringLocalVar["page"] = ClientUtils.ParameterToString(page.Value);

                    if (pageSize.IsSet)
                        parseQueryStringLocalVar["pageSize"] = ClientUtils.ParameterToString(pageSize.Value);

                    if (issueDate.IsSet)
                        parseQueryStringLocalVar["issueDate"] = ClientUtils.ParameterToString(issueDate.Value);

                    if (issueDateLe.IsSet)
                        parseQueryStringLocalVar["issueDateLe"] = ClientUtils.ParameterToString(issueDateLe.Value);

                    if (issueDateLt.IsSet)
                        parseQueryStringLocalVar["issueDateLt"] = ClientUtils.ParameterToString(issueDateLt.Value);

                    if (issueDateGe.IsSet)
                        parseQueryStringLocalVar["issueDateGe"] = ClientUtils.ParameterToString(issueDateGe.Value);

                    if (issueDateGt.IsSet)
                        parseQueryStringLocalVar["issueDateGt"] = ClientUtils.ParameterToString(issueDateGt.Value);

                    if (lastModified.IsSet)
                        parseQueryStringLocalVar["lastModified"] = ClientUtils.ParameterToString(lastModified.Value);

                    if (lastModifiedLe.IsSet)
                        parseQueryStringLocalVar["lastModifiedLe"] = ClientUtils.ParameterToString(lastModifiedLe.Value);

                    if (lastModifiedLt.IsSet)
                        parseQueryStringLocalVar["lastModifiedLt"] = ClientUtils.ParameterToString(lastModifiedLt.Value);

                    if (lastModifiedGe.IsSet)
                        parseQueryStringLocalVar["lastModifiedGe"] = ClientUtils.ParameterToString(lastModifiedGe.Value);

                    if (lastModifiedGt.IsSet)
                        parseQueryStringLocalVar["lastModifiedGt"] = ClientUtils.ParameterToString(lastModifiedGt.Value);

                    if (dueDate.IsSet)
                        parseQueryStringLocalVar["dueDate"] = ClientUtils.ParameterToString(dueDate.Value);

                    if (dueDateLe.IsSet)
                        parseQueryStringLocalVar["dueDateLe"] = ClientUtils.ParameterToString(dueDateLe.Value);

                    if (dueDateLt.IsSet)
                        parseQueryStringLocalVar["dueDateLt"] = ClientUtils.ParameterToString(dueDateLt.Value);

                    if (dueDateGe.IsSet)
                        parseQueryStringLocalVar["dueDateGe"] = ClientUtils.ParameterToString(dueDateGe.Value);

                    if (dueDateGt.IsSet)
                        parseQueryStringLocalVar["dueDateGt"] = ClientUtils.ParameterToString(dueDateGt.Value);

                    if (customerId.IsSet)
                        parseQueryStringLocalVar["customerId"] = ClientUtils.ParameterToString(customerId.Value);

                    if (settled.IsSet)
                        parseQueryStringLocalVar["settled"] = ClientUtils.ParameterToString(settled.Value);

                    if (orderReference.IsSet)
                        parseQueryStringLocalVar["orderReference"] = ClientUtils.ParameterToString(orderReference.Value);

                    if (invoiceDraftUuid.IsSet)
                        parseQueryStringLocalVar["invoiceDraftUuid"] = ClientUtils.ParameterToString(invoiceDraftUuid.Value);

                    if (invoiceNumber.IsSet)
                        parseQueryStringLocalVar["invoiceNumber"] = ClientUtils.ParameterToString(invoiceNumber.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetInvoicesApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetInvoicesApiResponse>();

                        GetInvoicesApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/companies/{companySlug}/invoices", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetInvoicesDefaultImplementation(apiResponseLocalVar, companySlug, page, pageSize, issueDate, issueDateLe, issueDateLt, issueDateGe, issueDateGt, lastModified, lastModifiedLe, lastModifiedLt, lastModifiedGe, lastModifiedGt, dueDate, dueDateLe, dueDateLt, dueDateGe, dueDateGt, customerId, settled, orderReference, invoiceDraftUuid, invoiceNumber);

                        Events.ExecuteOnGetInvoices(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetInvoicesDefaultImplementation(e, "/companies/{companySlug}/invoices", uriBuilderLocalVar.Path, companySlug, page, pageSize, issueDate, issueDateLe, issueDateLt, issueDateGe, issueDateGt, lastModified, lastModifiedLe, lastModifiedLt, lastModifiedGe, lastModifiedGt, dueDate, dueDateLe, dueDateLt, dueDateGe, dueDateGt, customerId, settled, orderReference, invoiceDraftUuid, invoiceNumber);
                Events.ExecuteOnErrorGetInvoices(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetInvoicesApiResponse"/>
        /// </summary>
        public partial class GetInvoicesApiResponse : Fiken.Client.ApiResponse, IGetInvoicesApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetInvoicesApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetInvoicesApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetInvoicesApiResponse(ILogger<GetInvoicesApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<InvoiceResult>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<InvoiceResult>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<InvoiceResult>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatSendInvoice(ref string companySlug, SendInvoiceRequest sendInvoiceRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="companySlug"></param>
        /// <param name="sendInvoiceRequest"></param>
        /// <returns></returns>
        private void ValidateSendInvoice(string companySlug, SendInvoiceRequest sendInvoiceRequest)
        {
            if (companySlug == null)
                throw new ArgumentNullException(nameof(companySlug));

            if (sendInvoiceRequest == null)
                throw new ArgumentNullException(nameof(sendInvoiceRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="sendInvoiceRequest"></param>
        private void AfterSendInvoiceDefaultImplementation(ISendInvoiceApiResponse apiResponseLocalVar, string companySlug, SendInvoiceRequest sendInvoiceRequest)
        {
            bool suppressDefaultLog = false;
            AfterSendInvoice(ref suppressDefaultLog, apiResponseLocalVar, companySlug, sendInvoiceRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="sendInvoiceRequest"></param>
        partial void AfterSendInvoice(ref bool suppressDefaultLog, ISendInvoiceApiResponse apiResponseLocalVar, string companySlug, SendInvoiceRequest sendInvoiceRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="sendInvoiceRequest"></param>
        private void OnErrorSendInvoiceDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string companySlug, SendInvoiceRequest sendInvoiceRequest)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorSendInvoice(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, companySlug, sendInvoiceRequest);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="sendInvoiceRequest"></param>
        partial void OnErrorSendInvoice(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string companySlug, SendInvoiceRequest sendInvoiceRequest);

        /// <summary>
        ///  Sends the specified document
        /// </summary>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="sendInvoiceRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISendInvoiceApiResponse"/>&gt;</returns>
        public async Task<ISendInvoiceApiResponse?> SendInvoiceOrDefaultAsync(string companySlug, SendInvoiceRequest sendInvoiceRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await SendInvoiceAsync(companySlug, sendInvoiceRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  Sends the specified document
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="sendInvoiceRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISendInvoiceApiResponse"/>&gt;</returns>
        public async Task<ISendInvoiceApiResponse> SendInvoiceAsync(string companySlug, SendInvoiceRequest sendInvoiceRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateSendInvoice(companySlug, sendInvoiceRequest);

                FormatSendInvoice(ref companySlug, sendInvoiceRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/companies/{companySlug}/invoices/send";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BcompanySlug%7D", Uri.EscapeDataString(companySlug.ToString()));

                    httpRequestMessageLocalVar.Content = (sendInvoiceRequest as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(sendInvoiceRequest, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<SendInvoiceApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<SendInvoiceApiResponse>();

                        SendInvoiceApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/companies/{companySlug}/invoices/send", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterSendInvoiceDefaultImplementation(apiResponseLocalVar, companySlug, sendInvoiceRequest);

                        Events.ExecuteOnSendInvoice(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorSendInvoiceDefaultImplementation(e, "/companies/{companySlug}/invoices/send", uriBuilderLocalVar.Path, companySlug, sendInvoiceRequest);
                Events.ExecuteOnErrorSendInvoice(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="SendInvoiceApiResponse"/>
        /// </summary>
        public partial class SendInvoiceApiResponse : Fiken.Client.ApiResponse, ISendInvoiceApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<SendInvoiceApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="SendInvoiceApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public SendInvoiceApiResponse(ILogger<SendInvoiceApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatUpdateInvoice(ref string companySlug, ref long invoiceId, UpdateInvoiceRequest updateInvoiceRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="companySlug"></param>
        /// <param name="updateInvoiceRequest"></param>
        /// <returns></returns>
        private void ValidateUpdateInvoice(string companySlug, UpdateInvoiceRequest updateInvoiceRequest)
        {
            if (companySlug == null)
                throw new ArgumentNullException(nameof(companySlug));

            if (updateInvoiceRequest == null)
                throw new ArgumentNullException(nameof(updateInvoiceRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="invoiceId"></param>
        /// <param name="updateInvoiceRequest"></param>
        private void AfterUpdateInvoiceDefaultImplementation(IUpdateInvoiceApiResponse apiResponseLocalVar, string companySlug, long invoiceId, UpdateInvoiceRequest updateInvoiceRequest)
        {
            bool suppressDefaultLog = false;
            AfterUpdateInvoice(ref suppressDefaultLog, apiResponseLocalVar, companySlug, invoiceId, updateInvoiceRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="invoiceId"></param>
        /// <param name="updateInvoiceRequest"></param>
        partial void AfterUpdateInvoice(ref bool suppressDefaultLog, IUpdateInvoiceApiResponse apiResponseLocalVar, string companySlug, long invoiceId, UpdateInvoiceRequest updateInvoiceRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="invoiceId"></param>
        /// <param name="updateInvoiceRequest"></param>
        private void OnErrorUpdateInvoiceDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string companySlug, long invoiceId, UpdateInvoiceRequest updateInvoiceRequest)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorUpdateInvoice(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, companySlug, invoiceId, updateInvoiceRequest);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="invoiceId"></param>
        /// <param name="updateInvoiceRequest"></param>
        partial void OnErrorUpdateInvoice(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string companySlug, long invoiceId, UpdateInvoiceRequest updateInvoiceRequest);

        /// <summary>
        ///  Updates invoice with provided id. It is possible to update the due date of an invoice as well as if the invoice was sent manually, outside of Fiken. 
        /// </summary>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="invoiceId">The invoiceId (primary key of the returned object) is returned in the GET all invoices call; not to be confused with invoiceNumber </param>
        /// <param name="updateInvoiceRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateInvoiceApiResponse"/>&gt;</returns>
        public async Task<IUpdateInvoiceApiResponse?> UpdateInvoiceOrDefaultAsync(string companySlug, long invoiceId, UpdateInvoiceRequest updateInvoiceRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await UpdateInvoiceAsync(companySlug, invoiceId, updateInvoiceRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  Updates invoice with provided id. It is possible to update the due date of an invoice as well as if the invoice was sent manually, outside of Fiken. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="invoiceId">The invoiceId (primary key of the returned object) is returned in the GET all invoices call; not to be confused with invoiceNumber </param>
        /// <param name="updateInvoiceRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateInvoiceApiResponse"/>&gt;</returns>
        public async Task<IUpdateInvoiceApiResponse> UpdateInvoiceAsync(string companySlug, long invoiceId, UpdateInvoiceRequest updateInvoiceRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateUpdateInvoice(companySlug, updateInvoiceRequest);

                FormatUpdateInvoice(ref companySlug, ref invoiceId, updateInvoiceRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/companies/{companySlug}/invoices/{invoiceId}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BcompanySlug%7D", Uri.EscapeDataString(companySlug.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BinvoiceId%7D", Uri.EscapeDataString(invoiceId.ToString()));

                    httpRequestMessageLocalVar.Content = (updateInvoiceRequest as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(updateInvoiceRequest, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    httpRequestMessageLocalVar.Method = HttpMethod.Patch;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<UpdateInvoiceApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<UpdateInvoiceApiResponse>();

                        UpdateInvoiceApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/companies/{companySlug}/invoices/{invoiceId}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterUpdateInvoiceDefaultImplementation(apiResponseLocalVar, companySlug, invoiceId, updateInvoiceRequest);

                        Events.ExecuteOnUpdateInvoice(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorUpdateInvoiceDefaultImplementation(e, "/companies/{companySlug}/invoices/{invoiceId}", uriBuilderLocalVar.Path, companySlug, invoiceId, updateInvoiceRequest);
                Events.ExecuteOnErrorUpdateInvoice(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="UpdateInvoiceApiResponse"/>
        /// </summary>
        public partial class UpdateInvoiceApiResponse : Fiken.Client.ApiResponse, IUpdateInvoiceApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<UpdateInvoiceApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="UpdateInvoiceApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public UpdateInvoiceApiResponse(ILogger<UpdateInvoiceApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatUpdateInvoiceDraft(ref string companySlug, ref long draftId, InvoiceishDraftRequest invoiceishDraftRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="companySlug"></param>
        /// <param name="invoiceishDraftRequest"></param>
        /// <returns></returns>
        private void ValidateUpdateInvoiceDraft(string companySlug, InvoiceishDraftRequest invoiceishDraftRequest)
        {
            if (companySlug == null)
                throw new ArgumentNullException(nameof(companySlug));

            if (invoiceishDraftRequest == null)
                throw new ArgumentNullException(nameof(invoiceishDraftRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="draftId"></param>
        /// <param name="invoiceishDraftRequest"></param>
        private void AfterUpdateInvoiceDraftDefaultImplementation(IUpdateInvoiceDraftApiResponse apiResponseLocalVar, string companySlug, long draftId, InvoiceishDraftRequest invoiceishDraftRequest)
        {
            bool suppressDefaultLog = false;
            AfterUpdateInvoiceDraft(ref suppressDefaultLog, apiResponseLocalVar, companySlug, draftId, invoiceishDraftRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="draftId"></param>
        /// <param name="invoiceishDraftRequest"></param>
        partial void AfterUpdateInvoiceDraft(ref bool suppressDefaultLog, IUpdateInvoiceDraftApiResponse apiResponseLocalVar, string companySlug, long draftId, InvoiceishDraftRequest invoiceishDraftRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="draftId"></param>
        /// <param name="invoiceishDraftRequest"></param>
        private void OnErrorUpdateInvoiceDraftDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string companySlug, long draftId, InvoiceishDraftRequest invoiceishDraftRequest)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorUpdateInvoiceDraft(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, companySlug, draftId, invoiceishDraftRequest);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="draftId"></param>
        /// <param name="invoiceishDraftRequest"></param>
        partial void OnErrorUpdateInvoiceDraft(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string companySlug, long draftId, InvoiceishDraftRequest invoiceishDraftRequest);

        /// <summary>
        ///  Updates invoice draft with provided id. 
        /// </summary>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="draftId">The draftId (primary key of the returned object) is returned in the GET all drafts call. </param>
        /// <param name="invoiceishDraftRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateInvoiceDraftApiResponse"/>&gt;</returns>
        public async Task<IUpdateInvoiceDraftApiResponse?> UpdateInvoiceDraftOrDefaultAsync(string companySlug, long draftId, InvoiceishDraftRequest invoiceishDraftRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await UpdateInvoiceDraftAsync(companySlug, draftId, invoiceishDraftRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  Updates invoice draft with provided id. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="draftId">The draftId (primary key of the returned object) is returned in the GET all drafts call. </param>
        /// <param name="invoiceishDraftRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateInvoiceDraftApiResponse"/>&gt;</returns>
        public async Task<IUpdateInvoiceDraftApiResponse> UpdateInvoiceDraftAsync(string companySlug, long draftId, InvoiceishDraftRequest invoiceishDraftRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateUpdateInvoiceDraft(companySlug, invoiceishDraftRequest);

                FormatUpdateInvoiceDraft(ref companySlug, ref draftId, invoiceishDraftRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/companies/{companySlug}/invoices/drafts/{draftId}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BcompanySlug%7D", Uri.EscapeDataString(companySlug.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BdraftId%7D", Uri.EscapeDataString(draftId.ToString()));

                    httpRequestMessageLocalVar.Content = (invoiceishDraftRequest as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(invoiceishDraftRequest, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    httpRequestMessageLocalVar.Method = HttpMethod.Put;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<UpdateInvoiceDraftApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<UpdateInvoiceDraftApiResponse>();

                        UpdateInvoiceDraftApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/companies/{companySlug}/invoices/drafts/{draftId}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterUpdateInvoiceDraftDefaultImplementation(apiResponseLocalVar, companySlug, draftId, invoiceishDraftRequest);

                        Events.ExecuteOnUpdateInvoiceDraft(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorUpdateInvoiceDraftDefaultImplementation(e, "/companies/{companySlug}/invoices/drafts/{draftId}", uriBuilderLocalVar.Path, companySlug, draftId, invoiceishDraftRequest);
                Events.ExecuteOnErrorUpdateInvoiceDraft(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="UpdateInvoiceDraftApiResponse"/>
        /// </summary>
        public partial class UpdateInvoiceDraftApiResponse : Fiken.Client.ApiResponse, IUpdateInvoiceDraftApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<UpdateInvoiceDraftApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="UpdateInvoiceDraftApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public UpdateInvoiceDraftApiResponse(ILogger<UpdateInvoiceDraftApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public bool IsCreated => 201 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}

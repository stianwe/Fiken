// <auto-generated>
/*
 * Fiken API
 *
 *  ## Introduction [Fiken.no](https://fiken.no) is an online accounting system aimed at making accounting easy for small businesses. The API Module allows other systems to integrate with Fiken. This document describes Fiken's API.  ## Using the API Use of this API in production environments on live data is normally associated with a fee for the end user (company). API access costs 99kr per month and can be ordered through the Module access page under Settings in your Fiken account. If you have any questions regarding the API pricing, contact us at <api@fiken.no>.  The API provides two different ways of authorizing requests.    1. OAuth2   2. Personal API tokens  Third parties that wish to integrate with Fiken on behalf of their customers should use the OAuth2 authorization method. In order to develop OAuth2 applications that integrate with this API you must log into your Fiken account and check the box saying that you are a developer (**Rediger konto -> Profil -> Andre innstillinger**). This will allow you to create an App by clicking on the \"API\" tab under Brukerinnstillinger. If you don't have an existing Fiken account you can create a new user and demo company (demoforetak) at no charge. Send an email to <api@fiken.no> to get free access to Fiken for longer than the included 30 day free trial period.   Upon creation of the new App you will be provided a Client ID and Client Secret that are needed for the OAuth2 authorization flow.  This will allow you to use the API during development with up to 5 users. If you would like to use the API with more than 5 users and gain production status, you will need to send an email to <api@fiken.no> to gain full access to the API module.  Fiken customers that wish to integrate their own solutions with this API can use personal API tokens. Personal API tokens can be created in **Rediger konto -> API -> Personlige API-nÃ¸kler**. Note that personal API tokens do not expire.  ## Base URL All URLs start with https://api.fiken.no/api/v2. Note that TLS is required, unencrypted HTTP is not supported. Although we currently redirect HTTP requests to HTTPS, you are not allowed to this with your application as using HTTP is a security risk. In the future we might respond with 403 Forbidden instead.  ## Concurrent requests / rate limiting You are only allowed to make a single concurrent API-request. Sending multiple requests concurrently may result in a 429 error response. If you break this rule you might be banned. In case of a ban please contact us to be unbanned.  API calls may be slowed if you execute more than 4 requests per second.  ## Personal API tokens  Personal API tokens can be created in **Rediger konto -> API**. Personal API tokens never expire and can be revoked from the same place.  To use a personal API token simply send it as a bearer token in the `Authorization` header:      GET https://api.fiken.no/api/v2/companies     Authorization: Bearer <api token>  ## Authorization with OAuth2 Fiken API V2 uses OAuth 2.0 for authorizing API requests. Authorized requests to the API should use an `Authorization` header with the value `Bearer <TOKEN>` where `<TOKEN>` is an access token obtained through the OAuth flow.  ### Authorize Endpoint  To start the OAuth flow in order to obtain an access token for a user, you will first have to get consent from the user. To do this, direct your user to the authorization endpoint:      GET https://fiken.no/oauth/authorize?response_type=code&client_id=CLIENT_ID&redirect_uri=REDIRECT_URI&state=STATE  If the user is logged in and accepts your request, the user is redirected back to your redirect url. If the user is not logged in, the regular Fiken.no login form is presented first, requiring the user to authenticate before accepting or rejecting your request.  If the user rejects the request or if there is an error in your request, the user is redirected back to your redirect url with the parameters `error` and `error_description`. If the user rejected the request the error code will be `access_denied`.  #### Parameters  | Name          | Description                                                                                                      | | :- -- -- -- -- -- - | :- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- | | response_type | **Required** Should always be the value `code`                                                     | | client_id     | **Required** The client id you received from Fiken when you registered your application                          | | redirect_uri  | **Required** The URL in your application where users will be sent with an authorization code after authorization | | state         | **Required** An unguessable random string, used to protect against CSRF attacks                                  |   ### Token Endpoint  If the user accepts your request, Fiken redirects the user back to your `redirect_uri` with a parameter named `code` as well as the state you provided in the previous step in the `state` parameter. This temporary code will expire after a short while.  The temporary authorization code can be exchanged for an access token at the token endpoint.  The token endpoint is protected with Http Basic Authentication and you should use your application client id and client secret as credentials to authenticate.      POST https://fiken.no/oauth/token     Content-Type: application/x-www-form-urlencoded     Authorization: Basic dXNlIHlvdXIgY2xpZW50IGlkOmFuZCBjbGllbnQgc2VjcmV0      grant_type=authorization_code&code=AUTHCODE&redirect_uri=REDIRECT_URI&state=STATE  The response will contain the access token, a refresh token (see below) as well as information about the expiry time for the token.      {       \"access_token\": \"K2QwoFp4ZfugWLWk7Ipu9kni5cyv3luXKQ-GDShvV2g=\",       \"refresh_token\": \"naFOD_j8m6PFGcP0pfImVZlSxKklHLbgj9Hzao4rhg8=\",       \"token_type\": \"bearer\",       \"expires_in\": 86157     }  If an error occurs during the token exchange request, an error object is returned with an error and an error description.      {         \"error\": \"invalid_grant\",         \"error_description\": \"The authorization code is invalid or expired.\"     }  #### Parameters  | Name         | Description                                                                                                      | | :- -- -- -- -- -- | :- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- | | grant_type   | **Required** Should be the value `authorization_code`                                                            | | code         | **Required** The authorization code that was received in the redirect from the authorize endpoint                | | redirect_uri | **Required** The URL in your application where users will be sent with an authorization code after authorization | | state        | **Required** An unguessable random string, used to protect against CSRF attacks                                  |  ### Refresh Tokens  If an access token has expired you can use the refresh token that was sent in the response from the token endpoint to get a new access token.  Note that if the user has revoked the consent to your app, the refresh token will no longer be valid.  To get a new access token from the refresh token, use the token endpoint with the grant type `refresh_token`:      POST https://fiken.no/oauth/token     Content-Type: application/x-www-form-urlencoded     Authorization: Basic dXNlIHlvdXIgY2xpZW50IGlkOmFuZCBjbGllbnQgc2VjcmV0      grant_type=refresh_token&refresh_token=REFRESH_TOKEN  The response contains a fresh access token along with a possibly updated refresh token:      {       \"access_token\": \"K2QwoFp4ZfugWLWk7Ipu9kni5cyv3luXKQ-GDShvV2g=\",       \"refresh_token\": \"naFOD_j8m6PFGcP0pfImVZlSxKklHLbgj9Hzao4rhg8=\",       \"token_type\": \"bearer\",       \"expires_in\": 86157     }  #### Parameters  | Name         | Description                                                                                                      | | :- -- -- -- -- -- | :- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- | | grant_type   | **Required** Should be the value `refresh_token`                                                                 | | refresh_token| **Required** The refresh token last returned for this user from the token endpoint                               |  ### Using Access Tokens in API Requests  To execute API requests on behalf of the end user, send the access token obtained at the token endpoint as a bearer token, as in this example:      GET https://api.fiken.no/api/v2/companies     Authorization: Bearer <access_token_value>  ### Revoking tokens  To revoke an access token and refresh token use the Revoke Token endpoint.  The Revoke Token endpoint disables the application grant, the access token and the corresponding refresh token used to authenticate the call. Other access tokens obtained from the same refresh token are also revoked.      POST https://fiken.no/oauth/revoke     Authorization: Bearer <access_token_value>  The response for a successful revocation is 200/OK.  ### Managing access  The end user can manage which companies a given app has access to under **Rediger konto -> Sikkerhet -> Apper du har gitt tilgang til**.  All companies created after the initial consent has been given need to be actively added so that the app will have access to their information.  Additionally the end user can revoke access to any of their companies' data as well.   ## Try It Out  For each endpoint in the documentation below there is a button *Try It Out*. To invoke the API from this documentation you need an app and you need to authorize usage for you Fiken.no user.  Your app needs to be configured with a redirect URL for this documentation, add `https://api.fiken.no/api/v2/docs/oauth2-redirect.html` to the list of redirect URLs for your app.  Click the padlock symbol on any of the endpoints and enter your `client_id` and `client_secret` and then press *Authorize* to start the OAuth2 authorization flow, then click *Close*.  Enter the required parameters for the endpoint, such as `company_slug`, and then press *Execute* to test.  ## Request  We recommend sending the `X-Request-ID` header with all requests.  ### Request Headers | Request  Header           | Format   | Description                                                       | | - -- -- -- -- -- -- -- -          | - -- -- -- - | - -- -- -- -- -- -- -- -- -- -- -- -- -- --                                     | | `X-Request-ID`            | UUID     | UUID used to identify the request                                 |    ## Response ### Response code All HTTP codes should be expected with their normal semantics. These are some of the common ones:  * **200** for successful GET * **201** for successful POST where you get a Location-header for the created content * **400** when invalid content has be sent (for instance a required field is missing, unexpected fields, wrong format, etc) * **401** when the user is not authenticated * **403** when the user does not have the proper authorization * **404** when the requested content is not found * **405** When you are trying a method to a resource which doesn't support it (i.e. DELETE on an account). * **415** Wrong media type. we accept application/json only.  ### Response Content The default content type on the result of GET requests is application/json. On successful POSTs/PUTs/PATCHs and DELETEs an empty body is returned.  For successful POSTs/PUTs/PATCHs a Location header is given in all cases.  ## Pagination, Sorting & Filtering Pagination, sorting and filtering query parameters are all optional.   | URI                                                                     | Pagination? | Sortable? | Sortable Fields                       | Filterable? | Filtered Fields                                                                                                                         | | :- -- -- -- --                                                              |:- -- -- -- -- -- | :- -- -- -- - | :- -- -- -- -- -- --                        | :- --        | :- --                                                                                                                                    | | https://api.fiken.no/api/v2/companies                                  | Yes         | Yes       | createdDate, name, organizationNumber | No          |                                                                                                                                         | | https://api.fiken.no/api/v2/companies/{companySlug}/accounts           | No          | No        |                                       | Yes         | fromAccount, toAccount                                                                                                                  | | https://api.fiken.no/api/v2/companies/{companySlug}/accountBalances    | Yes         | No        |                                       | Yes         | fromAccount, toAccount                                                                                                                  | | https://api.fiken.no/api/v2/companies/{companySlug}/bankAccounts       | Yes         | No        |                                       | Yes         | inactive                                                                                                                                | | https://api.fiken.no/api/v2/companies/{companySlug}/contacts           | Yes         | Yes       | createdDate, lastModified             | Yes         | supplierNumber, customerNumber, memberNumber, memberNumberString, name, organizationNumber, email, group, lastModified, createdDate, inactive, phoneNumber  | | https://api.fiken.no/api/v2/companies/{companySlug}/creditNotes        | Yes         | No        |                                       | Yes         | issueDate, lastModified, settled, customerId                                                                                            | | https://api.fiken.no/api/v2/companies/{companySlug}/inbox              | Yes         | Yes       | createdDate, name                     | Yes         | status, name                                                                                                                            | | https://api.fiken.no/api/v2/companies/{companySlug}/invoices           | Yes         | No        |                                       | Yes         | issueDate, lastModified, dueDate, settled, customerId, orderReference, invoiceDraftUuid                                                 | | https://api.fiken.no/api/v2/companies/{companySlug}/invoices/drafts    | Yes         | No        |                                       | No          |                                                                                                                                         | | https://api.fiken.no/api/v2/companies/{companySlug}/journalEntries     | Yes         | No        |                                       | Yes         | date                                                                                                                                    | | https://api.fiken.no/api/v2/companies/{companySlug}/offers             | Yes         | No        |                                       | No          |                                                                                                                                         | | https://api.fiken.no/api/v2/companies/{companySlug}/orderConfirmations | Yes         | No        |                                       | No          |                                                                                                                                         | | https://api.fiken.no/api/v2/companies/{companySlug}/products           | Yes         | No        |                                       | Yes         | name, productNumber, active, createdDate, lastModified                                                                                  | | https://api.fiken.no/api/v2/companies/{companySlug}/projects           | Yes         | No        |                                       | Yes         | completed                                                                                                                               | | https://api.fiken.no/api/v2/companies/{companySlug}/purchases          | Yes         | Yes       | createdDate                           | No          | date                                                                                                                                    | | https://api.fiken.no/api/v2/companies/{companySlug}/purchases/drafts   | Yes         | No        |                                       | No          |                                                                                                                                         | | https://api.fiken.no/api/v2/companies/{companySlug}/sales              | Yes         | No        |                                       | Yes         | saleNumber, lastModified, date, contactId                                                                                               | | https://api.fiken.no/api/v2/companies/{companySlug}/sales/drafts       | Yes         | No        |                                       | No          |                                                                                                                                         | | https://api.fiken.no/api/v2/companies/{companySlug}/transactions       | Yes         | No        |                                       | Yes         | createdDate, lastModified                                                                                                               |  ### Pagination By default the API sets `page=0` and `pageSize=25` and returns the first 25 elements in a collection resource, if nothing else is specified. PageSize has a maximum value of 100 meaning that you can only access at most 100 elements at once.  To request a collection resource with pagination, query the resource with the query filters page and pageSize, note that both query parameters need to be set to enable pagination. The page counter starts at 0. The response will contain up to Fiken-Api-Page-Size elements and the response headers below, detailing how many elements the resource has in total and the total number of pages as well.  By default the API returns the resources in the order they were created, if nothing else is specified in the documentation.  #### Pagination Response Headers | Response Header           | Format   | Description                                                       | | - -- -- -- -- -- -- -- -          | - -- -- -- - | - -- -- -- -- -- -- -- -- -- -- -- -- -- --                                     | | `Fiken-Api-Page`          | integer  | From the request header                                           | | `Fiken-Api-Page-Size`     | integer  | From the request header                                           | | `Fiken-Api-Page-Count`    | integer  | The total number of pages in this resource with this page size    | | `Fiken-Api-Result-Count`  | integer  | The total number of elements in this resource                     |  ### Sorting To change the sort order for a resource, set the sortBy query parameter to a sort field in either ascending or descending order. Ex: `https://api.fiken.no/api/v2/companies?sortBy=name%20asc`  ### Filtering Some collections support filtering, and depending on the type of field, different filters can be used. Dates are the most complex, and allow you do apply different filters with different parameter names. For instance, for a field called date, the following mutations are available:  | Parameter | Field | Format    | Description                                   | | - --       |- --    | - --       |- --                                            | |  `date`   |date |yyyy-MM-dd |date equal to parameter value                  | |  `dateLe` |date |yyyy-MM-dd |date less than or equal to parameter value     | |  `dateLt` |date |yyyy-MM-dd |date less than parameter value                 | |  `dateGe` |date |yyyy-MM-dd |date greater than or equal to parameter value  | |  `dateGt` |date |yyyy-MM-dd |date greater than parameter value              |  All date-fields will have these mutations of parameter name that applies  ## Data Types These are simple data-types that are used in several of our objects.  ### Date Dates are represented as strings formatted as yyyy-MM-dd. \"Last modified\" returns the date of last modification of the object.  If the object was never modified after creation, last modified date is equal to created date.   ##### Examples: January 2nd, 1970: \"1970-01-02\"  ### Amount Amounts are always represented as a number, and specifies the number of cents in the amount. Fractions will be ignored.  ##### Examples: One thousand: 100000  One hundred and twelve cents: 10012  ### Account An account is a string with either four digits, or four digits, a colon and five digits (\"reskontro\").  ##### Examples: 3020  1500:10001  ### VAT Code Fiken's VAT codes are based upon Sticos mvakoder. To see all VAT codes go to Fiken support, check the \"Mva kode\"-selector in the Fiken web interface while creating a genereal ledger item (\"Fri postering\").  See below the mapping between VAT codes and types (codes are used at the transaction level while types are used for sales and purchases).  | Vat Code | Vat Type                                                                                                                                 | Valid for Purchases/Sales    |  | - --      |- --                                                                                                                                       | - --                          |                                          |  0/7     |NONE (Ingen - KJÃP_INGEN_MVABEHANDLING/SALG_INNTEKTER_UTEN_MVABEHANDLING)                                                               |Both                          | |  1/3    |HIGH (HÃ¸y - KJÃP/SALG_MED_HÃY_SATS)                                                                                                       |Both                          | |  11/31   |MEDIUM (Middels - KJÃP/SALG_MED_MIDDELS_SATS)                                                                                           |Both                       | |  12/32   |RAW_FISH (RÃ¥fisk - KJÃP/SALG_MED_RÃFISK_SATS)                                                                                           |Both                         | |  13/33   |LOW (Lav - KJÃP/SALG_MED_LAV_SATS)                                                                                                       |Both                          | |  52    |EXEMPT_IMPORT_EXPORT (Fritatt import/export - SALG_UTFÃRSEL_AV_VARER_OG_TJENESTER)                                                        |Sales                      | |  5    |EXEMPT (Fritatt - SALG_FRITATT_FOR_MVA_AVGIFTSFRITT)                                                                                   |Sales                        | |  6    |OUTSIDE (Utenfor - SALG_FRITATT_FOR_MVA_UTENFOR_AVGIFTSOMRÃDET)                                                                           |Sales                      | |  51    |EXEMPT_REVERSE (Fritatt omvendt - SALG_INNENLANDSK_OMSETNING_MED_OMVENDT_AVGIFTPLIKT)                                                   |Sales                      | |  14    |HIGH_DIRECT (HÃ¸y direkt - KUN_KJÃPSMVA_HÃY_SATS)                                                                                       |Purchases                  | |  21    |HIGH_BASIS (HÃ¸y grunnlag - KUN_GRUNNLAG_KJÃPSMVA_HÃY_SATS)                                                                               |Purchases                  | |  15    |MEDIUM_DIRECT (Middels direkte - KUN_KJÃPSMVA_MIDDELS_SATS)                                                                               |Purchases                  | |  22    |MEDIUM_BASIS (Middels grunnlag - KUN_GRUNNLAG_KJÃPSMVA_MIDDELS_SATS)                                                                   |Purchases                  | |  23    |NONE_IMPORT_BASIS (Ingen import grunnlag - KUN_GRUNNLAG_KJÃPSMVA_INGEN_SATS)                                                           |Purchases                  | |  86    |HIGH_FOREIGN_SERVICE_DEDUCTIBLE (Tjeneste utlandet - TJENESTER_KJÃPT_FRA_UTLANDET_MED_FRADRAG_FOR_HÃY_MVA)                               |Purchases                  | |  87    |HIGH_FOREIGN_SERVICE_NONDEDUCTIBLE (Tjeneste utlandet uten fradrag - TJENESTER_KJÃPT_FRA_UTLANDET_UTEN_FRADRAG_FOR_HÃY_MVA)               |Purchases                  | |  88    |LOW_FOREIGN_SERVICE_DEDUCTIBLE (Lav tjeneste utlandet - TJENESTER_KJÃPT_FRA_UTLANDET_MED_FRADRAG_FOR_LAV_MVA)                           |Purchases                  | |  89    |LOW_FOREIGN_SERVICE_NONDEDUCTIBLE (Lav tjeneste utlandet uten fradrag - TJENESTER_KJÃPT_FRA_UTLANDET_UTEN_FRADRAG_FOR_LAV_MVA)           |Purchases                  | |  91    |HIGH_PURCHASE_OF_EMISSIONSTRADING_OR_GOLD_DEDUCTIBLE (Gull - KJÃP_AV_KLIMAKVOTER_ELLER_GULL_MED_FRADRAG_FOR_MVA)                       |Purchases                  | |  92    |HIGH_PURCHASE_OF_EMISSIONSTRADING_OR_GOLD_NONDEDUCTIBLE (Gull uten fradrag - KJÃP_AV_KLIMAKVOTER_ELLER_GULL_UTEN_FRADRAG_FOR_MVA)       |Purchases                  | 
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using Fiken.Client;
using Fiken.Model;
using System.Diagnostics.CodeAnalysis;

namespace Fiken.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface ISalesApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        SalesApiEvents Events { get; }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates and adds a new attachment to a Sale
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="saleId"></param>
        /// <param name="filename">The filename. Must end with either .png, .jpeg, .jpg, .gif or .pdf (optional)</param>
        /// <param name="attachToPayment">True if this attachment may document the payment (i.e. transaction receipt from credit card/payment company, export from bank, etc.). Default value is false if not specified. At least one of attachToPayment and attachToSale must be true. (optional, default to true)</param>
        /// <param name="attachToSale">True if this attachment may document the sale (i.e. invoice, etc). Default value is false if not specified. At least one of attachToPayment and attachToSale must be true. (optional, default to true)</param>
        /// <param name="file"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAddAttachmentToSaleApiResponse"/>&gt;</returns>
        Task<IAddAttachmentToSaleApiResponse> AddAttachmentToSaleAsync(string companySlug, long saleId, Option<string> filename = default, Option<bool> attachToPayment = default, Option<bool> attachToSale = default, Option<System.IO.Stream> file = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates and adds a new attachment to a Sale
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="saleId"></param>
        /// <param name="filename">The filename. Must end with either .png, .jpeg, .jpg, .gif or .pdf (optional)</param>
        /// <param name="attachToPayment">True if this attachment may document the payment (i.e. transaction receipt from credit card/payment company, export from bank, etc.). Default value is false if not specified. At least one of attachToPayment and attachToSale must be true. (optional, default to true)</param>
        /// <param name="attachToSale">True if this attachment may document the sale (i.e. invoice, etc). Default value is false if not specified. At least one of attachToPayment and attachToSale must be true. (optional, default to true)</param>
        /// <param name="file"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAddAttachmentToSaleApiResponse"/>?&gt;</returns>
        Task<IAddAttachmentToSaleApiResponse?> AddAttachmentToSaleOrDefaultAsync(string companySlug, long saleId, Option<string> filename = default, Option<bool> attachToPayment = default, Option<bool> attachToSale = default, Option<System.IO.Stream> file = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates and adds a new attachment to a draft
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="draftId">The draftId (primary key of the returned object) is returned in the GET all drafts call. </param>
        /// <param name="filename">Required. The filename. Must end with either .png, .jpeg, .jpg, .gif or .pdf (optional)</param>
        /// <param name="file"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAddAttachmentToSaleDraftApiResponse"/>&gt;</returns>
        Task<IAddAttachmentToSaleDraftApiResponse> AddAttachmentToSaleDraftAsync(string companySlug, long draftId, Option<string> filename = default, Option<System.IO.Stream> file = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates and adds a new attachment to a draft
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="draftId">The draftId (primary key of the returned object) is returned in the GET all drafts call. </param>
        /// <param name="filename">Required. The filename. Must end with either .png, .jpeg, .jpg, .gif or .pdf (optional)</param>
        /// <param name="file"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAddAttachmentToSaleDraftApiResponse"/>?&gt;</returns>
        Task<IAddAttachmentToSaleDraftApiResponse?> AddAttachmentToSaleDraftOrDefaultAsync(string companySlug, long draftId, Option<string> filename = default, Option<System.IO.Stream> file = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a new sale. This corresponds to \&quot;Annet salg\&quot; in Fiken and should be used when the invoice document and invoice number have been created outside Fiken. Otherwise the invoices-endpoints should be used.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="saleRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateSaleApiResponse"/>&gt;</returns>
        Task<ICreateSaleApiResponse> CreateSaleAsync(string companySlug, SaleRequest saleRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a new sale. This corresponds to \&quot;Annet salg\&quot; in Fiken and should be used when the invoice document and invoice number have been created outside Fiken. Otherwise the invoices-endpoints should be used.
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="saleRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateSaleApiResponse"/>?&gt;</returns>
        Task<ICreateSaleApiResponse?> CreateSaleOrDefaultAsync(string companySlug, SaleRequest saleRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a sale draft.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="draftRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateSaleDraftApiResponse"/>&gt;</returns>
        Task<ICreateSaleDraftApiResponse> CreateSaleDraftAsync(string companySlug, DraftRequest draftRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a sale draft.
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="draftRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateSaleDraftApiResponse"/>?&gt;</returns>
        Task<ICreateSaleDraftApiResponse?> CreateSaleDraftOrDefaultAsync(string companySlug, DraftRequest draftRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a sale from an already created draft.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="draftId">The draftId (primary key of the returned object) is returned in the GET all drafts call. </param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateSaleFromDraftApiResponse"/>&gt;</returns>
        Task<ICreateSaleFromDraftApiResponse> CreateSaleFromDraftAsync(string companySlug, long draftId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a sale from an already created draft.
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="draftId">The draftId (primary key of the returned object) is returned in the GET all drafts call. </param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateSaleFromDraftApiResponse"/>?&gt;</returns>
        Task<ICreateSaleFromDraftApiResponse?> CreateSaleFromDraftOrDefaultAsync(string companySlug, long draftId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a new payment for a given sale.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="saleId"></param>
        /// <param name="payment"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateSalePaymentApiResponse"/>&gt;</returns>
        Task<ICreateSalePaymentApiResponse> CreateSalePaymentAsync(string companySlug, long saleId, Payment payment, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a new payment for a given sale.
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="saleId"></param>
        /// <param name="payment"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateSalePaymentApiResponse"/>?&gt;</returns>
        Task<ICreateSalePaymentApiResponse?> CreateSalePaymentOrDefaultAsync(string companySlug, long saleId, Payment payment, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Sets the deleted flag for a sale. The sale is not deleted, but a reverse transaction is created and the \&quot;deleted\&quot; property is set to true.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="saleId"></param>
        /// <param name="description">Required description for deleting the sale</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteSaleApiResponse"/>&gt;</returns>
        Task<IDeleteSaleApiResponse> DeleteSaleAsync(string companySlug, long saleId, string description, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Sets the deleted flag for a sale. The sale is not deleted, but a reverse transaction is created and the \&quot;deleted\&quot; property is set to true.
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="saleId"></param>
        /// <param name="description">Required description for deleting the sale</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteSaleApiResponse"/>?&gt;</returns>
        Task<IDeleteSaleApiResponse?> DeleteSaleOrDefaultAsync(string companySlug, long saleId, string description, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete draft with specified id.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="draftId">The draftId (primary key of the returned object) is returned in the GET all drafts call. </param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteSaleDraftApiResponse"/>&gt;</returns>
        Task<IDeleteSaleDraftApiResponse> DeleteSaleDraftAsync(string companySlug, long draftId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete draft with specified id.
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="draftId">The draftId (primary key of the returned object) is returned in the GET all drafts call. </param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteSaleDraftApiResponse"/>?&gt;</returns>
        Task<IDeleteSaleDraftApiResponse?> DeleteSaleDraftOrDefaultAsync(string companySlug, long draftId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns sale with specified id.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="saleId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetSaleApiResponse"/>&gt;</returns>
        Task<IGetSaleApiResponse> GetSaleAsync(string companySlug, long saleId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns sale with specified id.
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="saleId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetSaleApiResponse"/>?&gt;</returns>
        Task<IGetSaleApiResponse?> GetSaleOrDefaultAsync(string companySlug, long saleId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns all attachments for specified sale.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="saleId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetSaleAttachmentsApiResponse"/>&gt;</returns>
        Task<IGetSaleAttachmentsApiResponse> GetSaleAttachmentsAsync(string companySlug, long saleId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns all attachments for specified sale.
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="saleId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetSaleAttachmentsApiResponse"/>?&gt;</returns>
        Task<IGetSaleAttachmentsApiResponse?> GetSaleAttachmentsOrDefaultAsync(string companySlug, long saleId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns draft with specified id.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="draftId">The draftId (primary key of the returned object) is returned in the GET all drafts call. </param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetSaleDraftApiResponse"/>&gt;</returns>
        Task<IGetSaleDraftApiResponse> GetSaleDraftAsync(string companySlug, long draftId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns draft with specified id.
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="draftId">The draftId (primary key of the returned object) is returned in the GET all drafts call. </param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetSaleDraftApiResponse"/>?&gt;</returns>
        Task<IGetSaleDraftApiResponse?> GetSaleDraftOrDefaultAsync(string companySlug, long draftId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns all attachments for specified draft.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="draftId">The draftId (primary key of the returned object) is returned in the GET all drafts call. </param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetSaleDraftAttachmentsApiResponse"/>&gt;</returns>
        Task<IGetSaleDraftAttachmentsApiResponse> GetSaleDraftAttachmentsAsync(string companySlug, long draftId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns all attachments for specified draft.
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="draftId">The draftId (primary key of the returned object) is returned in the GET all drafts call. </param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetSaleDraftAttachmentsApiResponse"/>?&gt;</returns>
        Task<IGetSaleDraftAttachmentsApiResponse?> GetSaleDraftAttachmentsOrDefaultAsync(string companySlug, long draftId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns all sale drafts for given company.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="page">Returns the number of the page to return. Valid page values are integers from 0 to the total number of pages. Default value is 0.  (optional, default to 0)</param>
        /// <param name="pageSize">Defines the number of entries to return on each page. Maximum number of results that can be returned at one time are 100. Default value is 25.  (optional, default to 25)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetSaleDraftsApiResponse"/>&gt;</returns>
        Task<IGetSaleDraftsApiResponse> GetSaleDraftsAsync(string companySlug, Option<int> page = default, Option<int> pageSize = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns all sale drafts for given company.
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="page">Returns the number of the page to return. Valid page values are integers from 0 to the total number of pages. Default value is 0.  (optional, default to 0)</param>
        /// <param name="pageSize">Defines the number of entries to return on each page. Maximum number of results that can be returned at one time are 100. Default value is 25.  (optional, default to 25)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetSaleDraftsApiResponse"/>?&gt;</returns>
        Task<IGetSaleDraftsApiResponse?> GetSaleDraftsOrDefaultAsync(string companySlug, Option<int> page = default, Option<int> pageSize = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns payment with specified id.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="saleId"></param>
        /// <param name="paymentId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetSalePaymentApiResponse"/>&gt;</returns>
        Task<IGetSalePaymentApiResponse> GetSalePaymentAsync(string companySlug, long saleId, long paymentId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns payment with specified id.
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="saleId"></param>
        /// <param name="paymentId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetSalePaymentApiResponse"/>?&gt;</returns>
        Task<IGetSalePaymentApiResponse?> GetSalePaymentOrDefaultAsync(string companySlug, long saleId, long paymentId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns all payments for given sale
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="saleId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetSalePaymentsApiResponse"/>&gt;</returns>
        Task<IGetSalePaymentsApiResponse> GetSalePaymentsAsync(string companySlug, long saleId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns all payments for given sale
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="saleId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetSalePaymentsApiResponse"/>?&gt;</returns>
        Task<IGetSalePaymentsApiResponse?> GetSalePaymentsOrDefaultAsync(string companySlug, long saleId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns all sales for given company
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="page">Returns the number of the page to return. Valid page values are integers from 0 to the total number of pages. Default value is 0.  (optional, default to 0)</param>
        /// <param name="pageSize">Defines the number of entries to return on each page. Maximum number of results that can be returned at one time are 100. Default value is 25.  (optional, default to 25)</param>
        /// <param name="date">Dates are represented as strings formatted as YYYY-MM-DD. Example: January 1st, 1970: \&quot;1970-01-01\&quot;  (optional)</param>
        /// <param name="dateLe">Filter based on date less than or equal to parameter value. Dates are represented as strings formatted as YYYY-MM-DD. Example: January 1st, 1970: \&quot;1970-01-01\&quot;  (optional)</param>
        /// <param name="dateLt">Filter based on date strictly less than parameter value. Dates are represented as strings formatted as YYYY-MM-DD. Example: January 1st, 1970: \&quot;1970-01-01\&quot;  (optional)</param>
        /// <param name="dateGe">Filter based on date greater than or equal to parameter value. Dates are represented as strings formatted as YYYY-MM-DD. Example: January 1st, 1970: \&quot;1970-01-01\&quot;  (optional)</param>
        /// <param name="dateGt">Filter based on date strictly greater than parameter value Dates are represented as strings formatted as YYYY-MM-DD. Example: January 1st, 1970: \&quot;1970-01-01\&quot;  (optional)</param>
        /// <param name="lastModified">Filter based on date of last modification. Returns results that were last modified on the date provided as a parameter value. Dates are represented as strings formatted as YYYY-MM-DD. Example: January 1st, 1970: \&quot;1970-01-01\&quot;  (optional)</param>
        /// <param name="lastModifiedLe">Returns results that have been last modified before or on the date provided as a parameter value. Dates are represented as strings formatted as YYYY-MM-DD. Example: January 1st, 1970: \&quot;1970-01-01\&quot;  (optional)</param>
        /// <param name="lastModifiedLt">Returns results that have been last modified strictly before the date provided as a parameter value. Dates are represented as strings formatted as YYYY-MM-DD. Example: January 1st, 1970: \&quot;1970-01-01\&quot;  (optional)</param>
        /// <param name="lastModifiedGe">Returns results that have been last modified after or on the date provided as a parameter value. Dates are represented as strings formatted as YYYY-MM-DD. Example: January 1st, 1970: \&quot;1970-01-01\&quot;  (optional)</param>
        /// <param name="lastModifiedGt">Returns results that have been last modified strictly after the date provided as a parameter value. Dates are represented as strings formatted as YYYY-MM-DD. Example: January 1st, 1970: \&quot;1970-01-01\&quot;  (optional)</param>
        /// <param name="saleNumber">Find all results with the sale number equal to the specified parameter. (optional)</param>
        /// <param name="settled">When set to true, returns only sales that have been settled. Otherwise false returns all sales that have not been fully settled.  (optional)</param>
        /// <param name="contactId">Find all sale results for a given customer (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetSalesApiResponse"/>&gt;</returns>
        Task<IGetSalesApiResponse> GetSalesAsync(string companySlug, Option<int> page = default, Option<int> pageSize = default, Option<DateOnly> date = default, Option<DateOnly> dateLe = default, Option<DateOnly> dateLt = default, Option<DateOnly> dateGe = default, Option<DateOnly> dateGt = default, Option<DateOnly> lastModified = default, Option<DateOnly> lastModifiedLe = default, Option<DateOnly> lastModifiedLt = default, Option<DateOnly> lastModifiedGe = default, Option<DateOnly> lastModifiedGt = default, Option<string> saleNumber = default, Option<bool> settled = default, Option<long> contactId = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns all sales for given company
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="page">Returns the number of the page to return. Valid page values are integers from 0 to the total number of pages. Default value is 0.  (optional, default to 0)</param>
        /// <param name="pageSize">Defines the number of entries to return on each page. Maximum number of results that can be returned at one time are 100. Default value is 25.  (optional, default to 25)</param>
        /// <param name="date">Dates are represented as strings formatted as YYYY-MM-DD. Example: January 1st, 1970: \&quot;1970-01-01\&quot;  (optional)</param>
        /// <param name="dateLe">Filter based on date less than or equal to parameter value. Dates are represented as strings formatted as YYYY-MM-DD. Example: January 1st, 1970: \&quot;1970-01-01\&quot;  (optional)</param>
        /// <param name="dateLt">Filter based on date strictly less than parameter value. Dates are represented as strings formatted as YYYY-MM-DD. Example: January 1st, 1970: \&quot;1970-01-01\&quot;  (optional)</param>
        /// <param name="dateGe">Filter based on date greater than or equal to parameter value. Dates are represented as strings formatted as YYYY-MM-DD. Example: January 1st, 1970: \&quot;1970-01-01\&quot;  (optional)</param>
        /// <param name="dateGt">Filter based on date strictly greater than parameter value Dates are represented as strings formatted as YYYY-MM-DD. Example: January 1st, 1970: \&quot;1970-01-01\&quot;  (optional)</param>
        /// <param name="lastModified">Filter based on date of last modification. Returns results that were last modified on the date provided as a parameter value. Dates are represented as strings formatted as YYYY-MM-DD. Example: January 1st, 1970: \&quot;1970-01-01\&quot;  (optional)</param>
        /// <param name="lastModifiedLe">Returns results that have been last modified before or on the date provided as a parameter value. Dates are represented as strings formatted as YYYY-MM-DD. Example: January 1st, 1970: \&quot;1970-01-01\&quot;  (optional)</param>
        /// <param name="lastModifiedLt">Returns results that have been last modified strictly before the date provided as a parameter value. Dates are represented as strings formatted as YYYY-MM-DD. Example: January 1st, 1970: \&quot;1970-01-01\&quot;  (optional)</param>
        /// <param name="lastModifiedGe">Returns results that have been last modified after or on the date provided as a parameter value. Dates are represented as strings formatted as YYYY-MM-DD. Example: January 1st, 1970: \&quot;1970-01-01\&quot;  (optional)</param>
        /// <param name="lastModifiedGt">Returns results that have been last modified strictly after the date provided as a parameter value. Dates are represented as strings formatted as YYYY-MM-DD. Example: January 1st, 1970: \&quot;1970-01-01\&quot;  (optional)</param>
        /// <param name="saleNumber">Find all results with the sale number equal to the specified parameter. (optional)</param>
        /// <param name="settled">When set to true, returns only sales that have been settled. Otherwise false returns all sales that have not been fully settled.  (optional)</param>
        /// <param name="contactId">Find all sale results for a given customer (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetSalesApiResponse"/>?&gt;</returns>
        Task<IGetSalesApiResponse?> GetSalesOrDefaultAsync(string companySlug, Option<int> page = default, Option<int> pageSize = default, Option<DateOnly> date = default, Option<DateOnly> dateLe = default, Option<DateOnly> dateLt = default, Option<DateOnly> dateGe = default, Option<DateOnly> dateGt = default, Option<DateOnly> lastModified = default, Option<DateOnly> lastModifiedLe = default, Option<DateOnly> lastModifiedLt = default, Option<DateOnly> lastModifiedGe = default, Option<DateOnly> lastModifiedGt = default, Option<string> saleNumber = default, Option<bool> settled = default, Option<long> contactId = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Marks the sale as settled without payment. This is synonymous with \&quot;sett til oppgjort uten betaling\&quot; in the GUI. It is possible to change the date of settlement by sending a new settledDate.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="saleId"></param>
        /// <param name="settledDate">Date that the sale is settled</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISettledSaleApiResponse"/>&gt;</returns>
        Task<ISettledSaleApiResponse> SettledSaleAsync(string companySlug, long saleId, DateOnly settledDate, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Marks the sale as settled without payment. This is synonymous with \&quot;sett til oppgjort uten betaling\&quot; in the GUI. It is possible to change the date of settlement by sending a new settledDate.
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="saleId"></param>
        /// <param name="settledDate">Date that the sale is settled</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISettledSaleApiResponse"/>?&gt;</returns>
        Task<ISettledSaleApiResponse?> SettledSaleOrDefaultAsync(string companySlug, long saleId, DateOnly settledDate, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates draft with provided id. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="draftId">The draftId (primary key of the returned object) is returned in the GET all drafts call. </param>
        /// <param name="draftRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateSaleDraftApiResponse"/>&gt;</returns>
        Task<IUpdateSaleDraftApiResponse> UpdateSaleDraftAsync(string companySlug, long draftId, DraftRequest draftRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates draft with provided id. 
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="draftId">The draftId (primary key of the returned object) is returned in the GET all drafts call. </param>
        /// <param name="draftRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateSaleDraftApiResponse"/>?&gt;</returns>
        Task<IUpdateSaleDraftApiResponse?> UpdateSaleDraftOrDefaultAsync(string companySlug, long draftId, DraftRequest draftRequest, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IAddAttachmentToSaleApiResponse"/>
    /// </summary>
    public interface IAddAttachmentToSaleApiResponse : Fiken.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 201 Created
        /// </summary>
        /// <returns></returns>
        bool IsCreated { get; }
    }

    /// <summary>
    /// The <see cref="IAddAttachmentToSaleDraftApiResponse"/>
    /// </summary>
    public interface IAddAttachmentToSaleDraftApiResponse : Fiken.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 201 Created
        /// </summary>
        /// <returns></returns>
        bool IsCreated { get; }
    }

    /// <summary>
    /// The <see cref="ICreateSaleApiResponse"/>
    /// </summary>
    public interface ICreateSaleApiResponse : Fiken.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 201 Created
        /// </summary>
        /// <returns></returns>
        bool IsCreated { get; }
    }

    /// <summary>
    /// The <see cref="ICreateSaleDraftApiResponse"/>
    /// </summary>
    public interface ICreateSaleDraftApiResponse : Fiken.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 201 Created
        /// </summary>
        /// <returns></returns>
        bool IsCreated { get; }
    }

    /// <summary>
    /// The <see cref="ICreateSaleFromDraftApiResponse"/>
    /// </summary>
    public interface ICreateSaleFromDraftApiResponse : Fiken.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 201 Created
        /// </summary>
        /// <returns></returns>
        bool IsCreated { get; }
    }

    /// <summary>
    /// The <see cref="ICreateSalePaymentApiResponse"/>
    /// </summary>
    public interface ICreateSalePaymentApiResponse : Fiken.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 201 Created
        /// </summary>
        /// <returns></returns>
        bool IsCreated { get; }
    }

    /// <summary>
    /// The <see cref="IDeleteSaleApiResponse"/>
    /// </summary>
    public interface IDeleteSaleApiResponse : Fiken.Client.IApiResponse, IOk<Fiken.Model.SaleResult?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IDeleteSaleDraftApiResponse"/>
    /// </summary>
    public interface IDeleteSaleDraftApiResponse : Fiken.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 204 NoContent
        /// </summary>
        /// <returns></returns>
        bool IsNoContent { get; }
    }

    /// <summary>
    /// The <see cref="IGetSaleApiResponse"/>
    /// </summary>
    public interface IGetSaleApiResponse : Fiken.Client.IApiResponse, IOk<Fiken.Model.SaleResult?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetSaleAttachmentsApiResponse"/>
    /// </summary>
    public interface IGetSaleAttachmentsApiResponse : Fiken.Client.IApiResponse, IOk<List<Attachment>?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetSaleDraftApiResponse"/>
    /// </summary>
    public interface IGetSaleDraftApiResponse : Fiken.Client.IApiResponse, IOk<Fiken.Model.DraftResult?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetSaleDraftAttachmentsApiResponse"/>
    /// </summary>
    public interface IGetSaleDraftAttachmentsApiResponse : Fiken.Client.IApiResponse, IOk<List<Attachment>?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetSaleDraftsApiResponse"/>
    /// </summary>
    public interface IGetSaleDraftsApiResponse : Fiken.Client.IApiResponse, IOk<List<DraftResult>?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetSalePaymentApiResponse"/>
    /// </summary>
    public interface IGetSalePaymentApiResponse : Fiken.Client.IApiResponse, IOk<Fiken.Model.Payment?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetSalePaymentsApiResponse"/>
    /// </summary>
    public interface IGetSalePaymentsApiResponse : Fiken.Client.IApiResponse, IOk<List<Payment>?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetSalesApiResponse"/>
    /// </summary>
    public interface IGetSalesApiResponse : Fiken.Client.IApiResponse, IOk<List<SaleResult>?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="ISettledSaleApiResponse"/>
    /// </summary>
    public interface ISettledSaleApiResponse : Fiken.Client.IApiResponse, IOk<Fiken.Model.SaleResult?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IUpdateSaleDraftApiResponse"/>
    /// </summary>
    public interface IUpdateSaleDraftApiResponse : Fiken.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 201 Created
        /// </summary>
        /// <returns></returns>
        bool IsCreated { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class SalesApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnAddAttachmentToSale;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorAddAttachmentToSale;

        internal void ExecuteOnAddAttachmentToSale(SalesApi.AddAttachmentToSaleApiResponse apiResponse)
        {
            OnAddAttachmentToSale?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorAddAttachmentToSale(Exception exception)
        {
            OnErrorAddAttachmentToSale?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnAddAttachmentToSaleDraft;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorAddAttachmentToSaleDraft;

        internal void ExecuteOnAddAttachmentToSaleDraft(SalesApi.AddAttachmentToSaleDraftApiResponse apiResponse)
        {
            OnAddAttachmentToSaleDraft?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorAddAttachmentToSaleDraft(Exception exception)
        {
            OnErrorAddAttachmentToSaleDraft?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnCreateSale;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorCreateSale;

        internal void ExecuteOnCreateSale(SalesApi.CreateSaleApiResponse apiResponse)
        {
            OnCreateSale?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorCreateSale(Exception exception)
        {
            OnErrorCreateSale?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnCreateSaleDraft;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorCreateSaleDraft;

        internal void ExecuteOnCreateSaleDraft(SalesApi.CreateSaleDraftApiResponse apiResponse)
        {
            OnCreateSaleDraft?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorCreateSaleDraft(Exception exception)
        {
            OnErrorCreateSaleDraft?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnCreateSaleFromDraft;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorCreateSaleFromDraft;

        internal void ExecuteOnCreateSaleFromDraft(SalesApi.CreateSaleFromDraftApiResponse apiResponse)
        {
            OnCreateSaleFromDraft?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorCreateSaleFromDraft(Exception exception)
        {
            OnErrorCreateSaleFromDraft?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnCreateSalePayment;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorCreateSalePayment;

        internal void ExecuteOnCreateSalePayment(SalesApi.CreateSalePaymentApiResponse apiResponse)
        {
            OnCreateSalePayment?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorCreateSalePayment(Exception exception)
        {
            OnErrorCreateSalePayment?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnDeleteSale;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorDeleteSale;

        internal void ExecuteOnDeleteSale(SalesApi.DeleteSaleApiResponse apiResponse)
        {
            OnDeleteSale?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDeleteSale(Exception exception)
        {
            OnErrorDeleteSale?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnDeleteSaleDraft;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorDeleteSaleDraft;

        internal void ExecuteOnDeleteSaleDraft(SalesApi.DeleteSaleDraftApiResponse apiResponse)
        {
            OnDeleteSaleDraft?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDeleteSaleDraft(Exception exception)
        {
            OnErrorDeleteSaleDraft?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetSale;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetSale;

        internal void ExecuteOnGetSale(SalesApi.GetSaleApiResponse apiResponse)
        {
            OnGetSale?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetSale(Exception exception)
        {
            OnErrorGetSale?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetSaleAttachments;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetSaleAttachments;

        internal void ExecuteOnGetSaleAttachments(SalesApi.GetSaleAttachmentsApiResponse apiResponse)
        {
            OnGetSaleAttachments?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetSaleAttachments(Exception exception)
        {
            OnErrorGetSaleAttachments?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetSaleDraft;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetSaleDraft;

        internal void ExecuteOnGetSaleDraft(SalesApi.GetSaleDraftApiResponse apiResponse)
        {
            OnGetSaleDraft?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetSaleDraft(Exception exception)
        {
            OnErrorGetSaleDraft?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetSaleDraftAttachments;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetSaleDraftAttachments;

        internal void ExecuteOnGetSaleDraftAttachments(SalesApi.GetSaleDraftAttachmentsApiResponse apiResponse)
        {
            OnGetSaleDraftAttachments?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetSaleDraftAttachments(Exception exception)
        {
            OnErrorGetSaleDraftAttachments?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetSaleDrafts;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetSaleDrafts;

        internal void ExecuteOnGetSaleDrafts(SalesApi.GetSaleDraftsApiResponse apiResponse)
        {
            OnGetSaleDrafts?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetSaleDrafts(Exception exception)
        {
            OnErrorGetSaleDrafts?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetSalePayment;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetSalePayment;

        internal void ExecuteOnGetSalePayment(SalesApi.GetSalePaymentApiResponse apiResponse)
        {
            OnGetSalePayment?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetSalePayment(Exception exception)
        {
            OnErrorGetSalePayment?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetSalePayments;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetSalePayments;

        internal void ExecuteOnGetSalePayments(SalesApi.GetSalePaymentsApiResponse apiResponse)
        {
            OnGetSalePayments?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetSalePayments(Exception exception)
        {
            OnErrorGetSalePayments?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetSales;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetSales;

        internal void ExecuteOnGetSales(SalesApi.GetSalesApiResponse apiResponse)
        {
            OnGetSales?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetSales(Exception exception)
        {
            OnErrorGetSales?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnSettledSale;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorSettledSale;

        internal void ExecuteOnSettledSale(SalesApi.SettledSaleApiResponse apiResponse)
        {
            OnSettledSale?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorSettledSale(Exception exception)
        {
            OnErrorSettledSale?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnUpdateSaleDraft;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorUpdateSaleDraft;

        internal void ExecuteOnUpdateSaleDraft(SalesApi.UpdateSaleDraftApiResponse apiResponse)
        {
            OnUpdateSaleDraft?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorUpdateSaleDraft(Exception exception)
        {
            OnErrorUpdateSaleDraft?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class SalesApi : ISalesApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<SalesApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public SalesApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="OauthTokenProvider"/>
        /// </summary>
        public TokenProvider<OAuthToken> OauthTokenProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="SalesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SalesApi(ILogger<SalesApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, SalesApiEvents salesApiEvents,
            TokenProvider<OAuthToken> oauthTokenProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<SalesApi>();
            HttpClient = httpClient;
            Events = salesApiEvents;
            OauthTokenProvider = oauthTokenProvider;
        }

        partial void FormatAddAttachmentToSale(ref string companySlug, ref long saleId, ref Option<string> filename, ref Option<bool> attachToPayment, ref Option<bool> attachToSale, ref Option<System.IO.Stream> file);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="companySlug"></param>
        /// <param name="filename"></param>
        /// <param name="file"></param>
        /// <returns></returns>
        private void ValidateAddAttachmentToSale(string companySlug, Option<string> filename, Option<System.IO.Stream> file)
        {
            if (companySlug == null)
                throw new ArgumentNullException(nameof(companySlug));

            if (filename.IsSet && filename.Value == null)
                throw new ArgumentNullException(nameof(filename));

            if (file.IsSet && file.Value == null)
                throw new ArgumentNullException(nameof(file));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="saleId"></param>
        /// <param name="filename"></param>
        /// <param name="attachToPayment"></param>
        /// <param name="attachToSale"></param>
        /// <param name="file"></param>
        private void AfterAddAttachmentToSaleDefaultImplementation(IAddAttachmentToSaleApiResponse apiResponseLocalVar, string companySlug, long saleId, Option<string> filename, Option<bool> attachToPayment, Option<bool> attachToSale, Option<System.IO.Stream> file)
        {
            bool suppressDefaultLog = false;
            AfterAddAttachmentToSale(ref suppressDefaultLog, apiResponseLocalVar, companySlug, saleId, filename, attachToPayment, attachToSale, file);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="saleId"></param>
        /// <param name="filename"></param>
        /// <param name="attachToPayment"></param>
        /// <param name="attachToSale"></param>
        /// <param name="file"></param>
        partial void AfterAddAttachmentToSale(ref bool suppressDefaultLog, IAddAttachmentToSaleApiResponse apiResponseLocalVar, string companySlug, long saleId, Option<string> filename, Option<bool> attachToPayment, Option<bool> attachToSale, Option<System.IO.Stream> file);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="saleId"></param>
        /// <param name="filename"></param>
        /// <param name="attachToPayment"></param>
        /// <param name="attachToSale"></param>
        /// <param name="file"></param>
        private void OnErrorAddAttachmentToSaleDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string companySlug, long saleId, Option<string> filename, Option<bool> attachToPayment, Option<bool> attachToSale, Option<System.IO.Stream> file)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorAddAttachmentToSale(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, companySlug, saleId, filename, attachToPayment, attachToSale, file);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="saleId"></param>
        /// <param name="filename"></param>
        /// <param name="attachToPayment"></param>
        /// <param name="attachToSale"></param>
        /// <param name="file"></param>
        partial void OnErrorAddAttachmentToSale(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string companySlug, long saleId, Option<string> filename, Option<bool> attachToPayment, Option<bool> attachToSale, Option<System.IO.Stream> file);

        /// <summary>
        ///  Creates and adds a new attachment to a Sale
        /// </summary>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="saleId"></param>
        /// <param name="filename">The filename. Must end with either .png, .jpeg, .jpg, .gif or .pdf (optional)</param>
        /// <param name="attachToPayment">True if this attachment may document the payment (i.e. transaction receipt from credit card/payment company, export from bank, etc.). Default value is false if not specified. At least one of attachToPayment and attachToSale must be true. (optional, default to true)</param>
        /// <param name="attachToSale">True if this attachment may document the sale (i.e. invoice, etc). Default value is false if not specified. At least one of attachToPayment and attachToSale must be true. (optional, default to true)</param>
        /// <param name="file"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAddAttachmentToSaleApiResponse"/>&gt;</returns>
        public async Task<IAddAttachmentToSaleApiResponse?> AddAttachmentToSaleOrDefaultAsync(string companySlug, long saleId, Option<string> filename = default, Option<bool> attachToPayment = default, Option<bool> attachToSale = default, Option<System.IO.Stream> file = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await AddAttachmentToSaleAsync(companySlug, saleId, filename, attachToPayment, attachToSale, file, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  Creates and adds a new attachment to a Sale
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="saleId"></param>
        /// <param name="filename">The filename. Must end with either .png, .jpeg, .jpg, .gif or .pdf (optional)</param>
        /// <param name="attachToPayment">True if this attachment may document the payment (i.e. transaction receipt from credit card/payment company, export from bank, etc.). Default value is false if not specified. At least one of attachToPayment and attachToSale must be true. (optional, default to true)</param>
        /// <param name="attachToSale">True if this attachment may document the sale (i.e. invoice, etc). Default value is false if not specified. At least one of attachToPayment and attachToSale must be true. (optional, default to true)</param>
        /// <param name="file"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAddAttachmentToSaleApiResponse"/>&gt;</returns>
        public async Task<IAddAttachmentToSaleApiResponse> AddAttachmentToSaleAsync(string companySlug, long saleId, Option<string> filename = default, Option<bool> attachToPayment = default, Option<bool> attachToSale = default, Option<System.IO.Stream> file = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateAddAttachmentToSale(companySlug, filename, file);

                FormatAddAttachmentToSale(ref companySlug, ref saleId, ref filename, ref attachToPayment, ref attachToSale, ref file);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/companies/{companySlug}/sales/{saleId}/attachments";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BcompanySlug%7D", Uri.EscapeDataString(companySlug.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BsaleId%7D", Uri.EscapeDataString(saleId.ToString()));

                    MultipartContent multipartContentLocalVar = new MultipartContent();

                    httpRequestMessageLocalVar.Content = multipartContentLocalVar;

                    List<KeyValuePair<string?, string?>> formParameterLocalVars = new List<KeyValuePair<string?, string?>>();

                    multipartContentLocalVar.Add(new FormUrlEncodedContent(formParameterLocalVars));                    if (filename.IsSet)
                        formParameterLocalVars.Add(new KeyValuePair<string?, string?>("filename", ClientUtils.ParameterToString(filename.Value)));

                    if (attachToPayment.IsSet)
                        formParameterLocalVars.Add(new KeyValuePair<string?, string?>("attachToPayment", ClientUtils.ParameterToString(attachToPayment.Value)));

                    if (attachToSale.IsSet)
                        formParameterLocalVars.Add(new KeyValuePair<string?, string?>("attachToSale", ClientUtils.ParameterToString(attachToSale.Value)));

                    if (file.IsSet)
                        multipartContentLocalVar.Add(new StreamContent(file.Value));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "multipart/form-data"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<AddAttachmentToSaleApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<AddAttachmentToSaleApiResponse>();

                        AddAttachmentToSaleApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/companies/{companySlug}/sales/{saleId}/attachments", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterAddAttachmentToSaleDefaultImplementation(apiResponseLocalVar, companySlug, saleId, filename, attachToPayment, attachToSale, file);

                        Events.ExecuteOnAddAttachmentToSale(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorAddAttachmentToSaleDefaultImplementation(e, "/companies/{companySlug}/sales/{saleId}/attachments", uriBuilderLocalVar.Path, companySlug, saleId, filename, attachToPayment, attachToSale, file);
                Events.ExecuteOnErrorAddAttachmentToSale(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="AddAttachmentToSaleApiResponse"/>
        /// </summary>
        public partial class AddAttachmentToSaleApiResponse : Fiken.Client.ApiResponse, IAddAttachmentToSaleApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<AddAttachmentToSaleApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="AddAttachmentToSaleApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public AddAttachmentToSaleApiResponse(ILogger<AddAttachmentToSaleApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public bool IsCreated => 201 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatAddAttachmentToSaleDraft(ref string companySlug, ref long draftId, ref Option<string> filename, ref Option<System.IO.Stream> file);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="companySlug"></param>
        /// <param name="filename"></param>
        /// <param name="file"></param>
        /// <returns></returns>
        private void ValidateAddAttachmentToSaleDraft(string companySlug, Option<string> filename, Option<System.IO.Stream> file)
        {
            if (companySlug == null)
                throw new ArgumentNullException(nameof(companySlug));

            if (filename.IsSet && filename.Value == null)
                throw new ArgumentNullException(nameof(filename));

            if (file.IsSet && file.Value == null)
                throw new ArgumentNullException(nameof(file));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="draftId"></param>
        /// <param name="filename"></param>
        /// <param name="file"></param>
        private void AfterAddAttachmentToSaleDraftDefaultImplementation(IAddAttachmentToSaleDraftApiResponse apiResponseLocalVar, string companySlug, long draftId, Option<string> filename, Option<System.IO.Stream> file)
        {
            bool suppressDefaultLog = false;
            AfterAddAttachmentToSaleDraft(ref suppressDefaultLog, apiResponseLocalVar, companySlug, draftId, filename, file);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="draftId"></param>
        /// <param name="filename"></param>
        /// <param name="file"></param>
        partial void AfterAddAttachmentToSaleDraft(ref bool suppressDefaultLog, IAddAttachmentToSaleDraftApiResponse apiResponseLocalVar, string companySlug, long draftId, Option<string> filename, Option<System.IO.Stream> file);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="draftId"></param>
        /// <param name="filename"></param>
        /// <param name="file"></param>
        private void OnErrorAddAttachmentToSaleDraftDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string companySlug, long draftId, Option<string> filename, Option<System.IO.Stream> file)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorAddAttachmentToSaleDraft(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, companySlug, draftId, filename, file);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="draftId"></param>
        /// <param name="filename"></param>
        /// <param name="file"></param>
        partial void OnErrorAddAttachmentToSaleDraft(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string companySlug, long draftId, Option<string> filename, Option<System.IO.Stream> file);

        /// <summary>
        ///  Creates and adds a new attachment to a draft
        /// </summary>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="draftId">The draftId (primary key of the returned object) is returned in the GET all drafts call. </param>
        /// <param name="filename">Required. The filename. Must end with either .png, .jpeg, .jpg, .gif or .pdf (optional)</param>
        /// <param name="file"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAddAttachmentToSaleDraftApiResponse"/>&gt;</returns>
        public async Task<IAddAttachmentToSaleDraftApiResponse?> AddAttachmentToSaleDraftOrDefaultAsync(string companySlug, long draftId, Option<string> filename = default, Option<System.IO.Stream> file = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await AddAttachmentToSaleDraftAsync(companySlug, draftId, filename, file, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  Creates and adds a new attachment to a draft
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="draftId">The draftId (primary key of the returned object) is returned in the GET all drafts call. </param>
        /// <param name="filename">Required. The filename. Must end with either .png, .jpeg, .jpg, .gif or .pdf (optional)</param>
        /// <param name="file"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAddAttachmentToSaleDraftApiResponse"/>&gt;</returns>
        public async Task<IAddAttachmentToSaleDraftApiResponse> AddAttachmentToSaleDraftAsync(string companySlug, long draftId, Option<string> filename = default, Option<System.IO.Stream> file = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateAddAttachmentToSaleDraft(companySlug, filename, file);

                FormatAddAttachmentToSaleDraft(ref companySlug, ref draftId, ref filename, ref file);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/companies/{companySlug}/sales/drafts/{draftId}/attachments";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BcompanySlug%7D", Uri.EscapeDataString(companySlug.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BdraftId%7D", Uri.EscapeDataString(draftId.ToString()));

                    MultipartContent multipartContentLocalVar = new MultipartContent();

                    httpRequestMessageLocalVar.Content = multipartContentLocalVar;

                    List<KeyValuePair<string?, string?>> formParameterLocalVars = new List<KeyValuePair<string?, string?>>();

                    multipartContentLocalVar.Add(new FormUrlEncodedContent(formParameterLocalVars));                    if (filename.IsSet)
                        formParameterLocalVars.Add(new KeyValuePair<string?, string?>("filename", ClientUtils.ParameterToString(filename.Value)));

                    if (file.IsSet)
                        multipartContentLocalVar.Add(new StreamContent(file.Value));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "multipart/form-data"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<AddAttachmentToSaleDraftApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<AddAttachmentToSaleDraftApiResponse>();

                        AddAttachmentToSaleDraftApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/companies/{companySlug}/sales/drafts/{draftId}/attachments", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterAddAttachmentToSaleDraftDefaultImplementation(apiResponseLocalVar, companySlug, draftId, filename, file);

                        Events.ExecuteOnAddAttachmentToSaleDraft(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorAddAttachmentToSaleDraftDefaultImplementation(e, "/companies/{companySlug}/sales/drafts/{draftId}/attachments", uriBuilderLocalVar.Path, companySlug, draftId, filename, file);
                Events.ExecuteOnErrorAddAttachmentToSaleDraft(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="AddAttachmentToSaleDraftApiResponse"/>
        /// </summary>
        public partial class AddAttachmentToSaleDraftApiResponse : Fiken.Client.ApiResponse, IAddAttachmentToSaleDraftApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<AddAttachmentToSaleDraftApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="AddAttachmentToSaleDraftApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public AddAttachmentToSaleDraftApiResponse(ILogger<AddAttachmentToSaleDraftApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public bool IsCreated => 201 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatCreateSale(ref string companySlug, SaleRequest saleRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="companySlug"></param>
        /// <param name="saleRequest"></param>
        /// <returns></returns>
        private void ValidateCreateSale(string companySlug, SaleRequest saleRequest)
        {
            if (companySlug == null)
                throw new ArgumentNullException(nameof(companySlug));

            if (saleRequest == null)
                throw new ArgumentNullException(nameof(saleRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="saleRequest"></param>
        private void AfterCreateSaleDefaultImplementation(ICreateSaleApiResponse apiResponseLocalVar, string companySlug, SaleRequest saleRequest)
        {
            bool suppressDefaultLog = false;
            AfterCreateSale(ref suppressDefaultLog, apiResponseLocalVar, companySlug, saleRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="saleRequest"></param>
        partial void AfterCreateSale(ref bool suppressDefaultLog, ICreateSaleApiResponse apiResponseLocalVar, string companySlug, SaleRequest saleRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="saleRequest"></param>
        private void OnErrorCreateSaleDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string companySlug, SaleRequest saleRequest)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorCreateSale(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, companySlug, saleRequest);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="saleRequest"></param>
        partial void OnErrorCreateSale(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string companySlug, SaleRequest saleRequest);

        /// <summary>
        ///  Creates a new sale. This corresponds to \&quot;Annet salg\&quot; in Fiken and should be used when the invoice document and invoice number have been created outside Fiken. Otherwise the invoices-endpoints should be used.
        /// </summary>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="saleRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateSaleApiResponse"/>&gt;</returns>
        public async Task<ICreateSaleApiResponse?> CreateSaleOrDefaultAsync(string companySlug, SaleRequest saleRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await CreateSaleAsync(companySlug, saleRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  Creates a new sale. This corresponds to \&quot;Annet salg\&quot; in Fiken and should be used when the invoice document and invoice number have been created outside Fiken. Otherwise the invoices-endpoints should be used.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="saleRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateSaleApiResponse"/>&gt;</returns>
        public async Task<ICreateSaleApiResponse> CreateSaleAsync(string companySlug, SaleRequest saleRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateCreateSale(companySlug, saleRequest);

                FormatCreateSale(ref companySlug, saleRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/companies/{companySlug}/sales";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BcompanySlug%7D", Uri.EscapeDataString(companySlug.ToString()));

                    httpRequestMessageLocalVar.Content = (saleRequest as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(saleRequest, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<CreateSaleApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<CreateSaleApiResponse>();

                        CreateSaleApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/companies/{companySlug}/sales", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterCreateSaleDefaultImplementation(apiResponseLocalVar, companySlug, saleRequest);

                        Events.ExecuteOnCreateSale(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorCreateSaleDefaultImplementation(e, "/companies/{companySlug}/sales", uriBuilderLocalVar.Path, companySlug, saleRequest);
                Events.ExecuteOnErrorCreateSale(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="CreateSaleApiResponse"/>
        /// </summary>
        public partial class CreateSaleApiResponse : Fiken.Client.ApiResponse, ICreateSaleApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<CreateSaleApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="CreateSaleApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public CreateSaleApiResponse(ILogger<CreateSaleApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public bool IsCreated => 201 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatCreateSaleDraft(ref string companySlug, DraftRequest draftRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="companySlug"></param>
        /// <param name="draftRequest"></param>
        /// <returns></returns>
        private void ValidateCreateSaleDraft(string companySlug, DraftRequest draftRequest)
        {
            if (companySlug == null)
                throw new ArgumentNullException(nameof(companySlug));

            if (draftRequest == null)
                throw new ArgumentNullException(nameof(draftRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="draftRequest"></param>
        private void AfterCreateSaleDraftDefaultImplementation(ICreateSaleDraftApiResponse apiResponseLocalVar, string companySlug, DraftRequest draftRequest)
        {
            bool suppressDefaultLog = false;
            AfterCreateSaleDraft(ref suppressDefaultLog, apiResponseLocalVar, companySlug, draftRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="draftRequest"></param>
        partial void AfterCreateSaleDraft(ref bool suppressDefaultLog, ICreateSaleDraftApiResponse apiResponseLocalVar, string companySlug, DraftRequest draftRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="draftRequest"></param>
        private void OnErrorCreateSaleDraftDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string companySlug, DraftRequest draftRequest)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorCreateSaleDraft(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, companySlug, draftRequest);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="draftRequest"></param>
        partial void OnErrorCreateSaleDraft(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string companySlug, DraftRequest draftRequest);

        /// <summary>
        ///  Creates a sale draft.
        /// </summary>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="draftRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateSaleDraftApiResponse"/>&gt;</returns>
        public async Task<ICreateSaleDraftApiResponse?> CreateSaleDraftOrDefaultAsync(string companySlug, DraftRequest draftRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await CreateSaleDraftAsync(companySlug, draftRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  Creates a sale draft.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="draftRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateSaleDraftApiResponse"/>&gt;</returns>
        public async Task<ICreateSaleDraftApiResponse> CreateSaleDraftAsync(string companySlug, DraftRequest draftRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateCreateSaleDraft(companySlug, draftRequest);

                FormatCreateSaleDraft(ref companySlug, draftRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/companies/{companySlug}/sales/drafts";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BcompanySlug%7D", Uri.EscapeDataString(companySlug.ToString()));

                    httpRequestMessageLocalVar.Content = (draftRequest as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(draftRequest, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<CreateSaleDraftApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<CreateSaleDraftApiResponse>();

                        CreateSaleDraftApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/companies/{companySlug}/sales/drafts", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterCreateSaleDraftDefaultImplementation(apiResponseLocalVar, companySlug, draftRequest);

                        Events.ExecuteOnCreateSaleDraft(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorCreateSaleDraftDefaultImplementation(e, "/companies/{companySlug}/sales/drafts", uriBuilderLocalVar.Path, companySlug, draftRequest);
                Events.ExecuteOnErrorCreateSaleDraft(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="CreateSaleDraftApiResponse"/>
        /// </summary>
        public partial class CreateSaleDraftApiResponse : Fiken.Client.ApiResponse, ICreateSaleDraftApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<CreateSaleDraftApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="CreateSaleDraftApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public CreateSaleDraftApiResponse(ILogger<CreateSaleDraftApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public bool IsCreated => 201 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatCreateSaleFromDraft(ref string companySlug, ref long draftId);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="companySlug"></param>
        /// <returns></returns>
        private void ValidateCreateSaleFromDraft(string companySlug)
        {
            if (companySlug == null)
                throw new ArgumentNullException(nameof(companySlug));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="draftId"></param>
        private void AfterCreateSaleFromDraftDefaultImplementation(ICreateSaleFromDraftApiResponse apiResponseLocalVar, string companySlug, long draftId)
        {
            bool suppressDefaultLog = false;
            AfterCreateSaleFromDraft(ref suppressDefaultLog, apiResponseLocalVar, companySlug, draftId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="draftId"></param>
        partial void AfterCreateSaleFromDraft(ref bool suppressDefaultLog, ICreateSaleFromDraftApiResponse apiResponseLocalVar, string companySlug, long draftId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="draftId"></param>
        private void OnErrorCreateSaleFromDraftDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string companySlug, long draftId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorCreateSaleFromDraft(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, companySlug, draftId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="draftId"></param>
        partial void OnErrorCreateSaleFromDraft(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string companySlug, long draftId);

        /// <summary>
        ///  Creates a sale from an already created draft.
        /// </summary>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="draftId">The draftId (primary key of the returned object) is returned in the GET all drafts call. </param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateSaleFromDraftApiResponse"/>&gt;</returns>
        public async Task<ICreateSaleFromDraftApiResponse?> CreateSaleFromDraftOrDefaultAsync(string companySlug, long draftId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await CreateSaleFromDraftAsync(companySlug, draftId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  Creates a sale from an already created draft.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="draftId">The draftId (primary key of the returned object) is returned in the GET all drafts call. </param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateSaleFromDraftApiResponse"/>&gt;</returns>
        public async Task<ICreateSaleFromDraftApiResponse> CreateSaleFromDraftAsync(string companySlug, long draftId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateCreateSaleFromDraft(companySlug);

                FormatCreateSaleFromDraft(ref companySlug, ref draftId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/companies/{companySlug}/sales/drafts/{draftId}/createSale";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BcompanySlug%7D", Uri.EscapeDataString(companySlug.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BdraftId%7D", Uri.EscapeDataString(draftId.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<CreateSaleFromDraftApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<CreateSaleFromDraftApiResponse>();

                        CreateSaleFromDraftApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/companies/{companySlug}/sales/drafts/{draftId}/createSale", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterCreateSaleFromDraftDefaultImplementation(apiResponseLocalVar, companySlug, draftId);

                        Events.ExecuteOnCreateSaleFromDraft(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorCreateSaleFromDraftDefaultImplementation(e, "/companies/{companySlug}/sales/drafts/{draftId}/createSale", uriBuilderLocalVar.Path, companySlug, draftId);
                Events.ExecuteOnErrorCreateSaleFromDraft(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="CreateSaleFromDraftApiResponse"/>
        /// </summary>
        public partial class CreateSaleFromDraftApiResponse : Fiken.Client.ApiResponse, ICreateSaleFromDraftApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<CreateSaleFromDraftApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="CreateSaleFromDraftApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public CreateSaleFromDraftApiResponse(ILogger<CreateSaleFromDraftApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public bool IsCreated => 201 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatCreateSalePayment(ref string companySlug, ref long saleId, Payment payment);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="companySlug"></param>
        /// <param name="payment"></param>
        /// <returns></returns>
        private void ValidateCreateSalePayment(string companySlug, Payment payment)
        {
            if (companySlug == null)
                throw new ArgumentNullException(nameof(companySlug));

            if (payment == null)
                throw new ArgumentNullException(nameof(payment));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="saleId"></param>
        /// <param name="payment"></param>
        private void AfterCreateSalePaymentDefaultImplementation(ICreateSalePaymentApiResponse apiResponseLocalVar, string companySlug, long saleId, Payment payment)
        {
            bool suppressDefaultLog = false;
            AfterCreateSalePayment(ref suppressDefaultLog, apiResponseLocalVar, companySlug, saleId, payment);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="saleId"></param>
        /// <param name="payment"></param>
        partial void AfterCreateSalePayment(ref bool suppressDefaultLog, ICreateSalePaymentApiResponse apiResponseLocalVar, string companySlug, long saleId, Payment payment);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="saleId"></param>
        /// <param name="payment"></param>
        private void OnErrorCreateSalePaymentDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string companySlug, long saleId, Payment payment)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorCreateSalePayment(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, companySlug, saleId, payment);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="saleId"></param>
        /// <param name="payment"></param>
        partial void OnErrorCreateSalePayment(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string companySlug, long saleId, Payment payment);

        /// <summary>
        ///  Creates a new payment for a given sale.
        /// </summary>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="saleId"></param>
        /// <param name="payment"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateSalePaymentApiResponse"/>&gt;</returns>
        public async Task<ICreateSalePaymentApiResponse?> CreateSalePaymentOrDefaultAsync(string companySlug, long saleId, Payment payment, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await CreateSalePaymentAsync(companySlug, saleId, payment, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  Creates a new payment for a given sale.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="saleId"></param>
        /// <param name="payment"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateSalePaymentApiResponse"/>&gt;</returns>
        public async Task<ICreateSalePaymentApiResponse> CreateSalePaymentAsync(string companySlug, long saleId, Payment payment, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateCreateSalePayment(companySlug, payment);

                FormatCreateSalePayment(ref companySlug, ref saleId, payment);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/companies/{companySlug}/sales/{saleId}/payments";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BcompanySlug%7D", Uri.EscapeDataString(companySlug.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BsaleId%7D", Uri.EscapeDataString(saleId.ToString()));

                    httpRequestMessageLocalVar.Content = (payment as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(payment, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<CreateSalePaymentApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<CreateSalePaymentApiResponse>();

                        CreateSalePaymentApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/companies/{companySlug}/sales/{saleId}/payments", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterCreateSalePaymentDefaultImplementation(apiResponseLocalVar, companySlug, saleId, payment);

                        Events.ExecuteOnCreateSalePayment(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorCreateSalePaymentDefaultImplementation(e, "/companies/{companySlug}/sales/{saleId}/payments", uriBuilderLocalVar.Path, companySlug, saleId, payment);
                Events.ExecuteOnErrorCreateSalePayment(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="CreateSalePaymentApiResponse"/>
        /// </summary>
        public partial class CreateSalePaymentApiResponse : Fiken.Client.ApiResponse, ICreateSalePaymentApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<CreateSalePaymentApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="CreateSalePaymentApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public CreateSalePaymentApiResponse(ILogger<CreateSalePaymentApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public bool IsCreated => 201 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatDeleteSale(ref string companySlug, ref long saleId, ref string description);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="companySlug"></param>
        /// <param name="description"></param>
        /// <returns></returns>
        private void ValidateDeleteSale(string companySlug, string description)
        {
            if (companySlug == null)
                throw new ArgumentNullException(nameof(companySlug));

            if (description == null)
                throw new ArgumentNullException(nameof(description));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="saleId"></param>
        /// <param name="description"></param>
        private void AfterDeleteSaleDefaultImplementation(IDeleteSaleApiResponse apiResponseLocalVar, string companySlug, long saleId, string description)
        {
            bool suppressDefaultLog = false;
            AfterDeleteSale(ref suppressDefaultLog, apiResponseLocalVar, companySlug, saleId, description);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="saleId"></param>
        /// <param name="description"></param>
        partial void AfterDeleteSale(ref bool suppressDefaultLog, IDeleteSaleApiResponse apiResponseLocalVar, string companySlug, long saleId, string description);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="saleId"></param>
        /// <param name="description"></param>
        private void OnErrorDeleteSaleDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string companySlug, long saleId, string description)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorDeleteSale(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, companySlug, saleId, description);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="saleId"></param>
        /// <param name="description"></param>
        partial void OnErrorDeleteSale(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string companySlug, long saleId, string description);

        /// <summary>
        ///  Sets the deleted flag for a sale. The sale is not deleted, but a reverse transaction is created and the \&quot;deleted\&quot; property is set to true.
        /// </summary>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="saleId"></param>
        /// <param name="description">Required description for deleting the sale</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteSaleApiResponse"/>&gt;</returns>
        public async Task<IDeleteSaleApiResponse?> DeleteSaleOrDefaultAsync(string companySlug, long saleId, string description, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DeleteSaleAsync(companySlug, saleId, description, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  Sets the deleted flag for a sale. The sale is not deleted, but a reverse transaction is created and the \&quot;deleted\&quot; property is set to true.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="saleId"></param>
        /// <param name="description">Required description for deleting the sale</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteSaleApiResponse"/>&gt;</returns>
        public async Task<IDeleteSaleApiResponse> DeleteSaleAsync(string companySlug, long saleId, string description, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateDeleteSale(companySlug, description);

                FormatDeleteSale(ref companySlug, ref saleId, ref description);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/companies/{companySlug}/sales/{saleId}/delete";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BcompanySlug%7D", Uri.EscapeDataString(companySlug.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BsaleId%7D", Uri.EscapeDataString(saleId.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    parseQueryStringLocalVar["description"] = ClientUtils.ParameterToString(description);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Patch;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<DeleteSaleApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DeleteSaleApiResponse>();

                        DeleteSaleApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/companies/{companySlug}/sales/{saleId}/delete", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterDeleteSaleDefaultImplementation(apiResponseLocalVar, companySlug, saleId, description);

                        Events.ExecuteOnDeleteSale(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDeleteSaleDefaultImplementation(e, "/companies/{companySlug}/sales/{saleId}/delete", uriBuilderLocalVar.Path, companySlug, saleId, description);
                Events.ExecuteOnErrorDeleteSale(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DeleteSaleApiResponse"/>
        /// </summary>
        public partial class DeleteSaleApiResponse : Fiken.Client.ApiResponse, IDeleteSaleApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DeleteSaleApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DeleteSaleApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeleteSaleApiResponse(ILogger<DeleteSaleApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Fiken.Model.SaleResult? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Fiken.Model.SaleResult>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Fiken.Model.SaleResult? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatDeleteSaleDraft(ref string companySlug, ref long draftId);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="companySlug"></param>
        /// <returns></returns>
        private void ValidateDeleteSaleDraft(string companySlug)
        {
            if (companySlug == null)
                throw new ArgumentNullException(nameof(companySlug));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="draftId"></param>
        private void AfterDeleteSaleDraftDefaultImplementation(IDeleteSaleDraftApiResponse apiResponseLocalVar, string companySlug, long draftId)
        {
            bool suppressDefaultLog = false;
            AfterDeleteSaleDraft(ref suppressDefaultLog, apiResponseLocalVar, companySlug, draftId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="draftId"></param>
        partial void AfterDeleteSaleDraft(ref bool suppressDefaultLog, IDeleteSaleDraftApiResponse apiResponseLocalVar, string companySlug, long draftId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="draftId"></param>
        private void OnErrorDeleteSaleDraftDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string companySlug, long draftId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorDeleteSaleDraft(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, companySlug, draftId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="draftId"></param>
        partial void OnErrorDeleteSaleDraft(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string companySlug, long draftId);

        /// <summary>
        ///  Delete draft with specified id.
        /// </summary>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="draftId">The draftId (primary key of the returned object) is returned in the GET all drafts call. </param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteSaleDraftApiResponse"/>&gt;</returns>
        public async Task<IDeleteSaleDraftApiResponse?> DeleteSaleDraftOrDefaultAsync(string companySlug, long draftId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DeleteSaleDraftAsync(companySlug, draftId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  Delete draft with specified id.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="draftId">The draftId (primary key of the returned object) is returned in the GET all drafts call. </param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteSaleDraftApiResponse"/>&gt;</returns>
        public async Task<IDeleteSaleDraftApiResponse> DeleteSaleDraftAsync(string companySlug, long draftId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateDeleteSaleDraft(companySlug);

                FormatDeleteSaleDraft(ref companySlug, ref draftId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/companies/{companySlug}/sales/drafts/{draftId}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BcompanySlug%7D", Uri.EscapeDataString(companySlug.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BdraftId%7D", Uri.EscapeDataString(draftId.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    httpRequestMessageLocalVar.Method = HttpMethod.Delete;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<DeleteSaleDraftApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DeleteSaleDraftApiResponse>();

                        DeleteSaleDraftApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/companies/{companySlug}/sales/drafts/{draftId}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterDeleteSaleDraftDefaultImplementation(apiResponseLocalVar, companySlug, draftId);

                        Events.ExecuteOnDeleteSaleDraft(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDeleteSaleDraftDefaultImplementation(e, "/companies/{companySlug}/sales/drafts/{draftId}", uriBuilderLocalVar.Path, companySlug, draftId);
                Events.ExecuteOnErrorDeleteSaleDraft(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DeleteSaleDraftApiResponse"/>
        /// </summary>
        public partial class DeleteSaleDraftApiResponse : Fiken.Client.ApiResponse, IDeleteSaleDraftApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DeleteSaleDraftApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DeleteSaleDraftApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeleteSaleDraftApiResponse(ILogger<DeleteSaleDraftApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 204 NoContent
            /// </summary>
            /// <returns></returns>
            public bool IsNoContent => 204 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetSale(ref string companySlug, ref long saleId);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="companySlug"></param>
        /// <returns></returns>
        private void ValidateGetSale(string companySlug)
        {
            if (companySlug == null)
                throw new ArgumentNullException(nameof(companySlug));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="saleId"></param>
        private void AfterGetSaleDefaultImplementation(IGetSaleApiResponse apiResponseLocalVar, string companySlug, long saleId)
        {
            bool suppressDefaultLog = false;
            AfterGetSale(ref suppressDefaultLog, apiResponseLocalVar, companySlug, saleId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="saleId"></param>
        partial void AfterGetSale(ref bool suppressDefaultLog, IGetSaleApiResponse apiResponseLocalVar, string companySlug, long saleId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="saleId"></param>
        private void OnErrorGetSaleDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string companySlug, long saleId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetSale(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, companySlug, saleId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="saleId"></param>
        partial void OnErrorGetSale(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string companySlug, long saleId);

        /// <summary>
        ///  Returns sale with specified id.
        /// </summary>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="saleId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetSaleApiResponse"/>&gt;</returns>
        public async Task<IGetSaleApiResponse?> GetSaleOrDefaultAsync(string companySlug, long saleId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetSaleAsync(companySlug, saleId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  Returns sale with specified id.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="saleId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetSaleApiResponse"/>&gt;</returns>
        public async Task<IGetSaleApiResponse> GetSaleAsync(string companySlug, long saleId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetSale(companySlug);

                FormatGetSale(ref companySlug, ref saleId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/companies/{companySlug}/sales/{saleId}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BcompanySlug%7D", Uri.EscapeDataString(companySlug.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BsaleId%7D", Uri.EscapeDataString(saleId.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetSaleApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetSaleApiResponse>();

                        GetSaleApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/companies/{companySlug}/sales/{saleId}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetSaleDefaultImplementation(apiResponseLocalVar, companySlug, saleId);

                        Events.ExecuteOnGetSale(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetSaleDefaultImplementation(e, "/companies/{companySlug}/sales/{saleId}", uriBuilderLocalVar.Path, companySlug, saleId);
                Events.ExecuteOnErrorGetSale(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetSaleApiResponse"/>
        /// </summary>
        public partial class GetSaleApiResponse : Fiken.Client.ApiResponse, IGetSaleApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetSaleApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetSaleApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetSaleApiResponse(ILogger<GetSaleApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Fiken.Model.SaleResult? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Fiken.Model.SaleResult>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Fiken.Model.SaleResult? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetSaleAttachments(ref string companySlug, ref long saleId);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="companySlug"></param>
        /// <returns></returns>
        private void ValidateGetSaleAttachments(string companySlug)
        {
            if (companySlug == null)
                throw new ArgumentNullException(nameof(companySlug));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="saleId"></param>
        private void AfterGetSaleAttachmentsDefaultImplementation(IGetSaleAttachmentsApiResponse apiResponseLocalVar, string companySlug, long saleId)
        {
            bool suppressDefaultLog = false;
            AfterGetSaleAttachments(ref suppressDefaultLog, apiResponseLocalVar, companySlug, saleId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="saleId"></param>
        partial void AfterGetSaleAttachments(ref bool suppressDefaultLog, IGetSaleAttachmentsApiResponse apiResponseLocalVar, string companySlug, long saleId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="saleId"></param>
        private void OnErrorGetSaleAttachmentsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string companySlug, long saleId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetSaleAttachments(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, companySlug, saleId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="saleId"></param>
        partial void OnErrorGetSaleAttachments(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string companySlug, long saleId);

        /// <summary>
        ///  Returns all attachments for specified sale.
        /// </summary>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="saleId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetSaleAttachmentsApiResponse"/>&gt;</returns>
        public async Task<IGetSaleAttachmentsApiResponse?> GetSaleAttachmentsOrDefaultAsync(string companySlug, long saleId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetSaleAttachmentsAsync(companySlug, saleId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  Returns all attachments for specified sale.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="saleId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetSaleAttachmentsApiResponse"/>&gt;</returns>
        public async Task<IGetSaleAttachmentsApiResponse> GetSaleAttachmentsAsync(string companySlug, long saleId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetSaleAttachments(companySlug);

                FormatGetSaleAttachments(ref companySlug, ref saleId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/companies/{companySlug}/sales/{saleId}/attachments";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BcompanySlug%7D", Uri.EscapeDataString(companySlug.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BsaleId%7D", Uri.EscapeDataString(saleId.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetSaleAttachmentsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetSaleAttachmentsApiResponse>();

                        GetSaleAttachmentsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/companies/{companySlug}/sales/{saleId}/attachments", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetSaleAttachmentsDefaultImplementation(apiResponseLocalVar, companySlug, saleId);

                        Events.ExecuteOnGetSaleAttachments(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetSaleAttachmentsDefaultImplementation(e, "/companies/{companySlug}/sales/{saleId}/attachments", uriBuilderLocalVar.Path, companySlug, saleId);
                Events.ExecuteOnErrorGetSaleAttachments(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetSaleAttachmentsApiResponse"/>
        /// </summary>
        public partial class GetSaleAttachmentsApiResponse : Fiken.Client.ApiResponse, IGetSaleAttachmentsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetSaleAttachmentsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetSaleAttachmentsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetSaleAttachmentsApiResponse(ILogger<GetSaleAttachmentsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<Attachment>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<Attachment>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<Attachment>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetSaleDraft(ref string companySlug, ref long draftId);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="companySlug"></param>
        /// <returns></returns>
        private void ValidateGetSaleDraft(string companySlug)
        {
            if (companySlug == null)
                throw new ArgumentNullException(nameof(companySlug));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="draftId"></param>
        private void AfterGetSaleDraftDefaultImplementation(IGetSaleDraftApiResponse apiResponseLocalVar, string companySlug, long draftId)
        {
            bool suppressDefaultLog = false;
            AfterGetSaleDraft(ref suppressDefaultLog, apiResponseLocalVar, companySlug, draftId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="draftId"></param>
        partial void AfterGetSaleDraft(ref bool suppressDefaultLog, IGetSaleDraftApiResponse apiResponseLocalVar, string companySlug, long draftId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="draftId"></param>
        private void OnErrorGetSaleDraftDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string companySlug, long draftId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetSaleDraft(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, companySlug, draftId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="draftId"></param>
        partial void OnErrorGetSaleDraft(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string companySlug, long draftId);

        /// <summary>
        ///  Returns draft with specified id.
        /// </summary>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="draftId">The draftId (primary key of the returned object) is returned in the GET all drafts call. </param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetSaleDraftApiResponse"/>&gt;</returns>
        public async Task<IGetSaleDraftApiResponse?> GetSaleDraftOrDefaultAsync(string companySlug, long draftId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetSaleDraftAsync(companySlug, draftId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  Returns draft with specified id.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="draftId">The draftId (primary key of the returned object) is returned in the GET all drafts call. </param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetSaleDraftApiResponse"/>&gt;</returns>
        public async Task<IGetSaleDraftApiResponse> GetSaleDraftAsync(string companySlug, long draftId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetSaleDraft(companySlug);

                FormatGetSaleDraft(ref companySlug, ref draftId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/companies/{companySlug}/sales/drafts/{draftId}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BcompanySlug%7D", Uri.EscapeDataString(companySlug.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BdraftId%7D", Uri.EscapeDataString(draftId.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetSaleDraftApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetSaleDraftApiResponse>();

                        GetSaleDraftApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/companies/{companySlug}/sales/drafts/{draftId}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetSaleDraftDefaultImplementation(apiResponseLocalVar, companySlug, draftId);

                        Events.ExecuteOnGetSaleDraft(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetSaleDraftDefaultImplementation(e, "/companies/{companySlug}/sales/drafts/{draftId}", uriBuilderLocalVar.Path, companySlug, draftId);
                Events.ExecuteOnErrorGetSaleDraft(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetSaleDraftApiResponse"/>
        /// </summary>
        public partial class GetSaleDraftApiResponse : Fiken.Client.ApiResponse, IGetSaleDraftApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetSaleDraftApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetSaleDraftApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetSaleDraftApiResponse(ILogger<GetSaleDraftApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Fiken.Model.DraftResult? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Fiken.Model.DraftResult>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Fiken.Model.DraftResult? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetSaleDraftAttachments(ref string companySlug, ref long draftId);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="companySlug"></param>
        /// <returns></returns>
        private void ValidateGetSaleDraftAttachments(string companySlug)
        {
            if (companySlug == null)
                throw new ArgumentNullException(nameof(companySlug));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="draftId"></param>
        private void AfterGetSaleDraftAttachmentsDefaultImplementation(IGetSaleDraftAttachmentsApiResponse apiResponseLocalVar, string companySlug, long draftId)
        {
            bool suppressDefaultLog = false;
            AfterGetSaleDraftAttachments(ref suppressDefaultLog, apiResponseLocalVar, companySlug, draftId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="draftId"></param>
        partial void AfterGetSaleDraftAttachments(ref bool suppressDefaultLog, IGetSaleDraftAttachmentsApiResponse apiResponseLocalVar, string companySlug, long draftId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="draftId"></param>
        private void OnErrorGetSaleDraftAttachmentsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string companySlug, long draftId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetSaleDraftAttachments(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, companySlug, draftId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="draftId"></param>
        partial void OnErrorGetSaleDraftAttachments(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string companySlug, long draftId);

        /// <summary>
        ///  Returns all attachments for specified draft.
        /// </summary>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="draftId">The draftId (primary key of the returned object) is returned in the GET all drafts call. </param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetSaleDraftAttachmentsApiResponse"/>&gt;</returns>
        public async Task<IGetSaleDraftAttachmentsApiResponse?> GetSaleDraftAttachmentsOrDefaultAsync(string companySlug, long draftId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetSaleDraftAttachmentsAsync(companySlug, draftId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  Returns all attachments for specified draft.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="draftId">The draftId (primary key of the returned object) is returned in the GET all drafts call. </param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetSaleDraftAttachmentsApiResponse"/>&gt;</returns>
        public async Task<IGetSaleDraftAttachmentsApiResponse> GetSaleDraftAttachmentsAsync(string companySlug, long draftId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetSaleDraftAttachments(companySlug);

                FormatGetSaleDraftAttachments(ref companySlug, ref draftId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/companies/{companySlug}/sales/drafts/{draftId}/attachments";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BcompanySlug%7D", Uri.EscapeDataString(companySlug.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BdraftId%7D", Uri.EscapeDataString(draftId.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetSaleDraftAttachmentsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetSaleDraftAttachmentsApiResponse>();

                        GetSaleDraftAttachmentsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/companies/{companySlug}/sales/drafts/{draftId}/attachments", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetSaleDraftAttachmentsDefaultImplementation(apiResponseLocalVar, companySlug, draftId);

                        Events.ExecuteOnGetSaleDraftAttachments(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetSaleDraftAttachmentsDefaultImplementation(e, "/companies/{companySlug}/sales/drafts/{draftId}/attachments", uriBuilderLocalVar.Path, companySlug, draftId);
                Events.ExecuteOnErrorGetSaleDraftAttachments(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetSaleDraftAttachmentsApiResponse"/>
        /// </summary>
        public partial class GetSaleDraftAttachmentsApiResponse : Fiken.Client.ApiResponse, IGetSaleDraftAttachmentsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetSaleDraftAttachmentsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetSaleDraftAttachmentsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetSaleDraftAttachmentsApiResponse(ILogger<GetSaleDraftAttachmentsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<Attachment>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<Attachment>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<Attachment>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetSaleDrafts(ref string companySlug, ref Option<int> page, ref Option<int> pageSize);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="companySlug"></param>
        /// <returns></returns>
        private void ValidateGetSaleDrafts(string companySlug)
        {
            if (companySlug == null)
                throw new ArgumentNullException(nameof(companySlug));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        private void AfterGetSaleDraftsDefaultImplementation(IGetSaleDraftsApiResponse apiResponseLocalVar, string companySlug, Option<int> page, Option<int> pageSize)
        {
            bool suppressDefaultLog = false;
            AfterGetSaleDrafts(ref suppressDefaultLog, apiResponseLocalVar, companySlug, page, pageSize);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        partial void AfterGetSaleDrafts(ref bool suppressDefaultLog, IGetSaleDraftsApiResponse apiResponseLocalVar, string companySlug, Option<int> page, Option<int> pageSize);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        private void OnErrorGetSaleDraftsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string companySlug, Option<int> page, Option<int> pageSize)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetSaleDrafts(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, companySlug, page, pageSize);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        partial void OnErrorGetSaleDrafts(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string companySlug, Option<int> page, Option<int> pageSize);

        /// <summary>
        ///  Returns all sale drafts for given company.
        /// </summary>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="page">Returns the number of the page to return. Valid page values are integers from 0 to the total number of pages. Default value is 0.  (optional, default to 0)</param>
        /// <param name="pageSize">Defines the number of entries to return on each page. Maximum number of results that can be returned at one time are 100. Default value is 25.  (optional, default to 25)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetSaleDraftsApiResponse"/>&gt;</returns>
        public async Task<IGetSaleDraftsApiResponse?> GetSaleDraftsOrDefaultAsync(string companySlug, Option<int> page = default, Option<int> pageSize = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetSaleDraftsAsync(companySlug, page, pageSize, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  Returns all sale drafts for given company.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="page">Returns the number of the page to return. Valid page values are integers from 0 to the total number of pages. Default value is 0.  (optional, default to 0)</param>
        /// <param name="pageSize">Defines the number of entries to return on each page. Maximum number of results that can be returned at one time are 100. Default value is 25.  (optional, default to 25)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetSaleDraftsApiResponse"/>&gt;</returns>
        public async Task<IGetSaleDraftsApiResponse> GetSaleDraftsAsync(string companySlug, Option<int> page = default, Option<int> pageSize = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetSaleDrafts(companySlug);

                FormatGetSaleDrafts(ref companySlug, ref page, ref pageSize);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/companies/{companySlug}/sales/drafts";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BcompanySlug%7D", Uri.EscapeDataString(companySlug.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (page.IsSet)
                        parseQueryStringLocalVar["page"] = ClientUtils.ParameterToString(page.Value);

                    if (pageSize.IsSet)
                        parseQueryStringLocalVar["pageSize"] = ClientUtils.ParameterToString(pageSize.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetSaleDraftsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetSaleDraftsApiResponse>();

                        GetSaleDraftsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/companies/{companySlug}/sales/drafts", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetSaleDraftsDefaultImplementation(apiResponseLocalVar, companySlug, page, pageSize);

                        Events.ExecuteOnGetSaleDrafts(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetSaleDraftsDefaultImplementation(e, "/companies/{companySlug}/sales/drafts", uriBuilderLocalVar.Path, companySlug, page, pageSize);
                Events.ExecuteOnErrorGetSaleDrafts(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetSaleDraftsApiResponse"/>
        /// </summary>
        public partial class GetSaleDraftsApiResponse : Fiken.Client.ApiResponse, IGetSaleDraftsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetSaleDraftsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetSaleDraftsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetSaleDraftsApiResponse(ILogger<GetSaleDraftsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<DraftResult>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<DraftResult>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<DraftResult>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetSalePayment(ref string companySlug, ref long saleId, ref long paymentId);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="companySlug"></param>
        /// <returns></returns>
        private void ValidateGetSalePayment(string companySlug)
        {
            if (companySlug == null)
                throw new ArgumentNullException(nameof(companySlug));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="saleId"></param>
        /// <param name="paymentId"></param>
        private void AfterGetSalePaymentDefaultImplementation(IGetSalePaymentApiResponse apiResponseLocalVar, string companySlug, long saleId, long paymentId)
        {
            bool suppressDefaultLog = false;
            AfterGetSalePayment(ref suppressDefaultLog, apiResponseLocalVar, companySlug, saleId, paymentId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="saleId"></param>
        /// <param name="paymentId"></param>
        partial void AfterGetSalePayment(ref bool suppressDefaultLog, IGetSalePaymentApiResponse apiResponseLocalVar, string companySlug, long saleId, long paymentId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="saleId"></param>
        /// <param name="paymentId"></param>
        private void OnErrorGetSalePaymentDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string companySlug, long saleId, long paymentId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetSalePayment(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, companySlug, saleId, paymentId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="saleId"></param>
        /// <param name="paymentId"></param>
        partial void OnErrorGetSalePayment(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string companySlug, long saleId, long paymentId);

        /// <summary>
        ///  Returns payment with specified id.
        /// </summary>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="saleId"></param>
        /// <param name="paymentId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetSalePaymentApiResponse"/>&gt;</returns>
        public async Task<IGetSalePaymentApiResponse?> GetSalePaymentOrDefaultAsync(string companySlug, long saleId, long paymentId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetSalePaymentAsync(companySlug, saleId, paymentId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  Returns payment with specified id.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="saleId"></param>
        /// <param name="paymentId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetSalePaymentApiResponse"/>&gt;</returns>
        public async Task<IGetSalePaymentApiResponse> GetSalePaymentAsync(string companySlug, long saleId, long paymentId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetSalePayment(companySlug);

                FormatGetSalePayment(ref companySlug, ref saleId, ref paymentId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/companies/{companySlug}/sales/{saleId}/payments/{paymentId}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BcompanySlug%7D", Uri.EscapeDataString(companySlug.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BsaleId%7D", Uri.EscapeDataString(saleId.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BpaymentId%7D", Uri.EscapeDataString(paymentId.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetSalePaymentApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetSalePaymentApiResponse>();

                        GetSalePaymentApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/companies/{companySlug}/sales/{saleId}/payments/{paymentId}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetSalePaymentDefaultImplementation(apiResponseLocalVar, companySlug, saleId, paymentId);

                        Events.ExecuteOnGetSalePayment(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetSalePaymentDefaultImplementation(e, "/companies/{companySlug}/sales/{saleId}/payments/{paymentId}", uriBuilderLocalVar.Path, companySlug, saleId, paymentId);
                Events.ExecuteOnErrorGetSalePayment(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetSalePaymentApiResponse"/>
        /// </summary>
        public partial class GetSalePaymentApiResponse : Fiken.Client.ApiResponse, IGetSalePaymentApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetSalePaymentApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetSalePaymentApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetSalePaymentApiResponse(ILogger<GetSalePaymentApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Fiken.Model.Payment? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Fiken.Model.Payment>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Fiken.Model.Payment? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetSalePayments(ref string companySlug, ref long saleId);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="companySlug"></param>
        /// <returns></returns>
        private void ValidateGetSalePayments(string companySlug)
        {
            if (companySlug == null)
                throw new ArgumentNullException(nameof(companySlug));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="saleId"></param>
        private void AfterGetSalePaymentsDefaultImplementation(IGetSalePaymentsApiResponse apiResponseLocalVar, string companySlug, long saleId)
        {
            bool suppressDefaultLog = false;
            AfterGetSalePayments(ref suppressDefaultLog, apiResponseLocalVar, companySlug, saleId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="saleId"></param>
        partial void AfterGetSalePayments(ref bool suppressDefaultLog, IGetSalePaymentsApiResponse apiResponseLocalVar, string companySlug, long saleId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="saleId"></param>
        private void OnErrorGetSalePaymentsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string companySlug, long saleId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetSalePayments(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, companySlug, saleId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="saleId"></param>
        partial void OnErrorGetSalePayments(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string companySlug, long saleId);

        /// <summary>
        ///  Returns all payments for given sale
        /// </summary>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="saleId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetSalePaymentsApiResponse"/>&gt;</returns>
        public async Task<IGetSalePaymentsApiResponse?> GetSalePaymentsOrDefaultAsync(string companySlug, long saleId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetSalePaymentsAsync(companySlug, saleId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  Returns all payments for given sale
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="saleId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetSalePaymentsApiResponse"/>&gt;</returns>
        public async Task<IGetSalePaymentsApiResponse> GetSalePaymentsAsync(string companySlug, long saleId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetSalePayments(companySlug);

                FormatGetSalePayments(ref companySlug, ref saleId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/companies/{companySlug}/sales/{saleId}/payments";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BcompanySlug%7D", Uri.EscapeDataString(companySlug.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BsaleId%7D", Uri.EscapeDataString(saleId.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetSalePaymentsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetSalePaymentsApiResponse>();

                        GetSalePaymentsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/companies/{companySlug}/sales/{saleId}/payments", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetSalePaymentsDefaultImplementation(apiResponseLocalVar, companySlug, saleId);

                        Events.ExecuteOnGetSalePayments(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetSalePaymentsDefaultImplementation(e, "/companies/{companySlug}/sales/{saleId}/payments", uriBuilderLocalVar.Path, companySlug, saleId);
                Events.ExecuteOnErrorGetSalePayments(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetSalePaymentsApiResponse"/>
        /// </summary>
        public partial class GetSalePaymentsApiResponse : Fiken.Client.ApiResponse, IGetSalePaymentsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetSalePaymentsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetSalePaymentsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetSalePaymentsApiResponse(ILogger<GetSalePaymentsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<Payment>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<Payment>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<Payment>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetSales(ref string companySlug, ref Option<int> page, ref Option<int> pageSize, ref Option<DateOnly> date, ref Option<DateOnly> dateLe, ref Option<DateOnly> dateLt, ref Option<DateOnly> dateGe, ref Option<DateOnly> dateGt, ref Option<DateOnly> lastModified, ref Option<DateOnly> lastModifiedLe, ref Option<DateOnly> lastModifiedLt, ref Option<DateOnly> lastModifiedGe, ref Option<DateOnly> lastModifiedGt, ref Option<string> saleNumber, ref Option<bool> settled, ref Option<long> contactId);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="companySlug"></param>
        /// <param name="saleNumber"></param>
        /// <returns></returns>
        private void ValidateGetSales(string companySlug, Option<string> saleNumber)
        {
            if (companySlug == null)
                throw new ArgumentNullException(nameof(companySlug));

            if (saleNumber.IsSet && saleNumber.Value == null)
                throw new ArgumentNullException(nameof(saleNumber));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="date"></param>
        /// <param name="dateLe"></param>
        /// <param name="dateLt"></param>
        /// <param name="dateGe"></param>
        /// <param name="dateGt"></param>
        /// <param name="lastModified"></param>
        /// <param name="lastModifiedLe"></param>
        /// <param name="lastModifiedLt"></param>
        /// <param name="lastModifiedGe"></param>
        /// <param name="lastModifiedGt"></param>
        /// <param name="saleNumber"></param>
        /// <param name="settled"></param>
        /// <param name="contactId"></param>
        private void AfterGetSalesDefaultImplementation(IGetSalesApiResponse apiResponseLocalVar, string companySlug, Option<int> page, Option<int> pageSize, Option<DateOnly> date, Option<DateOnly> dateLe, Option<DateOnly> dateLt, Option<DateOnly> dateGe, Option<DateOnly> dateGt, Option<DateOnly> lastModified, Option<DateOnly> lastModifiedLe, Option<DateOnly> lastModifiedLt, Option<DateOnly> lastModifiedGe, Option<DateOnly> lastModifiedGt, Option<string> saleNumber, Option<bool> settled, Option<long> contactId)
        {
            bool suppressDefaultLog = false;
            AfterGetSales(ref suppressDefaultLog, apiResponseLocalVar, companySlug, page, pageSize, date, dateLe, dateLt, dateGe, dateGt, lastModified, lastModifiedLe, lastModifiedLt, lastModifiedGe, lastModifiedGt, saleNumber, settled, contactId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="date"></param>
        /// <param name="dateLe"></param>
        /// <param name="dateLt"></param>
        /// <param name="dateGe"></param>
        /// <param name="dateGt"></param>
        /// <param name="lastModified"></param>
        /// <param name="lastModifiedLe"></param>
        /// <param name="lastModifiedLt"></param>
        /// <param name="lastModifiedGe"></param>
        /// <param name="lastModifiedGt"></param>
        /// <param name="saleNumber"></param>
        /// <param name="settled"></param>
        /// <param name="contactId"></param>
        partial void AfterGetSales(ref bool suppressDefaultLog, IGetSalesApiResponse apiResponseLocalVar, string companySlug, Option<int> page, Option<int> pageSize, Option<DateOnly> date, Option<DateOnly> dateLe, Option<DateOnly> dateLt, Option<DateOnly> dateGe, Option<DateOnly> dateGt, Option<DateOnly> lastModified, Option<DateOnly> lastModifiedLe, Option<DateOnly> lastModifiedLt, Option<DateOnly> lastModifiedGe, Option<DateOnly> lastModifiedGt, Option<string> saleNumber, Option<bool> settled, Option<long> contactId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="date"></param>
        /// <param name="dateLe"></param>
        /// <param name="dateLt"></param>
        /// <param name="dateGe"></param>
        /// <param name="dateGt"></param>
        /// <param name="lastModified"></param>
        /// <param name="lastModifiedLe"></param>
        /// <param name="lastModifiedLt"></param>
        /// <param name="lastModifiedGe"></param>
        /// <param name="lastModifiedGt"></param>
        /// <param name="saleNumber"></param>
        /// <param name="settled"></param>
        /// <param name="contactId"></param>
        private void OnErrorGetSalesDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string companySlug, Option<int> page, Option<int> pageSize, Option<DateOnly> date, Option<DateOnly> dateLe, Option<DateOnly> dateLt, Option<DateOnly> dateGe, Option<DateOnly> dateGt, Option<DateOnly> lastModified, Option<DateOnly> lastModifiedLe, Option<DateOnly> lastModifiedLt, Option<DateOnly> lastModifiedGe, Option<DateOnly> lastModifiedGt, Option<string> saleNumber, Option<bool> settled, Option<long> contactId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetSales(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, companySlug, page, pageSize, date, dateLe, dateLt, dateGe, dateGt, lastModified, lastModifiedLe, lastModifiedLt, lastModifiedGe, lastModifiedGt, saleNumber, settled, contactId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="date"></param>
        /// <param name="dateLe"></param>
        /// <param name="dateLt"></param>
        /// <param name="dateGe"></param>
        /// <param name="dateGt"></param>
        /// <param name="lastModified"></param>
        /// <param name="lastModifiedLe"></param>
        /// <param name="lastModifiedLt"></param>
        /// <param name="lastModifiedGe"></param>
        /// <param name="lastModifiedGt"></param>
        /// <param name="saleNumber"></param>
        /// <param name="settled"></param>
        /// <param name="contactId"></param>
        partial void OnErrorGetSales(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string companySlug, Option<int> page, Option<int> pageSize, Option<DateOnly> date, Option<DateOnly> dateLe, Option<DateOnly> dateLt, Option<DateOnly> dateGe, Option<DateOnly> dateGt, Option<DateOnly> lastModified, Option<DateOnly> lastModifiedLe, Option<DateOnly> lastModifiedLt, Option<DateOnly> lastModifiedGe, Option<DateOnly> lastModifiedGt, Option<string> saleNumber, Option<bool> settled, Option<long> contactId);

        /// <summary>
        ///  Returns all sales for given company
        /// </summary>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="page">Returns the number of the page to return. Valid page values are integers from 0 to the total number of pages. Default value is 0.  (optional, default to 0)</param>
        /// <param name="pageSize">Defines the number of entries to return on each page. Maximum number of results that can be returned at one time are 100. Default value is 25.  (optional, default to 25)</param>
        /// <param name="date">Dates are represented as strings formatted as YYYY-MM-DD. Example: January 1st, 1970: \&quot;1970-01-01\&quot;  (optional)</param>
        /// <param name="dateLe">Filter based on date less than or equal to parameter value. Dates are represented as strings formatted as YYYY-MM-DD. Example: January 1st, 1970: \&quot;1970-01-01\&quot;  (optional)</param>
        /// <param name="dateLt">Filter based on date strictly less than parameter value. Dates are represented as strings formatted as YYYY-MM-DD. Example: January 1st, 1970: \&quot;1970-01-01\&quot;  (optional)</param>
        /// <param name="dateGe">Filter based on date greater than or equal to parameter value. Dates are represented as strings formatted as YYYY-MM-DD. Example: January 1st, 1970: \&quot;1970-01-01\&quot;  (optional)</param>
        /// <param name="dateGt">Filter based on date strictly greater than parameter value Dates are represented as strings formatted as YYYY-MM-DD. Example: January 1st, 1970: \&quot;1970-01-01\&quot;  (optional)</param>
        /// <param name="lastModified">Filter based on date of last modification. Returns results that were last modified on the date provided as a parameter value. Dates are represented as strings formatted as YYYY-MM-DD. Example: January 1st, 1970: \&quot;1970-01-01\&quot;  (optional)</param>
        /// <param name="lastModifiedLe">Returns results that have been last modified before or on the date provided as a parameter value. Dates are represented as strings formatted as YYYY-MM-DD. Example: January 1st, 1970: \&quot;1970-01-01\&quot;  (optional)</param>
        /// <param name="lastModifiedLt">Returns results that have been last modified strictly before the date provided as a parameter value. Dates are represented as strings formatted as YYYY-MM-DD. Example: January 1st, 1970: \&quot;1970-01-01\&quot;  (optional)</param>
        /// <param name="lastModifiedGe">Returns results that have been last modified after or on the date provided as a parameter value. Dates are represented as strings formatted as YYYY-MM-DD. Example: January 1st, 1970: \&quot;1970-01-01\&quot;  (optional)</param>
        /// <param name="lastModifiedGt">Returns results that have been last modified strictly after the date provided as a parameter value. Dates are represented as strings formatted as YYYY-MM-DD. Example: January 1st, 1970: \&quot;1970-01-01\&quot;  (optional)</param>
        /// <param name="saleNumber">Find all results with the sale number equal to the specified parameter. (optional)</param>
        /// <param name="settled">When set to true, returns only sales that have been settled. Otherwise false returns all sales that have not been fully settled.  (optional)</param>
        /// <param name="contactId">Find all sale results for a given customer (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetSalesApiResponse"/>&gt;</returns>
        public async Task<IGetSalesApiResponse?> GetSalesOrDefaultAsync(string companySlug, Option<int> page = default, Option<int> pageSize = default, Option<DateOnly> date = default, Option<DateOnly> dateLe = default, Option<DateOnly> dateLt = default, Option<DateOnly> dateGe = default, Option<DateOnly> dateGt = default, Option<DateOnly> lastModified = default, Option<DateOnly> lastModifiedLe = default, Option<DateOnly> lastModifiedLt = default, Option<DateOnly> lastModifiedGe = default, Option<DateOnly> lastModifiedGt = default, Option<string> saleNumber = default, Option<bool> settled = default, Option<long> contactId = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetSalesAsync(companySlug, page, pageSize, date, dateLe, dateLt, dateGe, dateGt, lastModified, lastModifiedLe, lastModifiedLt, lastModifiedGe, lastModifiedGt, saleNumber, settled, contactId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  Returns all sales for given company
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="page">Returns the number of the page to return. Valid page values are integers from 0 to the total number of pages. Default value is 0.  (optional, default to 0)</param>
        /// <param name="pageSize">Defines the number of entries to return on each page. Maximum number of results that can be returned at one time are 100. Default value is 25.  (optional, default to 25)</param>
        /// <param name="date">Dates are represented as strings formatted as YYYY-MM-DD. Example: January 1st, 1970: \&quot;1970-01-01\&quot;  (optional)</param>
        /// <param name="dateLe">Filter based on date less than or equal to parameter value. Dates are represented as strings formatted as YYYY-MM-DD. Example: January 1st, 1970: \&quot;1970-01-01\&quot;  (optional)</param>
        /// <param name="dateLt">Filter based on date strictly less than parameter value. Dates are represented as strings formatted as YYYY-MM-DD. Example: January 1st, 1970: \&quot;1970-01-01\&quot;  (optional)</param>
        /// <param name="dateGe">Filter based on date greater than or equal to parameter value. Dates are represented as strings formatted as YYYY-MM-DD. Example: January 1st, 1970: \&quot;1970-01-01\&quot;  (optional)</param>
        /// <param name="dateGt">Filter based on date strictly greater than parameter value Dates are represented as strings formatted as YYYY-MM-DD. Example: January 1st, 1970: \&quot;1970-01-01\&quot;  (optional)</param>
        /// <param name="lastModified">Filter based on date of last modification. Returns results that were last modified on the date provided as a parameter value. Dates are represented as strings formatted as YYYY-MM-DD. Example: January 1st, 1970: \&quot;1970-01-01\&quot;  (optional)</param>
        /// <param name="lastModifiedLe">Returns results that have been last modified before or on the date provided as a parameter value. Dates are represented as strings formatted as YYYY-MM-DD. Example: January 1st, 1970: \&quot;1970-01-01\&quot;  (optional)</param>
        /// <param name="lastModifiedLt">Returns results that have been last modified strictly before the date provided as a parameter value. Dates are represented as strings formatted as YYYY-MM-DD. Example: January 1st, 1970: \&quot;1970-01-01\&quot;  (optional)</param>
        /// <param name="lastModifiedGe">Returns results that have been last modified after or on the date provided as a parameter value. Dates are represented as strings formatted as YYYY-MM-DD. Example: January 1st, 1970: \&quot;1970-01-01\&quot;  (optional)</param>
        /// <param name="lastModifiedGt">Returns results that have been last modified strictly after the date provided as a parameter value. Dates are represented as strings formatted as YYYY-MM-DD. Example: January 1st, 1970: \&quot;1970-01-01\&quot;  (optional)</param>
        /// <param name="saleNumber">Find all results with the sale number equal to the specified parameter. (optional)</param>
        /// <param name="settled">When set to true, returns only sales that have been settled. Otherwise false returns all sales that have not been fully settled.  (optional)</param>
        /// <param name="contactId">Find all sale results for a given customer (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetSalesApiResponse"/>&gt;</returns>
        public async Task<IGetSalesApiResponse> GetSalesAsync(string companySlug, Option<int> page = default, Option<int> pageSize = default, Option<DateOnly> date = default, Option<DateOnly> dateLe = default, Option<DateOnly> dateLt = default, Option<DateOnly> dateGe = default, Option<DateOnly> dateGt = default, Option<DateOnly> lastModified = default, Option<DateOnly> lastModifiedLe = default, Option<DateOnly> lastModifiedLt = default, Option<DateOnly> lastModifiedGe = default, Option<DateOnly> lastModifiedGt = default, Option<string> saleNumber = default, Option<bool> settled = default, Option<long> contactId = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetSales(companySlug, saleNumber);

                FormatGetSales(ref companySlug, ref page, ref pageSize, ref date, ref dateLe, ref dateLt, ref dateGe, ref dateGt, ref lastModified, ref lastModifiedLe, ref lastModifiedLt, ref lastModifiedGe, ref lastModifiedGt, ref saleNumber, ref settled, ref contactId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/companies/{companySlug}/sales";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BcompanySlug%7D", Uri.EscapeDataString(companySlug.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (page.IsSet)
                        parseQueryStringLocalVar["page"] = ClientUtils.ParameterToString(page.Value);

                    if (pageSize.IsSet)
                        parseQueryStringLocalVar["pageSize"] = ClientUtils.ParameterToString(pageSize.Value);

                    if (date.IsSet)
                        parseQueryStringLocalVar["date"] = ClientUtils.ParameterToString(date.Value);

                    if (dateLe.IsSet)
                        parseQueryStringLocalVar["dateLe"] = ClientUtils.ParameterToString(dateLe.Value);

                    if (dateLt.IsSet)
                        parseQueryStringLocalVar["dateLt"] = ClientUtils.ParameterToString(dateLt.Value);

                    if (dateGe.IsSet)
                        parseQueryStringLocalVar["dateGe"] = ClientUtils.ParameterToString(dateGe.Value);

                    if (dateGt.IsSet)
                        parseQueryStringLocalVar["dateGt"] = ClientUtils.ParameterToString(dateGt.Value);

                    if (lastModified.IsSet)
                        parseQueryStringLocalVar["lastModified"] = ClientUtils.ParameterToString(lastModified.Value);

                    if (lastModifiedLe.IsSet)
                        parseQueryStringLocalVar["lastModifiedLe"] = ClientUtils.ParameterToString(lastModifiedLe.Value);

                    if (lastModifiedLt.IsSet)
                        parseQueryStringLocalVar["lastModifiedLt"] = ClientUtils.ParameterToString(lastModifiedLt.Value);

                    if (lastModifiedGe.IsSet)
                        parseQueryStringLocalVar["lastModifiedGe"] = ClientUtils.ParameterToString(lastModifiedGe.Value);

                    if (lastModifiedGt.IsSet)
                        parseQueryStringLocalVar["lastModifiedGt"] = ClientUtils.ParameterToString(lastModifiedGt.Value);

                    if (saleNumber.IsSet)
                        parseQueryStringLocalVar["saleNumber"] = ClientUtils.ParameterToString(saleNumber.Value);

                    if (settled.IsSet)
                        parseQueryStringLocalVar["settled"] = ClientUtils.ParameterToString(settled.Value);

                    if (contactId.IsSet)
                        parseQueryStringLocalVar["contactId"] = ClientUtils.ParameterToString(contactId.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetSalesApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetSalesApiResponse>();

                        GetSalesApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/companies/{companySlug}/sales", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetSalesDefaultImplementation(apiResponseLocalVar, companySlug, page, pageSize, date, dateLe, dateLt, dateGe, dateGt, lastModified, lastModifiedLe, lastModifiedLt, lastModifiedGe, lastModifiedGt, saleNumber, settled, contactId);

                        Events.ExecuteOnGetSales(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetSalesDefaultImplementation(e, "/companies/{companySlug}/sales", uriBuilderLocalVar.Path, companySlug, page, pageSize, date, dateLe, dateLt, dateGe, dateGt, lastModified, lastModifiedLe, lastModifiedLt, lastModifiedGe, lastModifiedGt, saleNumber, settled, contactId);
                Events.ExecuteOnErrorGetSales(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetSalesApiResponse"/>
        /// </summary>
        public partial class GetSalesApiResponse : Fiken.Client.ApiResponse, IGetSalesApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetSalesApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetSalesApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetSalesApiResponse(ILogger<GetSalesApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<SaleResult>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<SaleResult>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<SaleResult>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatSettledSale(ref string companySlug, ref long saleId, ref DateOnly settledDate);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="companySlug"></param>
        /// <returns></returns>
        private void ValidateSettledSale(string companySlug)
        {
            if (companySlug == null)
                throw new ArgumentNullException(nameof(companySlug));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="saleId"></param>
        /// <param name="settledDate"></param>
        private void AfterSettledSaleDefaultImplementation(ISettledSaleApiResponse apiResponseLocalVar, string companySlug, long saleId, DateOnly settledDate)
        {
            bool suppressDefaultLog = false;
            AfterSettledSale(ref suppressDefaultLog, apiResponseLocalVar, companySlug, saleId, settledDate);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="saleId"></param>
        /// <param name="settledDate"></param>
        partial void AfterSettledSale(ref bool suppressDefaultLog, ISettledSaleApiResponse apiResponseLocalVar, string companySlug, long saleId, DateOnly settledDate);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="saleId"></param>
        /// <param name="settledDate"></param>
        private void OnErrorSettledSaleDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string companySlug, long saleId, DateOnly settledDate)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorSettledSale(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, companySlug, saleId, settledDate);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="saleId"></param>
        /// <param name="settledDate"></param>
        partial void OnErrorSettledSale(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string companySlug, long saleId, DateOnly settledDate);

        /// <summary>
        ///  Marks the sale as settled without payment. This is synonymous with \&quot;sett til oppgjort uten betaling\&quot; in the GUI. It is possible to change the date of settlement by sending a new settledDate.
        /// </summary>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="saleId"></param>
        /// <param name="settledDate">Date that the sale is settled</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISettledSaleApiResponse"/>&gt;</returns>
        public async Task<ISettledSaleApiResponse?> SettledSaleOrDefaultAsync(string companySlug, long saleId, DateOnly settledDate, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await SettledSaleAsync(companySlug, saleId, settledDate, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  Marks the sale as settled without payment. This is synonymous with \&quot;sett til oppgjort uten betaling\&quot; in the GUI. It is possible to change the date of settlement by sending a new settledDate.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="saleId"></param>
        /// <param name="settledDate">Date that the sale is settled</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISettledSaleApiResponse"/>&gt;</returns>
        public async Task<ISettledSaleApiResponse> SettledSaleAsync(string companySlug, long saleId, DateOnly settledDate, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateSettledSale(companySlug);

                FormatSettledSale(ref companySlug, ref saleId, ref settledDate);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/companies/{companySlug}/sales/{saleId}/settled";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BcompanySlug%7D", Uri.EscapeDataString(companySlug.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BsaleId%7D", Uri.EscapeDataString(saleId.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    parseQueryStringLocalVar["settledDate"] = ClientUtils.ParameterToString(settledDate);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Patch;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<SettledSaleApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<SettledSaleApiResponse>();

                        SettledSaleApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/companies/{companySlug}/sales/{saleId}/settled", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterSettledSaleDefaultImplementation(apiResponseLocalVar, companySlug, saleId, settledDate);

                        Events.ExecuteOnSettledSale(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorSettledSaleDefaultImplementation(e, "/companies/{companySlug}/sales/{saleId}/settled", uriBuilderLocalVar.Path, companySlug, saleId, settledDate);
                Events.ExecuteOnErrorSettledSale(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="SettledSaleApiResponse"/>
        /// </summary>
        public partial class SettledSaleApiResponse : Fiken.Client.ApiResponse, ISettledSaleApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<SettledSaleApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="SettledSaleApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public SettledSaleApiResponse(ILogger<SettledSaleApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Fiken.Model.SaleResult? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Fiken.Model.SaleResult>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Fiken.Model.SaleResult? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatUpdateSaleDraft(ref string companySlug, ref long draftId, DraftRequest draftRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="companySlug"></param>
        /// <param name="draftRequest"></param>
        /// <returns></returns>
        private void ValidateUpdateSaleDraft(string companySlug, DraftRequest draftRequest)
        {
            if (companySlug == null)
                throw new ArgumentNullException(nameof(companySlug));

            if (draftRequest == null)
                throw new ArgumentNullException(nameof(draftRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="draftId"></param>
        /// <param name="draftRequest"></param>
        private void AfterUpdateSaleDraftDefaultImplementation(IUpdateSaleDraftApiResponse apiResponseLocalVar, string companySlug, long draftId, DraftRequest draftRequest)
        {
            bool suppressDefaultLog = false;
            AfterUpdateSaleDraft(ref suppressDefaultLog, apiResponseLocalVar, companySlug, draftId, draftRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="draftId"></param>
        /// <param name="draftRequest"></param>
        partial void AfterUpdateSaleDraft(ref bool suppressDefaultLog, IUpdateSaleDraftApiResponse apiResponseLocalVar, string companySlug, long draftId, DraftRequest draftRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="draftId"></param>
        /// <param name="draftRequest"></param>
        private void OnErrorUpdateSaleDraftDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string companySlug, long draftId, DraftRequest draftRequest)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorUpdateSaleDraft(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, companySlug, draftId, draftRequest);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="draftId"></param>
        /// <param name="draftRequest"></param>
        partial void OnErrorUpdateSaleDraft(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string companySlug, long draftId, DraftRequest draftRequest);

        /// <summary>
        ///  Updates draft with provided id. 
        /// </summary>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="draftId">The draftId (primary key of the returned object) is returned in the GET all drafts call. </param>
        /// <param name="draftRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateSaleDraftApiResponse"/>&gt;</returns>
        public async Task<IUpdateSaleDraftApiResponse?> UpdateSaleDraftOrDefaultAsync(string companySlug, long draftId, DraftRequest draftRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await UpdateSaleDraftAsync(companySlug, draftId, draftRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  Updates draft with provided id. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="draftId">The draftId (primary key of the returned object) is returned in the GET all drafts call. </param>
        /// <param name="draftRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateSaleDraftApiResponse"/>&gt;</returns>
        public async Task<IUpdateSaleDraftApiResponse> UpdateSaleDraftAsync(string companySlug, long draftId, DraftRequest draftRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateUpdateSaleDraft(companySlug, draftRequest);

                FormatUpdateSaleDraft(ref companySlug, ref draftId, draftRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/companies/{companySlug}/sales/drafts/{draftId}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BcompanySlug%7D", Uri.EscapeDataString(companySlug.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BdraftId%7D", Uri.EscapeDataString(draftId.ToString()));

                    httpRequestMessageLocalVar.Content = (draftRequest as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(draftRequest, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    httpRequestMessageLocalVar.Method = HttpMethod.Put;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<UpdateSaleDraftApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<UpdateSaleDraftApiResponse>();

                        UpdateSaleDraftApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/companies/{companySlug}/sales/drafts/{draftId}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterUpdateSaleDraftDefaultImplementation(apiResponseLocalVar, companySlug, draftId, draftRequest);

                        Events.ExecuteOnUpdateSaleDraft(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorUpdateSaleDraftDefaultImplementation(e, "/companies/{companySlug}/sales/drafts/{draftId}", uriBuilderLocalVar.Path, companySlug, draftId, draftRequest);
                Events.ExecuteOnErrorUpdateSaleDraft(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="UpdateSaleDraftApiResponse"/>
        /// </summary>
        public partial class UpdateSaleDraftApiResponse : Fiken.Client.ApiResponse, IUpdateSaleDraftApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<UpdateSaleDraftApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="UpdateSaleDraftApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public UpdateSaleDraftApiResponse(ILogger<UpdateSaleDraftApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public bool IsCreated => 201 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}

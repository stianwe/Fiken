// <auto-generated>
/*
 * Fiken API
 *
 *  ## Introduction [Fiken.no](https://fiken.no) is an online accounting system aimed at making accounting easy for small businesses. The API Module allows other systems to integrate with Fiken. This document describes Fiken's API.  ## Using the API Use of this API in production environments on live data is normally associated with a fee for the end user (company). API access costs 99kr per month and can be ordered through the Module access page under Settings in your Fiken account. If you have any questions regarding the API pricing, contact us at <api@fiken.no>.  The API provides two different ways of authorizing requests.    1. OAuth2   2. Personal API tokens  Third parties that wish to integrate with Fiken on behalf of their customers should use the OAuth2 authorization method. In order to develop OAuth2 applications that integrate with this API you must log into your Fiken account and check the box saying that you are a developer (**Rediger konto -> Profil -> Andre innstillinger**). This will allow you to create an App by clicking on the \"API\" tab under Brukerinnstillinger. If you don't have an existing Fiken account you can create a new user and demo company (demoforetak) at no charge. Send an email to <api@fiken.no> to get free access to Fiken for longer than the included 30 day free trial period.   Upon creation of the new App you will be provided a Client ID and Client Secret that are needed for the OAuth2 authorization flow.  This will allow you to use the API during development with up to 5 users. If you would like to use the API with more than 5 users and gain production status, you will need to send an email to <api@fiken.no> to gain full access to the API module.  Fiken customers that wish to integrate their own solutions with this API can use personal API tokens. Personal API tokens can be created in **Rediger konto -> API -> Personlige API-nÃ¸kler**. Note that personal API tokens do not expire.  ## Base URL All URLs start with https://api.fiken.no/api/v2. Note that TLS is required, unencrypted HTTP is not supported. Although we currently redirect HTTP requests to HTTPS, you are not allowed to this with your application as using HTTP is a security risk. In the future we might respond with 403 Forbidden instead.  ## Concurrent requests / rate limiting You are only allowed to make a single concurrent API-request. Sending multiple requests concurrently may result in a 429 error response. If you break this rule you might be banned. In case of a ban please contact us to be unbanned.  API calls may be slowed if you execute more than 4 requests per second.  ## Personal API tokens  Personal API tokens can be created in **Rediger konto -> API**. Personal API tokens never expire and can be revoked from the same place.  To use a personal API token simply send it as a bearer token in the `Authorization` header:      GET https://api.fiken.no/api/v2/companies     Authorization: Bearer <api token>  ## Authorization with OAuth2 Fiken API V2 uses OAuth 2.0 for authorizing API requests. Authorized requests to the API should use an `Authorization` header with the value `Bearer <TOKEN>` where `<TOKEN>` is an access token obtained through the OAuth flow.  ### Authorize Endpoint  To start the OAuth flow in order to obtain an access token for a user, you will first have to get consent from the user. To do this, direct your user to the authorization endpoint:      GET https://fiken.no/oauth/authorize?response_type=code&client_id=CLIENT_ID&redirect_uri=REDIRECT_URI&state=STATE  If the user is logged in and accepts your request, the user is redirected back to your redirect url. If the user is not logged in, the regular Fiken.no login form is presented first, requiring the user to authenticate before accepting or rejecting your request.  If the user rejects the request or if there is an error in your request, the user is redirected back to your redirect url with the parameters `error` and `error_description`. If the user rejected the request the error code will be `access_denied`.  #### Parameters  | Name          | Description                                                                                                      | | :- -- -- -- -- -- - | :- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- | | response_type | **Required** Should always be the value `code`                                                     | | client_id     | **Required** The client id you received from Fiken when you registered your application                          | | redirect_uri  | **Required** The URL in your application where users will be sent with an authorization code after authorization | | state         | **Required** An unguessable random string, used to protect against CSRF attacks                                  |   ### Token Endpoint  If the user accepts your request, Fiken redirects the user back to your `redirect_uri` with a parameter named `code` as well as the state you provided in the previous step in the `state` parameter. This temporary code will expire after a short while.  The temporary authorization code can be exchanged for an access token at the token endpoint.  The token endpoint is protected with Http Basic Authentication and you should use your application client id and client secret as credentials to authenticate.      POST https://fiken.no/oauth/token     Content-Type: application/x-www-form-urlencoded     Authorization: Basic dXNlIHlvdXIgY2xpZW50IGlkOmFuZCBjbGllbnQgc2VjcmV0      grant_type=authorization_code&code=AUTHCODE&redirect_uri=REDIRECT_URI&state=STATE  The response will contain the access token, a refresh token (see below) as well as information about the expiry time for the token.      {       \"access_token\": \"K2QwoFp4ZfugWLWk7Ipu9kni5cyv3luXKQ-GDShvV2g=\",       \"refresh_token\": \"naFOD_j8m6PFGcP0pfImVZlSxKklHLbgj9Hzao4rhg8=\",       \"token_type\": \"bearer\",       \"expires_in\": 86157     }  If an error occurs during the token exchange request, an error object is returned with an error and an error description.      {         \"error\": \"invalid_grant\",         \"error_description\": \"The authorization code is invalid or expired.\"     }  #### Parameters  | Name         | Description                                                                                                      | | :- -- -- -- -- -- | :- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- | | grant_type   | **Required** Should be the value `authorization_code`                                                            | | code         | **Required** The authorization code that was received in the redirect from the authorize endpoint                | | redirect_uri | **Required** The URL in your application where users will be sent with an authorization code after authorization | | state        | **Required** An unguessable random string, used to protect against CSRF attacks                                  |  ### Refresh Tokens  If an access token has expired you can use the refresh token that was sent in the response from the token endpoint to get a new access token.  Note that if the user has revoked the consent to your app, the refresh token will no longer be valid.  To get a new access token from the refresh token, use the token endpoint with the grant type `refresh_token`:      POST https://fiken.no/oauth/token     Content-Type: application/x-www-form-urlencoded     Authorization: Basic dXNlIHlvdXIgY2xpZW50IGlkOmFuZCBjbGllbnQgc2VjcmV0      grant_type=refresh_token&refresh_token=REFRESH_TOKEN  The response contains a fresh access token along with a possibly updated refresh token:      {       \"access_token\": \"K2QwoFp4ZfugWLWk7Ipu9kni5cyv3luXKQ-GDShvV2g=\",       \"refresh_token\": \"naFOD_j8m6PFGcP0pfImVZlSxKklHLbgj9Hzao4rhg8=\",       \"token_type\": \"bearer\",       \"expires_in\": 86157     }  #### Parameters  | Name         | Description                                                                                                      | | :- -- -- -- -- -- | :- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- | | grant_type   | **Required** Should be the value `refresh_token`                                                                 | | refresh_token| **Required** The refresh token last returned for this user from the token endpoint                               |  ### Using Access Tokens in API Requests  To execute API requests on behalf of the end user, send the access token obtained at the token endpoint as a bearer token, as in this example:      GET https://api.fiken.no/api/v2/companies     Authorization: Bearer <access_token_value>  ### Revoking tokens  To revoke an access token and refresh token use the Revoke Token endpoint.  The Revoke Token endpoint disables the application grant, the access token and the corresponding refresh token used to authenticate the call. Other access tokens obtained from the same refresh token are also revoked.      POST https://fiken.no/oauth/revoke     Authorization: Bearer <access_token_value>  The response for a successful revocation is 200/OK.  ### Managing access  The end user can manage which companies a given app has access to under **Rediger konto -> Sikkerhet -> Apper du har gitt tilgang til**.  All companies created after the initial consent has been given need to be actively added so that the app will have access to their information.  Additionally the end user can revoke access to any of their companies' data as well.   ## Try It Out  For each endpoint in the documentation below there is a button *Try It Out*. To invoke the API from this documentation you need an app and you need to authorize usage for you Fiken.no user.  Your app needs to be configured with a redirect URL for this documentation, add `https://api.fiken.no/api/v2/docs/oauth2-redirect.html` to the list of redirect URLs for your app.  Click the padlock symbol on any of the endpoints and enter your `client_id` and `client_secret` and then press *Authorize* to start the OAuth2 authorization flow, then click *Close*.  Enter the required parameters for the endpoint, such as `company_slug`, and then press *Execute* to test.  ## Request  We recommend sending the `X-Request-ID` header with all requests.  ### Request Headers | Request  Header           | Format   | Description                                                       | | - -- -- -- -- -- -- -- -          | - -- -- -- - | - -- -- -- -- -- -- -- -- -- -- -- -- -- --                                     | | `X-Request-ID`            | UUID     | UUID used to identify the request                                 |    ## Response ### Response code All HTTP codes should be expected with their normal semantics. These are some of the common ones:  * **200** for successful GET * **201** for successful POST where you get a Location-header for the created content * **400** when invalid content has be sent (for instance a required field is missing, unexpected fields, wrong format, etc) * **401** when the user is not authenticated * **403** when the user does not have the proper authorization * **404** when the requested content is not found * **405** When you are trying a method to a resource which doesn't support it (i.e. DELETE on an account). * **415** Wrong media type. we accept application/json only.  ### Response Content The default content type on the result of GET requests is application/json. On successful POSTs/PUTs/PATCHs and DELETEs an empty body is returned.  For successful POSTs/PUTs/PATCHs a Location header is given in all cases.  ## Pagination, Sorting & Filtering Pagination, sorting and filtering query parameters are all optional.   | URI                                                                     | Pagination? | Sortable? | Sortable Fields                       | Filterable? | Filtered Fields                                                                                                                         | | :- -- -- -- --                                                              |:- -- -- -- -- -- | :- -- -- -- - | :- -- -- -- -- -- --                        | :- --        | :- --                                                                                                                                    | | https://api.fiken.no/api/v2/companies                                  | Yes         | Yes       | createdDate, name, organizationNumber | No          |                                                                                                                                         | | https://api.fiken.no/api/v2/companies/{companySlug}/accounts           | No          | No        |                                       | Yes         | fromAccount, toAccount                                                                                                                  | | https://api.fiken.no/api/v2/companies/{companySlug}/accountBalances    | Yes         | No        |                                       | Yes         | fromAccount, toAccount                                                                                                                  | | https://api.fiken.no/api/v2/companies/{companySlug}/bankAccounts       | Yes         | No        |                                       | Yes         | inactive                                                                                                                                | | https://api.fiken.no/api/v2/companies/{companySlug}/contacts           | Yes         | Yes       | createdDate, lastModified             | Yes         | supplierNumber, customerNumber, memberNumber, memberNumberString, name, organizationNumber, email, group, lastModified, createdDate, inactive, phoneNumber  | | https://api.fiken.no/api/v2/companies/{companySlug}/creditNotes        | Yes         | No        |                                       | Yes         | issueDate, lastModified, settled, customerId                                                                                            | | https://api.fiken.no/api/v2/companies/{companySlug}/inbox              | Yes         | Yes       | createdDate, name                     | Yes         | status, name                                                                                                                            | | https://api.fiken.no/api/v2/companies/{companySlug}/invoices           | Yes         | No        |                                       | Yes         | issueDate, lastModified, dueDate, settled, customerId, orderReference, invoiceDraftUuid                                                 | | https://api.fiken.no/api/v2/companies/{companySlug}/invoices/drafts    | Yes         | No        |                                       | No          |                                                                                                                                         | | https://api.fiken.no/api/v2/companies/{companySlug}/journalEntries     | Yes         | No        |                                       | Yes         | date                                                                                                                                    | | https://api.fiken.no/api/v2/companies/{companySlug}/offers             | Yes         | No        |                                       | No          |                                                                                                                                         | | https://api.fiken.no/api/v2/companies/{companySlug}/orderConfirmations | Yes         | No        |                                       | No          |                                                                                                                                         | | https://api.fiken.no/api/v2/companies/{companySlug}/products           | Yes         | No        |                                       | Yes         | name, productNumber, active, createdDate, lastModified                                                                                  | | https://api.fiken.no/api/v2/companies/{companySlug}/projects           | Yes         | No        |                                       | Yes         | completed                                                                                                                               | | https://api.fiken.no/api/v2/companies/{companySlug}/purchases          | Yes         | Yes       | createdDate                           | No          | date                                                                                                                                    | | https://api.fiken.no/api/v2/companies/{companySlug}/purchases/drafts   | Yes         | No        |                                       | No          |                                                                                                                                         | | https://api.fiken.no/api/v2/companies/{companySlug}/sales              | Yes         | No        |                                       | Yes         | saleNumber, lastModified, date, contactId                                                                                               | | https://api.fiken.no/api/v2/companies/{companySlug}/sales/drafts       | Yes         | No        |                                       | No          |                                                                                                                                         | | https://api.fiken.no/api/v2/companies/{companySlug}/transactions       | Yes         | No        |                                       | Yes         | createdDate, lastModified                                                                                                               |  ### Pagination By default the API sets `page=0` and `pageSize=25` and returns the first 25 elements in a collection resource, if nothing else is specified. PageSize has a maximum value of 100 meaning that you can only access at most 100 elements at once.  To request a collection resource with pagination, query the resource with the query filters page and pageSize, note that both query parameters need to be set to enable pagination. The page counter starts at 0. The response will contain up to Fiken-Api-Page-Size elements and the response headers below, detailing how many elements the resource has in total and the total number of pages as well.  By default the API returns the resources in the order they were created, if nothing else is specified in the documentation.  #### Pagination Response Headers | Response Header           | Format   | Description                                                       | | - -- -- -- -- -- -- -- -          | - -- -- -- - | - -- -- -- -- -- -- -- -- -- -- -- -- -- --                                     | | `Fiken-Api-Page`          | integer  | From the request header                                           | | `Fiken-Api-Page-Size`     | integer  | From the request header                                           | | `Fiken-Api-Page-Count`    | integer  | The total number of pages in this resource with this page size    | | `Fiken-Api-Result-Count`  | integer  | The total number of elements in this resource                     |  ### Sorting To change the sort order for a resource, set the sortBy query parameter to a sort field in either ascending or descending order. Ex: `https://api.fiken.no/api/v2/companies?sortBy=name%20asc`  ### Filtering Some collections support filtering, and depending on the type of field, different filters can be used. Dates are the most complex, and allow you do apply different filters with different parameter names. For instance, for a field called date, the following mutations are available:  | Parameter | Field | Format    | Description                                   | | - --       |- --    | - --       |- --                                            | |  `date`   |date |yyyy-MM-dd |date equal to parameter value                  | |  `dateLe` |date |yyyy-MM-dd |date less than or equal to parameter value     | |  `dateLt` |date |yyyy-MM-dd |date less than parameter value                 | |  `dateGe` |date |yyyy-MM-dd |date greater than or equal to parameter value  | |  `dateGt` |date |yyyy-MM-dd |date greater than parameter value              |  All date-fields will have these mutations of parameter name that applies  ## Data Types These are simple data-types that are used in several of our objects.  ### Date Dates are represented as strings formatted as yyyy-MM-dd. \"Last modified\" returns the date of last modification of the object.  If the object was never modified after creation, last modified date is equal to created date.   ##### Examples: January 2nd, 1970: \"1970-01-02\"  ### Amount Amounts are always represented as a number, and specifies the number of cents in the amount. Fractions will be ignored.  ##### Examples: One thousand: 100000  One hundred and twelve cents: 10012  ### Account An account is a string with either four digits, or four digits, a colon and five digits (\"reskontro\").  ##### Examples: 3020  1500:10001  ### VAT Code Fiken's VAT codes are based upon Sticos mvakoder. To see all VAT codes go to Fiken support, check the \"Mva kode\"-selector in the Fiken web interface while creating a genereal ledger item (\"Fri postering\").  See below the mapping between VAT codes and types (codes are used at the transaction level while types are used for sales and purchases).  | Vat Code | Vat Type                                                                                                                                 | Valid for Purchases/Sales    |  | - --      |- --                                                                                                                                       | - --                          |                                          |  0/7     |NONE (Ingen - KJÃP_INGEN_MVABEHANDLING/SALG_INNTEKTER_UTEN_MVABEHANDLING)                                                               |Both                          | |  1/3    |HIGH (HÃ¸y - KJÃP/SALG_MED_HÃY_SATS)                                                                                                       |Both                          | |  11/31   |MEDIUM (Middels - KJÃP/SALG_MED_MIDDELS_SATS)                                                                                           |Both                       | |  12/32   |RAW_FISH (RÃ¥fisk - KJÃP/SALG_MED_RÃFISK_SATS)                                                                                           |Both                         | |  13/33   |LOW (Lav - KJÃP/SALG_MED_LAV_SATS)                                                                                                       |Both                          | |  52    |EXEMPT_IMPORT_EXPORT (Fritatt import/export - SALG_UTFÃRSEL_AV_VARER_OG_TJENESTER)                                                        |Sales                      | |  5    |EXEMPT (Fritatt - SALG_FRITATT_FOR_MVA_AVGIFTSFRITT)                                                                                   |Sales                        | |  6    |OUTSIDE (Utenfor - SALG_FRITATT_FOR_MVA_UTENFOR_AVGIFTSOMRÃDET)                                                                           |Sales                      | |  51    |EXEMPT_REVERSE (Fritatt omvendt - SALG_INNENLANDSK_OMSETNING_MED_OMVENDT_AVGIFTPLIKT)                                                   |Sales                      | |  14    |HIGH_DIRECT (HÃ¸y direkt - KUN_KJÃPSMVA_HÃY_SATS)                                                                                       |Purchases                  | |  21    |HIGH_BASIS (HÃ¸y grunnlag - KUN_GRUNNLAG_KJÃPSMVA_HÃY_SATS)                                                                               |Purchases                  | |  15    |MEDIUM_DIRECT (Middels direkte - KUN_KJÃPSMVA_MIDDELS_SATS)                                                                               |Purchases                  | |  22    |MEDIUM_BASIS (Middels grunnlag - KUN_GRUNNLAG_KJÃPSMVA_MIDDELS_SATS)                                                                   |Purchases                  | |  23    |NONE_IMPORT_BASIS (Ingen import grunnlag - KUN_GRUNNLAG_KJÃPSMVA_INGEN_SATS)                                                           |Purchases                  | |  86    |HIGH_FOREIGN_SERVICE_DEDUCTIBLE (Tjeneste utlandet - TJENESTER_KJÃPT_FRA_UTLANDET_MED_FRADRAG_FOR_HÃY_MVA)                               |Purchases                  | |  87    |HIGH_FOREIGN_SERVICE_NONDEDUCTIBLE (Tjeneste utlandet uten fradrag - TJENESTER_KJÃPT_FRA_UTLANDET_UTEN_FRADRAG_FOR_HÃY_MVA)               |Purchases                  | |  88    |LOW_FOREIGN_SERVICE_DEDUCTIBLE (Lav tjeneste utlandet - TJENESTER_KJÃPT_FRA_UTLANDET_MED_FRADRAG_FOR_LAV_MVA)                           |Purchases                  | |  89    |LOW_FOREIGN_SERVICE_NONDEDUCTIBLE (Lav tjeneste utlandet uten fradrag - TJENESTER_KJÃPT_FRA_UTLANDET_UTEN_FRADRAG_FOR_LAV_MVA)           |Purchases                  | |  91    |HIGH_PURCHASE_OF_EMISSIONSTRADING_OR_GOLD_DEDUCTIBLE (Gull - KJÃP_AV_KLIMAKVOTER_ELLER_GULL_MED_FRADRAG_FOR_MVA)                       |Purchases                  | |  92    |HIGH_PURCHASE_OF_EMISSIONSTRADING_OR_GOLD_NONDEDUCTIBLE (Gull uten fradrag - KJÃP_AV_KLIMAKVOTER_ELLER_GULL_UTEN_FRADRAG_FOR_MVA)       |Purchases                  | 
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using Fiken.Client;
using Fiken.Model;
using System.Diagnostics.CodeAnalysis;

namespace Fiken.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IContactsApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        ContactsApiEvents Events { get; }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates and adds a new attachment/document to a contact
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="contactId"></param>
        /// <param name="filename">Required. The filename. Must end with either .png, .jpeg, .jpg, .gif or .pdf (optional)</param>
        /// <param name="comment">Not required. (optional)</param>
        /// <param name="file"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAddAttachmentToContactApiResponse"/>&gt;</returns>
        Task<IAddAttachmentToContactApiResponse> AddAttachmentToContactAsync(string companySlug, long contactId, Option<string> filename = default, Option<string> comment = default, Option<System.IO.Stream> file = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates and adds a new attachment/document to a contact
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="contactId"></param>
        /// <param name="filename">Required. The filename. Must end with either .png, .jpeg, .jpg, .gif or .pdf (optional)</param>
        /// <param name="comment">Not required. (optional)</param>
        /// <param name="file"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAddAttachmentToContactApiResponse"/>?&gt;</returns>
        Task<IAddAttachmentToContactApiResponse?> AddAttachmentToContactOrDefaultAsync(string companySlug, long contactId, Option<string> filename = default, Option<string> comment = default, Option<System.IO.Stream> file = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Adds a new contact person to a contact
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="contactId"></param>
        /// <param name="contactPerson"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAddContactPersonToContactApiResponse"/>&gt;</returns>
        Task<IAddContactPersonToContactApiResponse> AddContactPersonToContactAsync(string companySlug, long contactId, ContactPerson contactPerson, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Adds a new contact person to a contact
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="contactId"></param>
        /// <param name="contactPerson"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAddContactPersonToContactApiResponse"/>?&gt;</returns>
        Task<IAddContactPersonToContactApiResponse?> AddContactPersonToContactOrDefaultAsync(string companySlug, long contactId, ContactPerson contactPerson, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a new contact. The Location response header returns the URL of the newly created contact.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="contact"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateContactApiResponse"/>&gt;</returns>
        Task<ICreateContactApiResponse> CreateContactAsync(string companySlug, Contact contact, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a new contact. The Location response header returns the URL of the newly created contact.
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="contact"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateContactApiResponse"/>?&gt;</returns>
        Task<ICreateContactApiResponse?> CreateContactOrDefaultAsync(string companySlug, Contact contact, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deletes the contact if possible (no associated journal entries/sales/invoices/etc). If not possible to delete will set the contact to inactive
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="contactId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteContactApiResponse"/>&gt;</returns>
        Task<IDeleteContactApiResponse> DeleteContactAsync(string companySlug, long contactId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deletes the contact if possible (no associated journal entries/sales/invoices/etc). If not possible to delete will set the contact to inactive
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="contactId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteContactApiResponse"/>?&gt;</returns>
        Task<IDeleteContactApiResponse?> DeleteContactOrDefaultAsync(string companySlug, long contactId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete a contact&#39;s contact person.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="contactId"></param>
        /// <param name="contactPersonId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteContactContactPersonApiResponse"/>&gt;</returns>
        Task<IDeleteContactContactPersonApiResponse> DeleteContactContactPersonAsync(string companySlug, long contactId, long contactPersonId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete a contact&#39;s contact person.
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="contactId"></param>
        /// <param name="contactPersonId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteContactContactPersonApiResponse"/>?&gt;</returns>
        Task<IDeleteContactContactPersonApiResponse?> DeleteContactContactPersonOrDefaultAsync(string companySlug, long contactId, long contactPersonId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves specified contact. ContactId is returned with a GET contacts call as the first returned field. ContactId is returned in the Location response header for POST contact. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="contactId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetContactApiResponse"/>&gt;</returns>
        Task<IGetContactApiResponse> GetContactAsync(string companySlug, long contactId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves specified contact. ContactId is returned with a GET contacts call as the first returned field. ContactId is returned in the Location response header for POST contact. 
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="contactId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetContactApiResponse"/>?&gt;</returns>
        Task<IGetContactApiResponse?> GetContactOrDefaultAsync(string companySlug, long contactId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves contact person(s) for a specified contact. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="contactId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetContactContactPersonApiResponse"/>&gt;</returns>
        Task<IGetContactContactPersonApiResponse> GetContactContactPersonAsync(string companySlug, long contactId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves contact person(s) for a specified contact. 
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="contactId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetContactContactPersonApiResponse"/>?&gt;</returns>
        Task<IGetContactContactPersonApiResponse?> GetContactContactPersonOrDefaultAsync(string companySlug, long contactId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves specified contact person 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="contactId"></param>
        /// <param name="contactPersonId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetContactPersonApiResponse"/>&gt;</returns>
        Task<IGetContactPersonApiResponse> GetContactPersonAsync(string companySlug, long contactId, long contactPersonId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves specified contact person 
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="contactId"></param>
        /// <param name="contactPersonId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetContactPersonApiResponse"/>?&gt;</returns>
        Task<IGetContactPersonApiResponse?> GetContactPersonOrDefaultAsync(string companySlug, long contactId, long contactPersonId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all contacts for the specified company.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="page">Returns the number of the page to return. Valid page values are integers from 0 to the total number of pages. Default value is 0.  (optional, default to 0)</param>
        /// <param name="pageSize">Defines the number of entries to return on each page. Maximum number of results that can be returned at one time are 100. Default value is 25.  (optional, default to 25)</param>
        /// <param name="lastModified">Filter based on date of last modification. Returns results that were last modified on the date provided as a parameter value. Dates are represented as strings formatted as YYYY-MM-DD. Example: January 1st, 1970: \&quot;1970-01-01\&quot;  (optional)</param>
        /// <param name="lastModifiedLe">Returns results that have been last modified before or on the date provided as a parameter value. Dates are represented as strings formatted as YYYY-MM-DD. Example: January 1st, 1970: \&quot;1970-01-01\&quot;  (optional)</param>
        /// <param name="lastModifiedLt">Returns results that have been last modified strictly before the date provided as a parameter value. Dates are represented as strings formatted as YYYY-MM-DD. Example: January 1st, 1970: \&quot;1970-01-01\&quot;  (optional)</param>
        /// <param name="lastModifiedGe">Returns results that have been last modified after or on the date provided as a parameter value. Dates are represented as strings formatted as YYYY-MM-DD. Example: January 1st, 1970: \&quot;1970-01-01\&quot;  (optional)</param>
        /// <param name="lastModifiedGt">Returns results that have been last modified strictly after the date provided as a parameter value. Dates are represented as strings formatted as YYYY-MM-DD. Example: January 1st, 1970: \&quot;1970-01-01\&quot;  (optional)</param>
        /// <param name="createdDate">Dates are represented as strings formatted as YYYY-MM-DD. Example: January 1st, 1970: \&quot;1970-01-01\&quot;  (optional)</param>
        /// <param name="createdDateLe">Returns results that were created before or on the date provided as a parameter value. Dates are represented as strings formatted as YYYY-MM-DD. Example: January 1st, 1970: \&quot;1970-01-01\&quot;  (optional)</param>
        /// <param name="createdDateLt">Returns results that were created strictly before the date provided as a parameter value. Dates are represented as strings formatted as YYYY-MM-DD. Example: January 1st, 1970: \&quot;1970-01-01\&quot;  (optional)</param>
        /// <param name="createdDateGe">Returns results that were created after or on the date provided as a parameter value. Dates are represented as strings formatted as YYYY-MM-DD. Example: January 1st, 1970: \&quot;1970-01-01\&quot;  (optional)</param>
        /// <param name="createdDateGt">Returns results that were created strictly after the date provided as a parameter value. Dates are represented as strings formatted as YYYY-MM-DD. Example: January 1st, 1970: \&quot;1970-01-01\&quot;  (optional)</param>
        /// <param name="supplierNumber">Find all results with the supplier number equal to the specified parameter. (optional)</param>
        /// <param name="customerNumber">Find all results with the customer number equal to the specified parameter. (optional)</param>
        /// <param name="memberNumber">Find all results with the member number equal to the specified parameter. (optional) (deprecated)</param>
        /// <param name="memberNumberString">Find all results with the member number equal to the specified parameter. (optional)</param>
        /// <param name="name">Find all results with the name equal to the specified parameter. (optional)</param>
        /// <param name="organizationNumber">Find all results with the organization number equal to the specified parameter. (optional)</param>
        /// <param name="email">Find all results with the email equal to the specified parameter. (optional)</param>
        /// <param name="customer">Returns all contacts that are customers. If filter is set for both supplier and customer &#x3D; true, only contacts that are both supplier and customer will be returned. (optional)</param>
        /// <param name="supplier">Returns all contacts that are suppliers. If filter is set for both supplier and customer &#x3D; true, only contacts that are both supplier and customer will be returned. (optional)</param>
        /// <param name="inactive">Return all active contacts (false) or all inactive contacts (true). (optional)</param>
        /// <param name="group">Return contacts in contact group, exact match only. Groups are only used for customers, not suppliers. (optional)</param>
        /// <param name="sortBy"> (optional, default to createdDate asc)</param>
        /// <param name="phoneNumber">Find all results with the phone number equal to the specified parameter. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetContactsApiResponse"/>&gt;</returns>
        Task<IGetContactsApiResponse> GetContactsAsync(string companySlug, Option<int> page = default, Option<int> pageSize = default, Option<DateOnly> lastModified = default, Option<DateOnly> lastModifiedLe = default, Option<DateOnly> lastModifiedLt = default, Option<DateOnly> lastModifiedGe = default, Option<DateOnly> lastModifiedGt = default, Option<DateOnly> createdDate = default, Option<DateOnly> createdDateLe = default, Option<DateOnly> createdDateLt = default, Option<DateOnly> createdDateGe = default, Option<DateOnly> createdDateGt = default, Option<int> supplierNumber = default, Option<int> customerNumber = default, Option<int> memberNumber = default, Option<string> memberNumberString = default, Option<string> name = default, Option<string> organizationNumber = default, Option<string> email = default, Option<bool> customer = default, Option<bool> supplier = default, Option<bool> inactive = default, Option<string> group = default, Option<string> sortBy = default, Option<string> phoneNumber = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves all contacts for the specified company.
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="page">Returns the number of the page to return. Valid page values are integers from 0 to the total number of pages. Default value is 0.  (optional, default to 0)</param>
        /// <param name="pageSize">Defines the number of entries to return on each page. Maximum number of results that can be returned at one time are 100. Default value is 25.  (optional, default to 25)</param>
        /// <param name="lastModified">Filter based on date of last modification. Returns results that were last modified on the date provided as a parameter value. Dates are represented as strings formatted as YYYY-MM-DD. Example: January 1st, 1970: \&quot;1970-01-01\&quot;  (optional)</param>
        /// <param name="lastModifiedLe">Returns results that have been last modified before or on the date provided as a parameter value. Dates are represented as strings formatted as YYYY-MM-DD. Example: January 1st, 1970: \&quot;1970-01-01\&quot;  (optional)</param>
        /// <param name="lastModifiedLt">Returns results that have been last modified strictly before the date provided as a parameter value. Dates are represented as strings formatted as YYYY-MM-DD. Example: January 1st, 1970: \&quot;1970-01-01\&quot;  (optional)</param>
        /// <param name="lastModifiedGe">Returns results that have been last modified after or on the date provided as a parameter value. Dates are represented as strings formatted as YYYY-MM-DD. Example: January 1st, 1970: \&quot;1970-01-01\&quot;  (optional)</param>
        /// <param name="lastModifiedGt">Returns results that have been last modified strictly after the date provided as a parameter value. Dates are represented as strings formatted as YYYY-MM-DD. Example: January 1st, 1970: \&quot;1970-01-01\&quot;  (optional)</param>
        /// <param name="createdDate">Dates are represented as strings formatted as YYYY-MM-DD. Example: January 1st, 1970: \&quot;1970-01-01\&quot;  (optional)</param>
        /// <param name="createdDateLe">Returns results that were created before or on the date provided as a parameter value. Dates are represented as strings formatted as YYYY-MM-DD. Example: January 1st, 1970: \&quot;1970-01-01\&quot;  (optional)</param>
        /// <param name="createdDateLt">Returns results that were created strictly before the date provided as a parameter value. Dates are represented as strings formatted as YYYY-MM-DD. Example: January 1st, 1970: \&quot;1970-01-01\&quot;  (optional)</param>
        /// <param name="createdDateGe">Returns results that were created after or on the date provided as a parameter value. Dates are represented as strings formatted as YYYY-MM-DD. Example: January 1st, 1970: \&quot;1970-01-01\&quot;  (optional)</param>
        /// <param name="createdDateGt">Returns results that were created strictly after the date provided as a parameter value. Dates are represented as strings formatted as YYYY-MM-DD. Example: January 1st, 1970: \&quot;1970-01-01\&quot;  (optional)</param>
        /// <param name="supplierNumber">Find all results with the supplier number equal to the specified parameter. (optional)</param>
        /// <param name="customerNumber">Find all results with the customer number equal to the specified parameter. (optional)</param>
        /// <param name="memberNumber">Find all results with the member number equal to the specified parameter. (optional) (deprecated)</param>
        /// <param name="memberNumberString">Find all results with the member number equal to the specified parameter. (optional)</param>
        /// <param name="name">Find all results with the name equal to the specified parameter. (optional)</param>
        /// <param name="organizationNumber">Find all results with the organization number equal to the specified parameter. (optional)</param>
        /// <param name="email">Find all results with the email equal to the specified parameter. (optional)</param>
        /// <param name="customer">Returns all contacts that are customers. If filter is set for both supplier and customer &#x3D; true, only contacts that are both supplier and customer will be returned. (optional)</param>
        /// <param name="supplier">Returns all contacts that are suppliers. If filter is set for both supplier and customer &#x3D; true, only contacts that are both supplier and customer will be returned. (optional)</param>
        /// <param name="inactive">Return all active contacts (false) or all inactive contacts (true). (optional)</param>
        /// <param name="group">Return contacts in contact group, exact match only. Groups are only used for customers, not suppliers. (optional)</param>
        /// <param name="sortBy"> (optional, default to createdDate asc)</param>
        /// <param name="phoneNumber">Find all results with the phone number equal to the specified parameter. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetContactsApiResponse"/>?&gt;</returns>
        Task<IGetContactsApiResponse?> GetContactsOrDefaultAsync(string companySlug, Option<int> page = default, Option<int> pageSize = default, Option<DateOnly> lastModified = default, Option<DateOnly> lastModifiedLe = default, Option<DateOnly> lastModifiedLt = default, Option<DateOnly> lastModifiedGe = default, Option<DateOnly> lastModifiedGt = default, Option<DateOnly> createdDate = default, Option<DateOnly> createdDateLe = default, Option<DateOnly> createdDateLt = default, Option<DateOnly> createdDateGe = default, Option<DateOnly> createdDateGt = default, Option<int> supplierNumber = default, Option<int> customerNumber = default, Option<int> memberNumber = default, Option<string> memberNumberString = default, Option<string> name = default, Option<string> organizationNumber = default, Option<string> email = default, Option<bool> customer = default, Option<bool> supplier = default, Option<bool> inactive = default, Option<string> group = default, Option<string> sortBy = default, Option<string> phoneNumber = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates an existing contact.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="contactId"></param>
        /// <param name="contact"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateContactApiResponse"/>&gt;</returns>
        Task<IUpdateContactApiResponse> UpdateContactAsync(string companySlug, long contactId, Contact contact, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates an existing contact.
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="contactId"></param>
        /// <param name="contact"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateContactApiResponse"/>?&gt;</returns>
        Task<IUpdateContactApiResponse?> UpdateContactOrDefaultAsync(string companySlug, long contactId, Contact contact, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates an existing contact person.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="contactId"></param>
        /// <param name="contactPersonId"></param>
        /// <param name="contactPerson"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateContactContactPersonApiResponse"/>&gt;</returns>
        Task<IUpdateContactContactPersonApiResponse> UpdateContactContactPersonAsync(string companySlug, long contactId, long contactPersonId, ContactPerson contactPerson, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates an existing contact person.
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="contactId"></param>
        /// <param name="contactPersonId"></param>
        /// <param name="contactPerson"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateContactContactPersonApiResponse"/>?&gt;</returns>
        Task<IUpdateContactContactPersonApiResponse?> UpdateContactContactPersonOrDefaultAsync(string companySlug, long contactId, long contactPersonId, ContactPerson contactPerson, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IAddAttachmentToContactApiResponse"/>
    /// </summary>
    public interface IAddAttachmentToContactApiResponse : Fiken.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 201 Created
        /// </summary>
        /// <returns></returns>
        bool IsCreated { get; }
    }

    /// <summary>
    /// The <see cref="IAddContactPersonToContactApiResponse"/>
    /// </summary>
    public interface IAddContactPersonToContactApiResponse : Fiken.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="ICreateContactApiResponse"/>
    /// </summary>
    public interface ICreateContactApiResponse : Fiken.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 201 Created
        /// </summary>
        /// <returns></returns>
        bool IsCreated { get; }
    }

    /// <summary>
    /// The <see cref="IDeleteContactApiResponse"/>
    /// </summary>
    public interface IDeleteContactApiResponse : Fiken.Client.IApiResponse, IOk<Fiken.Model.Contact?>
    {
        /// <summary>
        /// Returns true if the response is 204 NoContent
        /// </summary>
        /// <returns></returns>
        bool IsNoContent { get; }

        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IDeleteContactContactPersonApiResponse"/>
    /// </summary>
    public interface IDeleteContactContactPersonApiResponse : Fiken.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 204 NoContent
        /// </summary>
        /// <returns></returns>
        bool IsNoContent { get; }
    }

    /// <summary>
    /// The <see cref="IGetContactApiResponse"/>
    /// </summary>
    public interface IGetContactApiResponse : Fiken.Client.IApiResponse, IOk<Fiken.Model.Contact?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetContactContactPersonApiResponse"/>
    /// </summary>
    public interface IGetContactContactPersonApiResponse : Fiken.Client.IApiResponse, IOk<List<ContactPerson>?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetContactPersonApiResponse"/>
    /// </summary>
    public interface IGetContactPersonApiResponse : Fiken.Client.IApiResponse, IOk<Fiken.Model.ContactPerson?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetContactsApiResponse"/>
    /// </summary>
    public interface IGetContactsApiResponse : Fiken.Client.IApiResponse, IOk<List<Contact>?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IUpdateContactApiResponse"/>
    /// </summary>
    public interface IUpdateContactApiResponse : Fiken.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IUpdateContactContactPersonApiResponse"/>
    /// </summary>
    public interface IUpdateContactContactPersonApiResponse : Fiken.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class ContactsApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnAddAttachmentToContact;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorAddAttachmentToContact;

        internal void ExecuteOnAddAttachmentToContact(ContactsApi.AddAttachmentToContactApiResponse apiResponse)
        {
            OnAddAttachmentToContact?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorAddAttachmentToContact(Exception exception)
        {
            OnErrorAddAttachmentToContact?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnAddContactPersonToContact;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorAddContactPersonToContact;

        internal void ExecuteOnAddContactPersonToContact(ContactsApi.AddContactPersonToContactApiResponse apiResponse)
        {
            OnAddContactPersonToContact?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorAddContactPersonToContact(Exception exception)
        {
            OnErrorAddContactPersonToContact?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnCreateContact;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorCreateContact;

        internal void ExecuteOnCreateContact(ContactsApi.CreateContactApiResponse apiResponse)
        {
            OnCreateContact?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorCreateContact(Exception exception)
        {
            OnErrorCreateContact?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnDeleteContact;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorDeleteContact;

        internal void ExecuteOnDeleteContact(ContactsApi.DeleteContactApiResponse apiResponse)
        {
            OnDeleteContact?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDeleteContact(Exception exception)
        {
            OnErrorDeleteContact?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnDeleteContactContactPerson;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorDeleteContactContactPerson;

        internal void ExecuteOnDeleteContactContactPerson(ContactsApi.DeleteContactContactPersonApiResponse apiResponse)
        {
            OnDeleteContactContactPerson?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDeleteContactContactPerson(Exception exception)
        {
            OnErrorDeleteContactContactPerson?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetContact;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetContact;

        internal void ExecuteOnGetContact(ContactsApi.GetContactApiResponse apiResponse)
        {
            OnGetContact?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetContact(Exception exception)
        {
            OnErrorGetContact?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetContactContactPerson;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetContactContactPerson;

        internal void ExecuteOnGetContactContactPerson(ContactsApi.GetContactContactPersonApiResponse apiResponse)
        {
            OnGetContactContactPerson?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetContactContactPerson(Exception exception)
        {
            OnErrorGetContactContactPerson?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetContactPerson;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetContactPerson;

        internal void ExecuteOnGetContactPerson(ContactsApi.GetContactPersonApiResponse apiResponse)
        {
            OnGetContactPerson?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetContactPerson(Exception exception)
        {
            OnErrorGetContactPerson?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetContacts;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetContacts;

        internal void ExecuteOnGetContacts(ContactsApi.GetContactsApiResponse apiResponse)
        {
            OnGetContacts?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetContacts(Exception exception)
        {
            OnErrorGetContacts?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnUpdateContact;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorUpdateContact;

        internal void ExecuteOnUpdateContact(ContactsApi.UpdateContactApiResponse apiResponse)
        {
            OnUpdateContact?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorUpdateContact(Exception exception)
        {
            OnErrorUpdateContact?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnUpdateContactContactPerson;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorUpdateContactContactPerson;

        internal void ExecuteOnUpdateContactContactPerson(ContactsApi.UpdateContactContactPersonApiResponse apiResponse)
        {
            OnUpdateContactContactPerson?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorUpdateContactContactPerson(Exception exception)
        {
            OnErrorUpdateContactContactPerson?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class ContactsApi : IContactsApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<ContactsApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public ContactsApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="OauthTokenProvider"/>
        /// </summary>
        public TokenProvider<OAuthToken> OauthTokenProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="ContactsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ContactsApi(ILogger<ContactsApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, ContactsApiEvents contactsApiEvents,
            TokenProvider<OAuthToken> oauthTokenProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<ContactsApi>();
            HttpClient = httpClient;
            Events = contactsApiEvents;
            OauthTokenProvider = oauthTokenProvider;
        }

        partial void FormatAddAttachmentToContact(ref string companySlug, ref long contactId, ref Option<string> filename, ref Option<string> comment, ref Option<System.IO.Stream> file);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="companySlug"></param>
        /// <param name="filename"></param>
        /// <param name="comment"></param>
        /// <param name="file"></param>
        /// <returns></returns>
        private void ValidateAddAttachmentToContact(string companySlug, Option<string> filename, Option<string> comment, Option<System.IO.Stream> file)
        {
            if (companySlug == null)
                throw new ArgumentNullException(nameof(companySlug));

            if (filename.IsSet && filename.Value == null)
                throw new ArgumentNullException(nameof(filename));

            if (comment.IsSet && comment.Value == null)
                throw new ArgumentNullException(nameof(comment));

            if (file.IsSet && file.Value == null)
                throw new ArgumentNullException(nameof(file));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="contactId"></param>
        /// <param name="filename"></param>
        /// <param name="comment"></param>
        /// <param name="file"></param>
        private void AfterAddAttachmentToContactDefaultImplementation(IAddAttachmentToContactApiResponse apiResponseLocalVar, string companySlug, long contactId, Option<string> filename, Option<string> comment, Option<System.IO.Stream> file)
        {
            bool suppressDefaultLog = false;
            AfterAddAttachmentToContact(ref suppressDefaultLog, apiResponseLocalVar, companySlug, contactId, filename, comment, file);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="contactId"></param>
        /// <param name="filename"></param>
        /// <param name="comment"></param>
        /// <param name="file"></param>
        partial void AfterAddAttachmentToContact(ref bool suppressDefaultLog, IAddAttachmentToContactApiResponse apiResponseLocalVar, string companySlug, long contactId, Option<string> filename, Option<string> comment, Option<System.IO.Stream> file);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="contactId"></param>
        /// <param name="filename"></param>
        /// <param name="comment"></param>
        /// <param name="file"></param>
        private void OnErrorAddAttachmentToContactDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string companySlug, long contactId, Option<string> filename, Option<string> comment, Option<System.IO.Stream> file)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorAddAttachmentToContact(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, companySlug, contactId, filename, comment, file);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="contactId"></param>
        /// <param name="filename"></param>
        /// <param name="comment"></param>
        /// <param name="file"></param>
        partial void OnErrorAddAttachmentToContact(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string companySlug, long contactId, Option<string> filename, Option<string> comment, Option<System.IO.Stream> file);

        /// <summary>
        ///  Creates and adds a new attachment/document to a contact
        /// </summary>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="contactId"></param>
        /// <param name="filename">Required. The filename. Must end with either .png, .jpeg, .jpg, .gif or .pdf (optional)</param>
        /// <param name="comment">Not required. (optional)</param>
        /// <param name="file"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAddAttachmentToContactApiResponse"/>&gt;</returns>
        public async Task<IAddAttachmentToContactApiResponse?> AddAttachmentToContactOrDefaultAsync(string companySlug, long contactId, Option<string> filename = default, Option<string> comment = default, Option<System.IO.Stream> file = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await AddAttachmentToContactAsync(companySlug, contactId, filename, comment, file, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  Creates and adds a new attachment/document to a contact
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="contactId"></param>
        /// <param name="filename">Required. The filename. Must end with either .png, .jpeg, .jpg, .gif or .pdf (optional)</param>
        /// <param name="comment">Not required. (optional)</param>
        /// <param name="file"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAddAttachmentToContactApiResponse"/>&gt;</returns>
        public async Task<IAddAttachmentToContactApiResponse> AddAttachmentToContactAsync(string companySlug, long contactId, Option<string> filename = default, Option<string> comment = default, Option<System.IO.Stream> file = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateAddAttachmentToContact(companySlug, filename, comment, file);

                FormatAddAttachmentToContact(ref companySlug, ref contactId, ref filename, ref comment, ref file);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/companies/{companySlug}/contacts/{contactId}/attachments";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BcompanySlug%7D", Uri.EscapeDataString(companySlug.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BcontactId%7D", Uri.EscapeDataString(contactId.ToString()));

                    MultipartContent multipartContentLocalVar = new MultipartContent();

                    httpRequestMessageLocalVar.Content = multipartContentLocalVar;

                    List<KeyValuePair<string?, string?>> formParameterLocalVars = new List<KeyValuePair<string?, string?>>();

                    multipartContentLocalVar.Add(new FormUrlEncodedContent(formParameterLocalVars));                    if (filename.IsSet)
                        formParameterLocalVars.Add(new KeyValuePair<string?, string?>("filename", ClientUtils.ParameterToString(filename.Value)));

                    if (comment.IsSet)
                        formParameterLocalVars.Add(new KeyValuePair<string?, string?>("comment", ClientUtils.ParameterToString(comment.Value)));

                    if (file.IsSet)
                        multipartContentLocalVar.Add(new StreamContent(file.Value));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "multipart/form-data"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<AddAttachmentToContactApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<AddAttachmentToContactApiResponse>();

                        AddAttachmentToContactApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/companies/{companySlug}/contacts/{contactId}/attachments", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterAddAttachmentToContactDefaultImplementation(apiResponseLocalVar, companySlug, contactId, filename, comment, file);

                        Events.ExecuteOnAddAttachmentToContact(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorAddAttachmentToContactDefaultImplementation(e, "/companies/{companySlug}/contacts/{contactId}/attachments", uriBuilderLocalVar.Path, companySlug, contactId, filename, comment, file);
                Events.ExecuteOnErrorAddAttachmentToContact(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="AddAttachmentToContactApiResponse"/>
        /// </summary>
        public partial class AddAttachmentToContactApiResponse : Fiken.Client.ApiResponse, IAddAttachmentToContactApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<AddAttachmentToContactApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="AddAttachmentToContactApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public AddAttachmentToContactApiResponse(ILogger<AddAttachmentToContactApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public bool IsCreated => 201 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatAddContactPersonToContact(ref string companySlug, ref long contactId, ContactPerson contactPerson);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="companySlug"></param>
        /// <param name="contactPerson"></param>
        /// <returns></returns>
        private void ValidateAddContactPersonToContact(string companySlug, ContactPerson contactPerson)
        {
            if (companySlug == null)
                throw new ArgumentNullException(nameof(companySlug));

            if (contactPerson == null)
                throw new ArgumentNullException(nameof(contactPerson));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="contactId"></param>
        /// <param name="contactPerson"></param>
        private void AfterAddContactPersonToContactDefaultImplementation(IAddContactPersonToContactApiResponse apiResponseLocalVar, string companySlug, long contactId, ContactPerson contactPerson)
        {
            bool suppressDefaultLog = false;
            AfterAddContactPersonToContact(ref suppressDefaultLog, apiResponseLocalVar, companySlug, contactId, contactPerson);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="contactId"></param>
        /// <param name="contactPerson"></param>
        partial void AfterAddContactPersonToContact(ref bool suppressDefaultLog, IAddContactPersonToContactApiResponse apiResponseLocalVar, string companySlug, long contactId, ContactPerson contactPerson);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="contactId"></param>
        /// <param name="contactPerson"></param>
        private void OnErrorAddContactPersonToContactDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string companySlug, long contactId, ContactPerson contactPerson)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorAddContactPersonToContact(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, companySlug, contactId, contactPerson);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="contactId"></param>
        /// <param name="contactPerson"></param>
        partial void OnErrorAddContactPersonToContact(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string companySlug, long contactId, ContactPerson contactPerson);

        /// <summary>
        ///  Adds a new contact person to a contact
        /// </summary>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="contactId"></param>
        /// <param name="contactPerson"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAddContactPersonToContactApiResponse"/>&gt;</returns>
        public async Task<IAddContactPersonToContactApiResponse?> AddContactPersonToContactOrDefaultAsync(string companySlug, long contactId, ContactPerson contactPerson, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await AddContactPersonToContactAsync(companySlug, contactId, contactPerson, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  Adds a new contact person to a contact
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="contactId"></param>
        /// <param name="contactPerson"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAddContactPersonToContactApiResponse"/>&gt;</returns>
        public async Task<IAddContactPersonToContactApiResponse> AddContactPersonToContactAsync(string companySlug, long contactId, ContactPerson contactPerson, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateAddContactPersonToContact(companySlug, contactPerson);

                FormatAddContactPersonToContact(ref companySlug, ref contactId, contactPerson);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/companies/{companySlug}/contacts/{contactId}/contactPerson";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BcompanySlug%7D", Uri.EscapeDataString(companySlug.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BcontactId%7D", Uri.EscapeDataString(contactId.ToString()));

                    httpRequestMessageLocalVar.Content = (contactPerson as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(contactPerson, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<AddContactPersonToContactApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<AddContactPersonToContactApiResponse>();

                        AddContactPersonToContactApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/companies/{companySlug}/contacts/{contactId}/contactPerson", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterAddContactPersonToContactDefaultImplementation(apiResponseLocalVar, companySlug, contactId, contactPerson);

                        Events.ExecuteOnAddContactPersonToContact(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorAddContactPersonToContactDefaultImplementation(e, "/companies/{companySlug}/contacts/{contactId}/contactPerson", uriBuilderLocalVar.Path, companySlug, contactId, contactPerson);
                Events.ExecuteOnErrorAddContactPersonToContact(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="AddContactPersonToContactApiResponse"/>
        /// </summary>
        public partial class AddContactPersonToContactApiResponse : Fiken.Client.ApiResponse, IAddContactPersonToContactApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<AddContactPersonToContactApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="AddContactPersonToContactApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public AddContactPersonToContactApiResponse(ILogger<AddContactPersonToContactApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatCreateContact(ref string companySlug, Contact contact);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="companySlug"></param>
        /// <param name="contact"></param>
        /// <returns></returns>
        private void ValidateCreateContact(string companySlug, Contact contact)
        {
            if (companySlug == null)
                throw new ArgumentNullException(nameof(companySlug));

            if (contact == null)
                throw new ArgumentNullException(nameof(contact));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="contact"></param>
        private void AfterCreateContactDefaultImplementation(ICreateContactApiResponse apiResponseLocalVar, string companySlug, Contact contact)
        {
            bool suppressDefaultLog = false;
            AfterCreateContact(ref suppressDefaultLog, apiResponseLocalVar, companySlug, contact);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="contact"></param>
        partial void AfterCreateContact(ref bool suppressDefaultLog, ICreateContactApiResponse apiResponseLocalVar, string companySlug, Contact contact);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="contact"></param>
        private void OnErrorCreateContactDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string companySlug, Contact contact)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorCreateContact(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, companySlug, contact);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="contact"></param>
        partial void OnErrorCreateContact(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string companySlug, Contact contact);

        /// <summary>
        ///  Creates a new contact. The Location response header returns the URL of the newly created contact.
        /// </summary>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="contact"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateContactApiResponse"/>&gt;</returns>
        public async Task<ICreateContactApiResponse?> CreateContactOrDefaultAsync(string companySlug, Contact contact, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await CreateContactAsync(companySlug, contact, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  Creates a new contact. The Location response header returns the URL of the newly created contact.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="contact"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateContactApiResponse"/>&gt;</returns>
        public async Task<ICreateContactApiResponse> CreateContactAsync(string companySlug, Contact contact, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateCreateContact(companySlug, contact);

                FormatCreateContact(ref companySlug, contact);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/companies/{companySlug}/contacts";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BcompanySlug%7D", Uri.EscapeDataString(companySlug.ToString()));

                    httpRequestMessageLocalVar.Content = (contact as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(contact, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<CreateContactApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<CreateContactApiResponse>();

                        CreateContactApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/companies/{companySlug}/contacts", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterCreateContactDefaultImplementation(apiResponseLocalVar, companySlug, contact);

                        Events.ExecuteOnCreateContact(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorCreateContactDefaultImplementation(e, "/companies/{companySlug}/contacts", uriBuilderLocalVar.Path, companySlug, contact);
                Events.ExecuteOnErrorCreateContact(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="CreateContactApiResponse"/>
        /// </summary>
        public partial class CreateContactApiResponse : Fiken.Client.ApiResponse, ICreateContactApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<CreateContactApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="CreateContactApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public CreateContactApiResponse(ILogger<CreateContactApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public bool IsCreated => 201 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatDeleteContact(ref string companySlug, ref long contactId);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="companySlug"></param>
        /// <returns></returns>
        private void ValidateDeleteContact(string companySlug)
        {
            if (companySlug == null)
                throw new ArgumentNullException(nameof(companySlug));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="contactId"></param>
        private void AfterDeleteContactDefaultImplementation(IDeleteContactApiResponse apiResponseLocalVar, string companySlug, long contactId)
        {
            bool suppressDefaultLog = false;
            AfterDeleteContact(ref suppressDefaultLog, apiResponseLocalVar, companySlug, contactId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="contactId"></param>
        partial void AfterDeleteContact(ref bool suppressDefaultLog, IDeleteContactApiResponse apiResponseLocalVar, string companySlug, long contactId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="contactId"></param>
        private void OnErrorDeleteContactDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string companySlug, long contactId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorDeleteContact(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, companySlug, contactId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="contactId"></param>
        partial void OnErrorDeleteContact(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string companySlug, long contactId);

        /// <summary>
        ///  Deletes the contact if possible (no associated journal entries/sales/invoices/etc). If not possible to delete will set the contact to inactive
        /// </summary>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="contactId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteContactApiResponse"/>&gt;</returns>
        public async Task<IDeleteContactApiResponse?> DeleteContactOrDefaultAsync(string companySlug, long contactId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DeleteContactAsync(companySlug, contactId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  Deletes the contact if possible (no associated journal entries/sales/invoices/etc). If not possible to delete will set the contact to inactive
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="contactId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteContactApiResponse"/>&gt;</returns>
        public async Task<IDeleteContactApiResponse> DeleteContactAsync(string companySlug, long contactId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateDeleteContact(companySlug);

                FormatDeleteContact(ref companySlug, ref contactId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/companies/{companySlug}/contacts/{contactId}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BcompanySlug%7D", Uri.EscapeDataString(companySlug.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BcontactId%7D", Uri.EscapeDataString(contactId.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Delete;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<DeleteContactApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DeleteContactApiResponse>();

                        DeleteContactApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/companies/{companySlug}/contacts/{contactId}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterDeleteContactDefaultImplementation(apiResponseLocalVar, companySlug, contactId);

                        Events.ExecuteOnDeleteContact(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDeleteContactDefaultImplementation(e, "/companies/{companySlug}/contacts/{contactId}", uriBuilderLocalVar.Path, companySlug, contactId);
                Events.ExecuteOnErrorDeleteContact(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DeleteContactApiResponse"/>
        /// </summary>
        public partial class DeleteContactApiResponse : Fiken.Client.ApiResponse, IDeleteContactApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DeleteContactApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DeleteContactApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeleteContactApiResponse(ILogger<DeleteContactApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 204 NoContent
            /// </summary>
            /// <returns></returns>
            public bool IsNoContent => 204 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Fiken.Model.Contact? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Fiken.Model.Contact>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Fiken.Model.Contact? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatDeleteContactContactPerson(ref string companySlug, ref long contactId, ref long contactPersonId);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="companySlug"></param>
        /// <returns></returns>
        private void ValidateDeleteContactContactPerson(string companySlug)
        {
            if (companySlug == null)
                throw new ArgumentNullException(nameof(companySlug));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="contactId"></param>
        /// <param name="contactPersonId"></param>
        private void AfterDeleteContactContactPersonDefaultImplementation(IDeleteContactContactPersonApiResponse apiResponseLocalVar, string companySlug, long contactId, long contactPersonId)
        {
            bool suppressDefaultLog = false;
            AfterDeleteContactContactPerson(ref suppressDefaultLog, apiResponseLocalVar, companySlug, contactId, contactPersonId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="contactId"></param>
        /// <param name="contactPersonId"></param>
        partial void AfterDeleteContactContactPerson(ref bool suppressDefaultLog, IDeleteContactContactPersonApiResponse apiResponseLocalVar, string companySlug, long contactId, long contactPersonId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="contactId"></param>
        /// <param name="contactPersonId"></param>
        private void OnErrorDeleteContactContactPersonDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string companySlug, long contactId, long contactPersonId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorDeleteContactContactPerson(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, companySlug, contactId, contactPersonId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="contactId"></param>
        /// <param name="contactPersonId"></param>
        partial void OnErrorDeleteContactContactPerson(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string companySlug, long contactId, long contactPersonId);

        /// <summary>
        ///  Delete a contact&#39;s contact person.
        /// </summary>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="contactId"></param>
        /// <param name="contactPersonId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteContactContactPersonApiResponse"/>&gt;</returns>
        public async Task<IDeleteContactContactPersonApiResponse?> DeleteContactContactPersonOrDefaultAsync(string companySlug, long contactId, long contactPersonId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DeleteContactContactPersonAsync(companySlug, contactId, contactPersonId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  Delete a contact&#39;s contact person.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="contactId"></param>
        /// <param name="contactPersonId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteContactContactPersonApiResponse"/>&gt;</returns>
        public async Task<IDeleteContactContactPersonApiResponse> DeleteContactContactPersonAsync(string companySlug, long contactId, long contactPersonId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateDeleteContactContactPerson(companySlug);

                FormatDeleteContactContactPerson(ref companySlug, ref contactId, ref contactPersonId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/companies/{companySlug}/contacts/{contactId}/contactPerson/{contactPersonId}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BcompanySlug%7D", Uri.EscapeDataString(companySlug.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BcontactId%7D", Uri.EscapeDataString(contactId.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BcontactPersonId%7D", Uri.EscapeDataString(contactPersonId.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    httpRequestMessageLocalVar.Method = HttpMethod.Delete;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<DeleteContactContactPersonApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DeleteContactContactPersonApiResponse>();

                        DeleteContactContactPersonApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/companies/{companySlug}/contacts/{contactId}/contactPerson/{contactPersonId}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterDeleteContactContactPersonDefaultImplementation(apiResponseLocalVar, companySlug, contactId, contactPersonId);

                        Events.ExecuteOnDeleteContactContactPerson(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDeleteContactContactPersonDefaultImplementation(e, "/companies/{companySlug}/contacts/{contactId}/contactPerson/{contactPersonId}", uriBuilderLocalVar.Path, companySlug, contactId, contactPersonId);
                Events.ExecuteOnErrorDeleteContactContactPerson(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DeleteContactContactPersonApiResponse"/>
        /// </summary>
        public partial class DeleteContactContactPersonApiResponse : Fiken.Client.ApiResponse, IDeleteContactContactPersonApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DeleteContactContactPersonApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DeleteContactContactPersonApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeleteContactContactPersonApiResponse(ILogger<DeleteContactContactPersonApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 204 NoContent
            /// </summary>
            /// <returns></returns>
            public bool IsNoContent => 204 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetContact(ref string companySlug, ref long contactId);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="companySlug"></param>
        /// <returns></returns>
        private void ValidateGetContact(string companySlug)
        {
            if (companySlug == null)
                throw new ArgumentNullException(nameof(companySlug));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="contactId"></param>
        private void AfterGetContactDefaultImplementation(IGetContactApiResponse apiResponseLocalVar, string companySlug, long contactId)
        {
            bool suppressDefaultLog = false;
            AfterGetContact(ref suppressDefaultLog, apiResponseLocalVar, companySlug, contactId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="contactId"></param>
        partial void AfterGetContact(ref bool suppressDefaultLog, IGetContactApiResponse apiResponseLocalVar, string companySlug, long contactId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="contactId"></param>
        private void OnErrorGetContactDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string companySlug, long contactId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetContact(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, companySlug, contactId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="contactId"></param>
        partial void OnErrorGetContact(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string companySlug, long contactId);

        /// <summary>
        ///  Retrieves specified contact. ContactId is returned with a GET contacts call as the first returned field. ContactId is returned in the Location response header for POST contact. 
        /// </summary>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="contactId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetContactApiResponse"/>&gt;</returns>
        public async Task<IGetContactApiResponse?> GetContactOrDefaultAsync(string companySlug, long contactId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetContactAsync(companySlug, contactId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  Retrieves specified contact. ContactId is returned with a GET contacts call as the first returned field. ContactId is returned in the Location response header for POST contact. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="contactId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetContactApiResponse"/>&gt;</returns>
        public async Task<IGetContactApiResponse> GetContactAsync(string companySlug, long contactId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetContact(companySlug);

                FormatGetContact(ref companySlug, ref contactId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/companies/{companySlug}/contacts/{contactId}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BcompanySlug%7D", Uri.EscapeDataString(companySlug.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BcontactId%7D", Uri.EscapeDataString(contactId.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetContactApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetContactApiResponse>();

                        GetContactApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/companies/{companySlug}/contacts/{contactId}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetContactDefaultImplementation(apiResponseLocalVar, companySlug, contactId);

                        Events.ExecuteOnGetContact(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetContactDefaultImplementation(e, "/companies/{companySlug}/contacts/{contactId}", uriBuilderLocalVar.Path, companySlug, contactId);
                Events.ExecuteOnErrorGetContact(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetContactApiResponse"/>
        /// </summary>
        public partial class GetContactApiResponse : Fiken.Client.ApiResponse, IGetContactApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetContactApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetContactApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetContactApiResponse(ILogger<GetContactApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Fiken.Model.Contact? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Fiken.Model.Contact>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Fiken.Model.Contact? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetContactContactPerson(ref string companySlug, ref long contactId);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="companySlug"></param>
        /// <returns></returns>
        private void ValidateGetContactContactPerson(string companySlug)
        {
            if (companySlug == null)
                throw new ArgumentNullException(nameof(companySlug));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="contactId"></param>
        private void AfterGetContactContactPersonDefaultImplementation(IGetContactContactPersonApiResponse apiResponseLocalVar, string companySlug, long contactId)
        {
            bool suppressDefaultLog = false;
            AfterGetContactContactPerson(ref suppressDefaultLog, apiResponseLocalVar, companySlug, contactId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="contactId"></param>
        partial void AfterGetContactContactPerson(ref bool suppressDefaultLog, IGetContactContactPersonApiResponse apiResponseLocalVar, string companySlug, long contactId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="contactId"></param>
        private void OnErrorGetContactContactPersonDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string companySlug, long contactId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetContactContactPerson(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, companySlug, contactId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="contactId"></param>
        partial void OnErrorGetContactContactPerson(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string companySlug, long contactId);

        /// <summary>
        ///  Retrieves contact person(s) for a specified contact. 
        /// </summary>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="contactId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetContactContactPersonApiResponse"/>&gt;</returns>
        public async Task<IGetContactContactPersonApiResponse?> GetContactContactPersonOrDefaultAsync(string companySlug, long contactId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetContactContactPersonAsync(companySlug, contactId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  Retrieves contact person(s) for a specified contact. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="contactId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetContactContactPersonApiResponse"/>&gt;</returns>
        public async Task<IGetContactContactPersonApiResponse> GetContactContactPersonAsync(string companySlug, long contactId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetContactContactPerson(companySlug);

                FormatGetContactContactPerson(ref companySlug, ref contactId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/companies/{companySlug}/contacts/{contactId}/contactPerson";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BcompanySlug%7D", Uri.EscapeDataString(companySlug.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BcontactId%7D", Uri.EscapeDataString(contactId.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetContactContactPersonApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetContactContactPersonApiResponse>();

                        GetContactContactPersonApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/companies/{companySlug}/contacts/{contactId}/contactPerson", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetContactContactPersonDefaultImplementation(apiResponseLocalVar, companySlug, contactId);

                        Events.ExecuteOnGetContactContactPerson(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetContactContactPersonDefaultImplementation(e, "/companies/{companySlug}/contacts/{contactId}/contactPerson", uriBuilderLocalVar.Path, companySlug, contactId);
                Events.ExecuteOnErrorGetContactContactPerson(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetContactContactPersonApiResponse"/>
        /// </summary>
        public partial class GetContactContactPersonApiResponse : Fiken.Client.ApiResponse, IGetContactContactPersonApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetContactContactPersonApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetContactContactPersonApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetContactContactPersonApiResponse(ILogger<GetContactContactPersonApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<ContactPerson>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<ContactPerson>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<ContactPerson>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetContactPerson(ref string companySlug, ref long contactId, ref long contactPersonId);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="companySlug"></param>
        /// <returns></returns>
        private void ValidateGetContactPerson(string companySlug)
        {
            if (companySlug == null)
                throw new ArgumentNullException(nameof(companySlug));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="contactId"></param>
        /// <param name="contactPersonId"></param>
        private void AfterGetContactPersonDefaultImplementation(IGetContactPersonApiResponse apiResponseLocalVar, string companySlug, long contactId, long contactPersonId)
        {
            bool suppressDefaultLog = false;
            AfterGetContactPerson(ref suppressDefaultLog, apiResponseLocalVar, companySlug, contactId, contactPersonId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="contactId"></param>
        /// <param name="contactPersonId"></param>
        partial void AfterGetContactPerson(ref bool suppressDefaultLog, IGetContactPersonApiResponse apiResponseLocalVar, string companySlug, long contactId, long contactPersonId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="contactId"></param>
        /// <param name="contactPersonId"></param>
        private void OnErrorGetContactPersonDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string companySlug, long contactId, long contactPersonId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetContactPerson(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, companySlug, contactId, contactPersonId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="contactId"></param>
        /// <param name="contactPersonId"></param>
        partial void OnErrorGetContactPerson(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string companySlug, long contactId, long contactPersonId);

        /// <summary>
        ///  Retrieves specified contact person 
        /// </summary>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="contactId"></param>
        /// <param name="contactPersonId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetContactPersonApiResponse"/>&gt;</returns>
        public async Task<IGetContactPersonApiResponse?> GetContactPersonOrDefaultAsync(string companySlug, long contactId, long contactPersonId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetContactPersonAsync(companySlug, contactId, contactPersonId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  Retrieves specified contact person 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="contactId"></param>
        /// <param name="contactPersonId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetContactPersonApiResponse"/>&gt;</returns>
        public async Task<IGetContactPersonApiResponse> GetContactPersonAsync(string companySlug, long contactId, long contactPersonId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetContactPerson(companySlug);

                FormatGetContactPerson(ref companySlug, ref contactId, ref contactPersonId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/companies/{companySlug}/contacts/{contactId}/contactPerson/{contactPersonId}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BcompanySlug%7D", Uri.EscapeDataString(companySlug.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BcontactId%7D", Uri.EscapeDataString(contactId.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BcontactPersonId%7D", Uri.EscapeDataString(contactPersonId.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetContactPersonApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetContactPersonApiResponse>();

                        GetContactPersonApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/companies/{companySlug}/contacts/{contactId}/contactPerson/{contactPersonId}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetContactPersonDefaultImplementation(apiResponseLocalVar, companySlug, contactId, contactPersonId);

                        Events.ExecuteOnGetContactPerson(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetContactPersonDefaultImplementation(e, "/companies/{companySlug}/contacts/{contactId}/contactPerson/{contactPersonId}", uriBuilderLocalVar.Path, companySlug, contactId, contactPersonId);
                Events.ExecuteOnErrorGetContactPerson(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetContactPersonApiResponse"/>
        /// </summary>
        public partial class GetContactPersonApiResponse : Fiken.Client.ApiResponse, IGetContactPersonApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetContactPersonApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetContactPersonApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetContactPersonApiResponse(ILogger<GetContactPersonApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Fiken.Model.ContactPerson? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Fiken.Model.ContactPerson>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Fiken.Model.ContactPerson? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetContacts(ref string companySlug, ref Option<int> page, ref Option<int> pageSize, ref Option<DateOnly> lastModified, ref Option<DateOnly> lastModifiedLe, ref Option<DateOnly> lastModifiedLt, ref Option<DateOnly> lastModifiedGe, ref Option<DateOnly> lastModifiedGt, ref Option<DateOnly> createdDate, ref Option<DateOnly> createdDateLe, ref Option<DateOnly> createdDateLt, ref Option<DateOnly> createdDateGe, ref Option<DateOnly> createdDateGt, ref Option<int> supplierNumber, ref Option<int> customerNumber, ref Option<int> memberNumber, ref Option<string> memberNumberString, ref Option<string> name, ref Option<string> organizationNumber, ref Option<string> email, ref Option<bool> customer, ref Option<bool> supplier, ref Option<bool> inactive, ref Option<string> group, ref Option<string> sortBy, ref Option<string> phoneNumber);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="companySlug"></param>
        /// <param name="memberNumberString"></param>
        /// <param name="name"></param>
        /// <param name="organizationNumber"></param>
        /// <param name="email"></param>
        /// <param name="group"></param>
        /// <param name="sortBy"></param>
        /// <param name="phoneNumber"></param>
        /// <returns></returns>
        private void ValidateGetContacts(string companySlug, Option<string> memberNumberString, Option<string> name, Option<string> organizationNumber, Option<string> email, Option<string> group, Option<string> sortBy, Option<string> phoneNumber)
        {
            if (companySlug == null)
                throw new ArgumentNullException(nameof(companySlug));

            if (memberNumberString.IsSet && memberNumberString.Value == null)
                throw new ArgumentNullException(nameof(memberNumberString));

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name));

            if (organizationNumber.IsSet && organizationNumber.Value == null)
                throw new ArgumentNullException(nameof(organizationNumber));

            if (email.IsSet && email.Value == null)
                throw new ArgumentNullException(nameof(email));

            if (group.IsSet && group.Value == null)
                throw new ArgumentNullException(nameof(group));

            if (sortBy.IsSet && sortBy.Value == null)
                throw new ArgumentNullException(nameof(sortBy));

            if (phoneNumber.IsSet && phoneNumber.Value == null)
                throw new ArgumentNullException(nameof(phoneNumber));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="lastModified"></param>
        /// <param name="lastModifiedLe"></param>
        /// <param name="lastModifiedLt"></param>
        /// <param name="lastModifiedGe"></param>
        /// <param name="lastModifiedGt"></param>
        /// <param name="createdDate"></param>
        /// <param name="createdDateLe"></param>
        /// <param name="createdDateLt"></param>
        /// <param name="createdDateGe"></param>
        /// <param name="createdDateGt"></param>
        /// <param name="supplierNumber"></param>
        /// <param name="customerNumber"></param>
        /// <param name="memberNumber"></param>
        /// <param name="memberNumberString"></param>
        /// <param name="name"></param>
        /// <param name="organizationNumber"></param>
        /// <param name="email"></param>
        /// <param name="customer"></param>
        /// <param name="supplier"></param>
        /// <param name="inactive"></param>
        /// <param name="group"></param>
        /// <param name="sortBy"></param>
        /// <param name="phoneNumber"></param>
        private void AfterGetContactsDefaultImplementation(IGetContactsApiResponse apiResponseLocalVar, string companySlug, Option<int> page, Option<int> pageSize, Option<DateOnly> lastModified, Option<DateOnly> lastModifiedLe, Option<DateOnly> lastModifiedLt, Option<DateOnly> lastModifiedGe, Option<DateOnly> lastModifiedGt, Option<DateOnly> createdDate, Option<DateOnly> createdDateLe, Option<DateOnly> createdDateLt, Option<DateOnly> createdDateGe, Option<DateOnly> createdDateGt, Option<int> supplierNumber, Option<int> customerNumber, Option<int> memberNumber, Option<string> memberNumberString, Option<string> name, Option<string> organizationNumber, Option<string> email, Option<bool> customer, Option<bool> supplier, Option<bool> inactive, Option<string> group, Option<string> sortBy, Option<string> phoneNumber)
        {
            bool suppressDefaultLog = false;
            AfterGetContacts(ref suppressDefaultLog, apiResponseLocalVar, companySlug, page, pageSize, lastModified, lastModifiedLe, lastModifiedLt, lastModifiedGe, lastModifiedGt, createdDate, createdDateLe, createdDateLt, createdDateGe, createdDateGt, supplierNumber, customerNumber, memberNumber, memberNumberString, name, organizationNumber, email, customer, supplier, inactive, group, sortBy, phoneNumber);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="lastModified"></param>
        /// <param name="lastModifiedLe"></param>
        /// <param name="lastModifiedLt"></param>
        /// <param name="lastModifiedGe"></param>
        /// <param name="lastModifiedGt"></param>
        /// <param name="createdDate"></param>
        /// <param name="createdDateLe"></param>
        /// <param name="createdDateLt"></param>
        /// <param name="createdDateGe"></param>
        /// <param name="createdDateGt"></param>
        /// <param name="supplierNumber"></param>
        /// <param name="customerNumber"></param>
        /// <param name="memberNumber"></param>
        /// <param name="memberNumberString"></param>
        /// <param name="name"></param>
        /// <param name="organizationNumber"></param>
        /// <param name="email"></param>
        /// <param name="customer"></param>
        /// <param name="supplier"></param>
        /// <param name="inactive"></param>
        /// <param name="group"></param>
        /// <param name="sortBy"></param>
        /// <param name="phoneNumber"></param>
        partial void AfterGetContacts(ref bool suppressDefaultLog, IGetContactsApiResponse apiResponseLocalVar, string companySlug, Option<int> page, Option<int> pageSize, Option<DateOnly> lastModified, Option<DateOnly> lastModifiedLe, Option<DateOnly> lastModifiedLt, Option<DateOnly> lastModifiedGe, Option<DateOnly> lastModifiedGt, Option<DateOnly> createdDate, Option<DateOnly> createdDateLe, Option<DateOnly> createdDateLt, Option<DateOnly> createdDateGe, Option<DateOnly> createdDateGt, Option<int> supplierNumber, Option<int> customerNumber, Option<int> memberNumber, Option<string> memberNumberString, Option<string> name, Option<string> organizationNumber, Option<string> email, Option<bool> customer, Option<bool> supplier, Option<bool> inactive, Option<string> group, Option<string> sortBy, Option<string> phoneNumber);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="lastModified"></param>
        /// <param name="lastModifiedLe"></param>
        /// <param name="lastModifiedLt"></param>
        /// <param name="lastModifiedGe"></param>
        /// <param name="lastModifiedGt"></param>
        /// <param name="createdDate"></param>
        /// <param name="createdDateLe"></param>
        /// <param name="createdDateLt"></param>
        /// <param name="createdDateGe"></param>
        /// <param name="createdDateGt"></param>
        /// <param name="supplierNumber"></param>
        /// <param name="customerNumber"></param>
        /// <param name="memberNumber"></param>
        /// <param name="memberNumberString"></param>
        /// <param name="name"></param>
        /// <param name="organizationNumber"></param>
        /// <param name="email"></param>
        /// <param name="customer"></param>
        /// <param name="supplier"></param>
        /// <param name="inactive"></param>
        /// <param name="group"></param>
        /// <param name="sortBy"></param>
        /// <param name="phoneNumber"></param>
        private void OnErrorGetContactsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string companySlug, Option<int> page, Option<int> pageSize, Option<DateOnly> lastModified, Option<DateOnly> lastModifiedLe, Option<DateOnly> lastModifiedLt, Option<DateOnly> lastModifiedGe, Option<DateOnly> lastModifiedGt, Option<DateOnly> createdDate, Option<DateOnly> createdDateLe, Option<DateOnly> createdDateLt, Option<DateOnly> createdDateGe, Option<DateOnly> createdDateGt, Option<int> supplierNumber, Option<int> customerNumber, Option<int> memberNumber, Option<string> memberNumberString, Option<string> name, Option<string> organizationNumber, Option<string> email, Option<bool> customer, Option<bool> supplier, Option<bool> inactive, Option<string> group, Option<string> sortBy, Option<string> phoneNumber)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetContacts(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, companySlug, page, pageSize, lastModified, lastModifiedLe, lastModifiedLt, lastModifiedGe, lastModifiedGt, createdDate, createdDateLe, createdDateLt, createdDateGe, createdDateGt, supplierNumber, customerNumber, memberNumber, memberNumberString, name, organizationNumber, email, customer, supplier, inactive, group, sortBy, phoneNumber);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="lastModified"></param>
        /// <param name="lastModifiedLe"></param>
        /// <param name="lastModifiedLt"></param>
        /// <param name="lastModifiedGe"></param>
        /// <param name="lastModifiedGt"></param>
        /// <param name="createdDate"></param>
        /// <param name="createdDateLe"></param>
        /// <param name="createdDateLt"></param>
        /// <param name="createdDateGe"></param>
        /// <param name="createdDateGt"></param>
        /// <param name="supplierNumber"></param>
        /// <param name="customerNumber"></param>
        /// <param name="memberNumber"></param>
        /// <param name="memberNumberString"></param>
        /// <param name="name"></param>
        /// <param name="organizationNumber"></param>
        /// <param name="email"></param>
        /// <param name="customer"></param>
        /// <param name="supplier"></param>
        /// <param name="inactive"></param>
        /// <param name="group"></param>
        /// <param name="sortBy"></param>
        /// <param name="phoneNumber"></param>
        partial void OnErrorGetContacts(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string companySlug, Option<int> page, Option<int> pageSize, Option<DateOnly> lastModified, Option<DateOnly> lastModifiedLe, Option<DateOnly> lastModifiedLt, Option<DateOnly> lastModifiedGe, Option<DateOnly> lastModifiedGt, Option<DateOnly> createdDate, Option<DateOnly> createdDateLe, Option<DateOnly> createdDateLt, Option<DateOnly> createdDateGe, Option<DateOnly> createdDateGt, Option<int> supplierNumber, Option<int> customerNumber, Option<int> memberNumber, Option<string> memberNumberString, Option<string> name, Option<string> organizationNumber, Option<string> email, Option<bool> customer, Option<bool> supplier, Option<bool> inactive, Option<string> group, Option<string> sortBy, Option<string> phoneNumber);

        /// <summary>
        ///  Retrieves all contacts for the specified company.
        /// </summary>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="page">Returns the number of the page to return. Valid page values are integers from 0 to the total number of pages. Default value is 0.  (optional, default to 0)</param>
        /// <param name="pageSize">Defines the number of entries to return on each page. Maximum number of results that can be returned at one time are 100. Default value is 25.  (optional, default to 25)</param>
        /// <param name="lastModified">Filter based on date of last modification. Returns results that were last modified on the date provided as a parameter value. Dates are represented as strings formatted as YYYY-MM-DD. Example: January 1st, 1970: \&quot;1970-01-01\&quot;  (optional)</param>
        /// <param name="lastModifiedLe">Returns results that have been last modified before or on the date provided as a parameter value. Dates are represented as strings formatted as YYYY-MM-DD. Example: January 1st, 1970: \&quot;1970-01-01\&quot;  (optional)</param>
        /// <param name="lastModifiedLt">Returns results that have been last modified strictly before the date provided as a parameter value. Dates are represented as strings formatted as YYYY-MM-DD. Example: January 1st, 1970: \&quot;1970-01-01\&quot;  (optional)</param>
        /// <param name="lastModifiedGe">Returns results that have been last modified after or on the date provided as a parameter value. Dates are represented as strings formatted as YYYY-MM-DD. Example: January 1st, 1970: \&quot;1970-01-01\&quot;  (optional)</param>
        /// <param name="lastModifiedGt">Returns results that have been last modified strictly after the date provided as a parameter value. Dates are represented as strings formatted as YYYY-MM-DD. Example: January 1st, 1970: \&quot;1970-01-01\&quot;  (optional)</param>
        /// <param name="createdDate">Dates are represented as strings formatted as YYYY-MM-DD. Example: January 1st, 1970: \&quot;1970-01-01\&quot;  (optional)</param>
        /// <param name="createdDateLe">Returns results that were created before or on the date provided as a parameter value. Dates are represented as strings formatted as YYYY-MM-DD. Example: January 1st, 1970: \&quot;1970-01-01\&quot;  (optional)</param>
        /// <param name="createdDateLt">Returns results that were created strictly before the date provided as a parameter value. Dates are represented as strings formatted as YYYY-MM-DD. Example: January 1st, 1970: \&quot;1970-01-01\&quot;  (optional)</param>
        /// <param name="createdDateGe">Returns results that were created after or on the date provided as a parameter value. Dates are represented as strings formatted as YYYY-MM-DD. Example: January 1st, 1970: \&quot;1970-01-01\&quot;  (optional)</param>
        /// <param name="createdDateGt">Returns results that were created strictly after the date provided as a parameter value. Dates are represented as strings formatted as YYYY-MM-DD. Example: January 1st, 1970: \&quot;1970-01-01\&quot;  (optional)</param>
        /// <param name="supplierNumber">Find all results with the supplier number equal to the specified parameter. (optional)</param>
        /// <param name="customerNumber">Find all results with the customer number equal to the specified parameter. (optional)</param>
        /// <param name="memberNumber">Find all results with the member number equal to the specified parameter. (optional)</param>
        /// <param name="memberNumberString">Find all results with the member number equal to the specified parameter. (optional)</param>
        /// <param name="name">Find all results with the name equal to the specified parameter. (optional)</param>
        /// <param name="organizationNumber">Find all results with the organization number equal to the specified parameter. (optional)</param>
        /// <param name="email">Find all results with the email equal to the specified parameter. (optional)</param>
        /// <param name="customer">Returns all contacts that are customers. If filter is set for both supplier and customer &#x3D; true, only contacts that are both supplier and customer will be returned. (optional)</param>
        /// <param name="supplier">Returns all contacts that are suppliers. If filter is set for both supplier and customer &#x3D; true, only contacts that are both supplier and customer will be returned. (optional)</param>
        /// <param name="inactive">Return all active contacts (false) or all inactive contacts (true). (optional)</param>
        /// <param name="group">Return contacts in contact group, exact match only. Groups are only used for customers, not suppliers. (optional)</param>
        /// <param name="sortBy"> (optional, default to createdDate asc)</param>
        /// <param name="phoneNumber">Find all results with the phone number equal to the specified parameter. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetContactsApiResponse"/>&gt;</returns>
        public async Task<IGetContactsApiResponse?> GetContactsOrDefaultAsync(string companySlug, Option<int> page = default, Option<int> pageSize = default, Option<DateOnly> lastModified = default, Option<DateOnly> lastModifiedLe = default, Option<DateOnly> lastModifiedLt = default, Option<DateOnly> lastModifiedGe = default, Option<DateOnly> lastModifiedGt = default, Option<DateOnly> createdDate = default, Option<DateOnly> createdDateLe = default, Option<DateOnly> createdDateLt = default, Option<DateOnly> createdDateGe = default, Option<DateOnly> createdDateGt = default, Option<int> supplierNumber = default, Option<int> customerNumber = default, Option<int> memberNumber = default, Option<string> memberNumberString = default, Option<string> name = default, Option<string> organizationNumber = default, Option<string> email = default, Option<bool> customer = default, Option<bool> supplier = default, Option<bool> inactive = default, Option<string> group = default, Option<string> sortBy = default, Option<string> phoneNumber = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetContactsAsync(companySlug, page, pageSize, lastModified, lastModifiedLe, lastModifiedLt, lastModifiedGe, lastModifiedGt, createdDate, createdDateLe, createdDateLt, createdDateGe, createdDateGt, supplierNumber, customerNumber, memberNumber, memberNumberString, name, organizationNumber, email, customer, supplier, inactive, group, sortBy, phoneNumber, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  Retrieves all contacts for the specified company.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="page">Returns the number of the page to return. Valid page values are integers from 0 to the total number of pages. Default value is 0.  (optional, default to 0)</param>
        /// <param name="pageSize">Defines the number of entries to return on each page. Maximum number of results that can be returned at one time are 100. Default value is 25.  (optional, default to 25)</param>
        /// <param name="lastModified">Filter based on date of last modification. Returns results that were last modified on the date provided as a parameter value. Dates are represented as strings formatted as YYYY-MM-DD. Example: January 1st, 1970: \&quot;1970-01-01\&quot;  (optional)</param>
        /// <param name="lastModifiedLe">Returns results that have been last modified before or on the date provided as a parameter value. Dates are represented as strings formatted as YYYY-MM-DD. Example: January 1st, 1970: \&quot;1970-01-01\&quot;  (optional)</param>
        /// <param name="lastModifiedLt">Returns results that have been last modified strictly before the date provided as a parameter value. Dates are represented as strings formatted as YYYY-MM-DD. Example: January 1st, 1970: \&quot;1970-01-01\&quot;  (optional)</param>
        /// <param name="lastModifiedGe">Returns results that have been last modified after or on the date provided as a parameter value. Dates are represented as strings formatted as YYYY-MM-DD. Example: January 1st, 1970: \&quot;1970-01-01\&quot;  (optional)</param>
        /// <param name="lastModifiedGt">Returns results that have been last modified strictly after the date provided as a parameter value. Dates are represented as strings formatted as YYYY-MM-DD. Example: January 1st, 1970: \&quot;1970-01-01\&quot;  (optional)</param>
        /// <param name="createdDate">Dates are represented as strings formatted as YYYY-MM-DD. Example: January 1st, 1970: \&quot;1970-01-01\&quot;  (optional)</param>
        /// <param name="createdDateLe">Returns results that were created before or on the date provided as a parameter value. Dates are represented as strings formatted as YYYY-MM-DD. Example: January 1st, 1970: \&quot;1970-01-01\&quot;  (optional)</param>
        /// <param name="createdDateLt">Returns results that were created strictly before the date provided as a parameter value. Dates are represented as strings formatted as YYYY-MM-DD. Example: January 1st, 1970: \&quot;1970-01-01\&quot;  (optional)</param>
        /// <param name="createdDateGe">Returns results that were created after or on the date provided as a parameter value. Dates are represented as strings formatted as YYYY-MM-DD. Example: January 1st, 1970: \&quot;1970-01-01\&quot;  (optional)</param>
        /// <param name="createdDateGt">Returns results that were created strictly after the date provided as a parameter value. Dates are represented as strings formatted as YYYY-MM-DD. Example: January 1st, 1970: \&quot;1970-01-01\&quot;  (optional)</param>
        /// <param name="supplierNumber">Find all results with the supplier number equal to the specified parameter. (optional)</param>
        /// <param name="customerNumber">Find all results with the customer number equal to the specified parameter. (optional)</param>
        /// <param name="memberNumber">Find all results with the member number equal to the specified parameter. (optional)</param>
        /// <param name="memberNumberString">Find all results with the member number equal to the specified parameter. (optional)</param>
        /// <param name="name">Find all results with the name equal to the specified parameter. (optional)</param>
        /// <param name="organizationNumber">Find all results with the organization number equal to the specified parameter. (optional)</param>
        /// <param name="email">Find all results with the email equal to the specified parameter. (optional)</param>
        /// <param name="customer">Returns all contacts that are customers. If filter is set for both supplier and customer &#x3D; true, only contacts that are both supplier and customer will be returned. (optional)</param>
        /// <param name="supplier">Returns all contacts that are suppliers. If filter is set for both supplier and customer &#x3D; true, only contacts that are both supplier and customer will be returned. (optional)</param>
        /// <param name="inactive">Return all active contacts (false) or all inactive contacts (true). (optional)</param>
        /// <param name="group">Return contacts in contact group, exact match only. Groups are only used for customers, not suppliers. (optional)</param>
        /// <param name="sortBy"> (optional, default to createdDate asc)</param>
        /// <param name="phoneNumber">Find all results with the phone number equal to the specified parameter. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetContactsApiResponse"/>&gt;</returns>
        public async Task<IGetContactsApiResponse> GetContactsAsync(string companySlug, Option<int> page = default, Option<int> pageSize = default, Option<DateOnly> lastModified = default, Option<DateOnly> lastModifiedLe = default, Option<DateOnly> lastModifiedLt = default, Option<DateOnly> lastModifiedGe = default, Option<DateOnly> lastModifiedGt = default, Option<DateOnly> createdDate = default, Option<DateOnly> createdDateLe = default, Option<DateOnly> createdDateLt = default, Option<DateOnly> createdDateGe = default, Option<DateOnly> createdDateGt = default, Option<int> supplierNumber = default, Option<int> customerNumber = default, Option<int> memberNumber = default, Option<string> memberNumberString = default, Option<string> name = default, Option<string> organizationNumber = default, Option<string> email = default, Option<bool> customer = default, Option<bool> supplier = default, Option<bool> inactive = default, Option<string> group = default, Option<string> sortBy = default, Option<string> phoneNumber = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetContacts(companySlug, memberNumberString, name, organizationNumber, email, group, sortBy, phoneNumber);

                FormatGetContacts(ref companySlug, ref page, ref pageSize, ref lastModified, ref lastModifiedLe, ref lastModifiedLt, ref lastModifiedGe, ref lastModifiedGt, ref createdDate, ref createdDateLe, ref createdDateLt, ref createdDateGe, ref createdDateGt, ref supplierNumber, ref customerNumber, ref memberNumber, ref memberNumberString, ref name, ref organizationNumber, ref email, ref customer, ref supplier, ref inactive, ref group, ref sortBy, ref phoneNumber);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/companies/{companySlug}/contacts";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BcompanySlug%7D", Uri.EscapeDataString(companySlug.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (page.IsSet)
                        parseQueryStringLocalVar["page"] = ClientUtils.ParameterToString(page.Value);

                    if (pageSize.IsSet)
                        parseQueryStringLocalVar["pageSize"] = ClientUtils.ParameterToString(pageSize.Value);

                    if (lastModified.IsSet)
                        parseQueryStringLocalVar["lastModified"] = ClientUtils.ParameterToString(lastModified.Value);

                    if (lastModifiedLe.IsSet)
                        parseQueryStringLocalVar["lastModifiedLe"] = ClientUtils.ParameterToString(lastModifiedLe.Value);

                    if (lastModifiedLt.IsSet)
                        parseQueryStringLocalVar["lastModifiedLt"] = ClientUtils.ParameterToString(lastModifiedLt.Value);

                    if (lastModifiedGe.IsSet)
                        parseQueryStringLocalVar["lastModifiedGe"] = ClientUtils.ParameterToString(lastModifiedGe.Value);

                    if (lastModifiedGt.IsSet)
                        parseQueryStringLocalVar["lastModifiedGt"] = ClientUtils.ParameterToString(lastModifiedGt.Value);

                    if (createdDate.IsSet)
                        parseQueryStringLocalVar["createdDate"] = ClientUtils.ParameterToString(createdDate.Value);

                    if (createdDateLe.IsSet)
                        parseQueryStringLocalVar["createdDateLe"] = ClientUtils.ParameterToString(createdDateLe.Value);

                    if (createdDateLt.IsSet)
                        parseQueryStringLocalVar["createdDateLt"] = ClientUtils.ParameterToString(createdDateLt.Value);

                    if (createdDateGe.IsSet)
                        parseQueryStringLocalVar["createdDateGe"] = ClientUtils.ParameterToString(createdDateGe.Value);

                    if (createdDateGt.IsSet)
                        parseQueryStringLocalVar["createdDateGt"] = ClientUtils.ParameterToString(createdDateGt.Value);

                    if (supplierNumber.IsSet)
                        parseQueryStringLocalVar["supplierNumber"] = ClientUtils.ParameterToString(supplierNumber.Value);

                    if (customerNumber.IsSet)
                        parseQueryStringLocalVar["customerNumber"] = ClientUtils.ParameterToString(customerNumber.Value);

                    if (memberNumber.IsSet)
                        parseQueryStringLocalVar["memberNumber"] = ClientUtils.ParameterToString(memberNumber.Value);

                    if (memberNumberString.IsSet)
                        parseQueryStringLocalVar["memberNumberString"] = ClientUtils.ParameterToString(memberNumberString.Value);

                    if (name.IsSet)
                        parseQueryStringLocalVar["name"] = ClientUtils.ParameterToString(name.Value);

                    if (organizationNumber.IsSet)
                        parseQueryStringLocalVar["organizationNumber"] = ClientUtils.ParameterToString(organizationNumber.Value);

                    if (email.IsSet)
                        parseQueryStringLocalVar["email"] = ClientUtils.ParameterToString(email.Value);

                    if (customer.IsSet)
                        parseQueryStringLocalVar["customer"] = ClientUtils.ParameterToString(customer.Value);

                    if (supplier.IsSet)
                        parseQueryStringLocalVar["supplier"] = ClientUtils.ParameterToString(supplier.Value);

                    if (inactive.IsSet)
                        parseQueryStringLocalVar["inactive"] = ClientUtils.ParameterToString(inactive.Value);

                    if (group.IsSet)
                        parseQueryStringLocalVar["group"] = ClientUtils.ParameterToString(group.Value);

                    if (sortBy.IsSet)
                        parseQueryStringLocalVar["sortBy"] = ClientUtils.ParameterToString(sortBy.Value);

                    if (phoneNumber.IsSet)
                        parseQueryStringLocalVar["phoneNumber"] = ClientUtils.ParameterToString(phoneNumber.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetContactsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetContactsApiResponse>();

                        GetContactsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/companies/{companySlug}/contacts", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetContactsDefaultImplementation(apiResponseLocalVar, companySlug, page, pageSize, lastModified, lastModifiedLe, lastModifiedLt, lastModifiedGe, lastModifiedGt, createdDate, createdDateLe, createdDateLt, createdDateGe, createdDateGt, supplierNumber, customerNumber, memberNumber, memberNumberString, name, organizationNumber, email, customer, supplier, inactive, group, sortBy, phoneNumber);

                        Events.ExecuteOnGetContacts(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetContactsDefaultImplementation(e, "/companies/{companySlug}/contacts", uriBuilderLocalVar.Path, companySlug, page, pageSize, lastModified, lastModifiedLe, lastModifiedLt, lastModifiedGe, lastModifiedGt, createdDate, createdDateLe, createdDateLt, createdDateGe, createdDateGt, supplierNumber, customerNumber, memberNumber, memberNumberString, name, organizationNumber, email, customer, supplier, inactive, group, sortBy, phoneNumber);
                Events.ExecuteOnErrorGetContacts(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetContactsApiResponse"/>
        /// </summary>
        public partial class GetContactsApiResponse : Fiken.Client.ApiResponse, IGetContactsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetContactsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetContactsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetContactsApiResponse(ILogger<GetContactsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<Contact>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<Contact>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<Contact>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatUpdateContact(ref string companySlug, ref long contactId, Contact contact);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="companySlug"></param>
        /// <param name="contact"></param>
        /// <returns></returns>
        private void ValidateUpdateContact(string companySlug, Contact contact)
        {
            if (companySlug == null)
                throw new ArgumentNullException(nameof(companySlug));

            if (contact == null)
                throw new ArgumentNullException(nameof(contact));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="contactId"></param>
        /// <param name="contact"></param>
        private void AfterUpdateContactDefaultImplementation(IUpdateContactApiResponse apiResponseLocalVar, string companySlug, long contactId, Contact contact)
        {
            bool suppressDefaultLog = false;
            AfterUpdateContact(ref suppressDefaultLog, apiResponseLocalVar, companySlug, contactId, contact);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="contactId"></param>
        /// <param name="contact"></param>
        partial void AfterUpdateContact(ref bool suppressDefaultLog, IUpdateContactApiResponse apiResponseLocalVar, string companySlug, long contactId, Contact contact);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="contactId"></param>
        /// <param name="contact"></param>
        private void OnErrorUpdateContactDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string companySlug, long contactId, Contact contact)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorUpdateContact(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, companySlug, contactId, contact);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="contactId"></param>
        /// <param name="contact"></param>
        partial void OnErrorUpdateContact(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string companySlug, long contactId, Contact contact);

        /// <summary>
        ///  Updates an existing contact.
        /// </summary>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="contactId"></param>
        /// <param name="contact"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateContactApiResponse"/>&gt;</returns>
        public async Task<IUpdateContactApiResponse?> UpdateContactOrDefaultAsync(string companySlug, long contactId, Contact contact, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await UpdateContactAsync(companySlug, contactId, contact, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  Updates an existing contact.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="contactId"></param>
        /// <param name="contact"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateContactApiResponse"/>&gt;</returns>
        public async Task<IUpdateContactApiResponse> UpdateContactAsync(string companySlug, long contactId, Contact contact, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateUpdateContact(companySlug, contact);

                FormatUpdateContact(ref companySlug, ref contactId, contact);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/companies/{companySlug}/contacts/{contactId}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BcompanySlug%7D", Uri.EscapeDataString(companySlug.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BcontactId%7D", Uri.EscapeDataString(contactId.ToString()));

                    httpRequestMessageLocalVar.Content = (contact as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(contact, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    httpRequestMessageLocalVar.Method = HttpMethod.Put;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<UpdateContactApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<UpdateContactApiResponse>();

                        UpdateContactApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/companies/{companySlug}/contacts/{contactId}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterUpdateContactDefaultImplementation(apiResponseLocalVar, companySlug, contactId, contact);

                        Events.ExecuteOnUpdateContact(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorUpdateContactDefaultImplementation(e, "/companies/{companySlug}/contacts/{contactId}", uriBuilderLocalVar.Path, companySlug, contactId, contact);
                Events.ExecuteOnErrorUpdateContact(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="UpdateContactApiResponse"/>
        /// </summary>
        public partial class UpdateContactApiResponse : Fiken.Client.ApiResponse, IUpdateContactApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<UpdateContactApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="UpdateContactApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public UpdateContactApiResponse(ILogger<UpdateContactApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatUpdateContactContactPerson(ref string companySlug, ref long contactId, ref long contactPersonId, ContactPerson contactPerson);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="companySlug"></param>
        /// <param name="contactPerson"></param>
        /// <returns></returns>
        private void ValidateUpdateContactContactPerson(string companySlug, ContactPerson contactPerson)
        {
            if (companySlug == null)
                throw new ArgumentNullException(nameof(companySlug));

            if (contactPerson == null)
                throw new ArgumentNullException(nameof(contactPerson));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="contactId"></param>
        /// <param name="contactPersonId"></param>
        /// <param name="contactPerson"></param>
        private void AfterUpdateContactContactPersonDefaultImplementation(IUpdateContactContactPersonApiResponse apiResponseLocalVar, string companySlug, long contactId, long contactPersonId, ContactPerson contactPerson)
        {
            bool suppressDefaultLog = false;
            AfterUpdateContactContactPerson(ref suppressDefaultLog, apiResponseLocalVar, companySlug, contactId, contactPersonId, contactPerson);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="contactId"></param>
        /// <param name="contactPersonId"></param>
        /// <param name="contactPerson"></param>
        partial void AfterUpdateContactContactPerson(ref bool suppressDefaultLog, IUpdateContactContactPersonApiResponse apiResponseLocalVar, string companySlug, long contactId, long contactPersonId, ContactPerson contactPerson);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="contactId"></param>
        /// <param name="contactPersonId"></param>
        /// <param name="contactPerson"></param>
        private void OnErrorUpdateContactContactPersonDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string companySlug, long contactId, long contactPersonId, ContactPerson contactPerson)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorUpdateContactContactPerson(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, companySlug, contactId, contactPersonId, contactPerson);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="contactId"></param>
        /// <param name="contactPersonId"></param>
        /// <param name="contactPerson"></param>
        partial void OnErrorUpdateContactContactPerson(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string companySlug, long contactId, long contactPersonId, ContactPerson contactPerson);

        /// <summary>
        ///  Updates an existing contact person.
        /// </summary>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="contactId"></param>
        /// <param name="contactPersonId"></param>
        /// <param name="contactPerson"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateContactContactPersonApiResponse"/>&gt;</returns>
        public async Task<IUpdateContactContactPersonApiResponse?> UpdateContactContactPersonOrDefaultAsync(string companySlug, long contactId, long contactPersonId, ContactPerson contactPerson, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await UpdateContactContactPersonAsync(companySlug, contactId, contactPersonId, contactPerson, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  Updates an existing contact person.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="contactId"></param>
        /// <param name="contactPersonId"></param>
        /// <param name="contactPerson"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateContactContactPersonApiResponse"/>&gt;</returns>
        public async Task<IUpdateContactContactPersonApiResponse> UpdateContactContactPersonAsync(string companySlug, long contactId, long contactPersonId, ContactPerson contactPerson, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateUpdateContactContactPerson(companySlug, contactPerson);

                FormatUpdateContactContactPerson(ref companySlug, ref contactId, ref contactPersonId, contactPerson);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/companies/{companySlug}/contacts/{contactId}/contactPerson/{contactPersonId}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BcompanySlug%7D", Uri.EscapeDataString(companySlug.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BcontactId%7D", Uri.EscapeDataString(contactId.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BcontactPersonId%7D", Uri.EscapeDataString(contactPersonId.ToString()));

                    httpRequestMessageLocalVar.Content = (contactPerson as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(contactPerson, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    httpRequestMessageLocalVar.Method = HttpMethod.Put;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<UpdateContactContactPersonApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<UpdateContactContactPersonApiResponse>();

                        UpdateContactContactPersonApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/companies/{companySlug}/contacts/{contactId}/contactPerson/{contactPersonId}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterUpdateContactContactPersonDefaultImplementation(apiResponseLocalVar, companySlug, contactId, contactPersonId, contactPerson);

                        Events.ExecuteOnUpdateContactContactPerson(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorUpdateContactContactPersonDefaultImplementation(e, "/companies/{companySlug}/contacts/{contactId}/contactPerson/{contactPersonId}", uriBuilderLocalVar.Path, companySlug, contactId, contactPersonId, contactPerson);
                Events.ExecuteOnErrorUpdateContactContactPerson(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="UpdateContactContactPersonApiResponse"/>
        /// </summary>
        public partial class UpdateContactContactPersonApiResponse : Fiken.Client.ApiResponse, IUpdateContactContactPersonApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<UpdateContactContactPersonApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="UpdateContactContactPersonApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public UpdateContactContactPersonApiResponse(ILogger<UpdateContactContactPersonApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}

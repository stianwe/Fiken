// <auto-generated>
/*
 * Fiken API
 *
 *  ## Introduction [Fiken.no](https://fiken.no) is an online accounting system aimed at making accounting easy for small businesses. The API Module allows other systems to integrate with Fiken. This document describes Fiken's API.  ## Using the API Use of this API in production environments on live data is normally associated with a fee for the end user (company). API access costs 99kr per month and can be ordered through the Module access page under Settings in your Fiken account. If you have any questions regarding the API pricing, contact us at <api@fiken.no>.  The API provides two different ways of authorizing requests.    1. OAuth2   2. Personal API tokens  Third parties that wish to integrate with Fiken on behalf of their customers should use the OAuth2 authorization method. In order to develop OAuth2 applications that integrate with this API you must log into your Fiken account and check the box saying that you are a developer (**Rediger konto -> Profil -> Andre innstillinger**). This will allow you to create an App by clicking on the \"API\" tab under Brukerinnstillinger. If you don't have an existing Fiken account you can create a new user and demo company (demoforetak) at no charge. Send an email to <api@fiken.no> to get free access to Fiken for longer than the included 30 day free trial period.   Upon creation of the new App you will be provided a Client ID and Client Secret that are needed for the OAuth2 authorization flow.  This will allow you to use the API during development with up to 5 users. If you would like to use the API with more than 5 users and gain production status, you will need to send an email to <api@fiken.no> to gain full access to the API module.  Fiken customers that wish to integrate their own solutions with this API can use personal API tokens. Personal API tokens can be created in **Rediger konto -> API -> Personlige API-nÃ¸kler**. Note that personal API tokens do not expire.  ## Base URL All URLs start with https://api.fiken.no/api/v2. Note that TLS is required, unencrypted HTTP is not supported. Although we currently redirect HTTP requests to HTTPS, you are not allowed to this with your application as using HTTP is a security risk. In the future we might respond with 403 Forbidden instead.  ## Concurrent requests / rate limiting You are only allowed to make a single concurrent API-request. Sending multiple requests concurrently may result in a 429 error response. If you break this rule you might be banned. In case of a ban please contact us to be unbanned.  API calls may be slowed if you execute more than 4 requests per second.  ## Personal API tokens  Personal API tokens can be created in **Rediger konto -> API**. Personal API tokens never expire and can be revoked from the same place.  To use a personal API token simply send it as a bearer token in the `Authorization` header:      GET https://api.fiken.no/api/v2/companies     Authorization: Bearer <api token>  ## Authorization with OAuth2 Fiken API V2 uses OAuth 2.0 for authorizing API requests. Authorized requests to the API should use an `Authorization` header with the value `Bearer <TOKEN>` where `<TOKEN>` is an access token obtained through the OAuth flow.  ### Authorize Endpoint  To start the OAuth flow in order to obtain an access token for a user, you will first have to get consent from the user. To do this, direct your user to the authorization endpoint:      GET https://fiken.no/oauth/authorize?response_type=code&client_id=CLIENT_ID&redirect_uri=REDIRECT_URI&state=STATE  If the user is logged in and accepts your request, the user is redirected back to your redirect url. If the user is not logged in, the regular Fiken.no login form is presented first, requiring the user to authenticate before accepting or rejecting your request.  If the user rejects the request or if there is an error in your request, the user is redirected back to your redirect url with the parameters `error` and `error_description`. If the user rejected the request the error code will be `access_denied`.  #### Parameters  | Name          | Description                                                                                                      | | :- -- -- -- -- -- - | :- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- | | response_type | **Required** Should always be the value `code`                                                     | | client_id     | **Required** The client id you received from Fiken when you registered your application                          | | redirect_uri  | **Required** The URL in your application where users will be sent with an authorization code after authorization | | state         | **Required** An unguessable random string, used to protect against CSRF attacks                                  |   ### Token Endpoint  If the user accepts your request, Fiken redirects the user back to your `redirect_uri` with a parameter named `code` as well as the state you provided in the previous step in the `state` parameter. This temporary code will expire after a short while.  The temporary authorization code can be exchanged for an access token at the token endpoint.  The token endpoint is protected with Http Basic Authentication and you should use your application client id and client secret as credentials to authenticate.      POST https://fiken.no/oauth/token     Content-Type: application/x-www-form-urlencoded     Authorization: Basic dXNlIHlvdXIgY2xpZW50IGlkOmFuZCBjbGllbnQgc2VjcmV0      grant_type=authorization_code&code=AUTHCODE&redirect_uri=REDIRECT_URI&state=STATE  The response will contain the access token, a refresh token (see below) as well as information about the expiry time for the token.      {       \"access_token\": \"K2QwoFp4ZfugWLWk7Ipu9kni5cyv3luXKQ-GDShvV2g=\",       \"refresh_token\": \"naFOD_j8m6PFGcP0pfImVZlSxKklHLbgj9Hzao4rhg8=\",       \"token_type\": \"bearer\",       \"expires_in\": 86157     }  If an error occurs during the token exchange request, an error object is returned with an error and an error description.      {         \"error\": \"invalid_grant\",         \"error_description\": \"The authorization code is invalid or expired.\"     }  #### Parameters  | Name         | Description                                                                                                      | | :- -- -- -- -- -- | :- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- | | grant_type   | **Required** Should be the value `authorization_code`                                                            | | code         | **Required** The authorization code that was received in the redirect from the authorize endpoint                | | redirect_uri | **Required** The URL in your application where users will be sent with an authorization code after authorization | | state        | **Required** An unguessable random string, used to protect against CSRF attacks                                  |  ### Refresh Tokens  If an access token has expired you can use the refresh token that was sent in the response from the token endpoint to get a new access token.  Note that if the user has revoked the consent to your app, the refresh token will no longer be valid.  To get a new access token from the refresh token, use the token endpoint with the grant type `refresh_token`:      POST https://fiken.no/oauth/token     Content-Type: application/x-www-form-urlencoded     Authorization: Basic dXNlIHlvdXIgY2xpZW50IGlkOmFuZCBjbGllbnQgc2VjcmV0      grant_type=refresh_token&refresh_token=REFRESH_TOKEN  The response contains a fresh access token along with a possibly updated refresh token:      {       \"access_token\": \"K2QwoFp4ZfugWLWk7Ipu9kni5cyv3luXKQ-GDShvV2g=\",       \"refresh_token\": \"naFOD_j8m6PFGcP0pfImVZlSxKklHLbgj9Hzao4rhg8=\",       \"token_type\": \"bearer\",       \"expires_in\": 86157     }  #### Parameters  | Name         | Description                                                                                                      | | :- -- -- -- -- -- | :- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- | | grant_type   | **Required** Should be the value `refresh_token`                                                                 | | refresh_token| **Required** The refresh token last returned for this user from the token endpoint                               |  ### Using Access Tokens in API Requests  To execute API requests on behalf of the end user, send the access token obtained at the token endpoint as a bearer token, as in this example:      GET https://api.fiken.no/api/v2/companies     Authorization: Bearer <access_token_value>  ### Revoking tokens  To revoke an access token and refresh token use the Revoke Token endpoint.  The Revoke Token endpoint disables the application grant, the access token and the corresponding refresh token used to authenticate the call. Other access tokens obtained from the same refresh token are also revoked.      POST https://fiken.no/oauth/revoke     Authorization: Bearer <access_token_value>  The response for a successful revocation is 200/OK.  ### Managing access  The end user can manage which companies a given app has access to under **Rediger konto -> Sikkerhet -> Apper du har gitt tilgang til**.  All companies created after the initial consent has been given need to be actively added so that the app will have access to their information.  Additionally the end user can revoke access to any of their companies' data as well.   ## Try It Out  For each endpoint in the documentation below there is a button *Try It Out*. To invoke the API from this documentation you need an app and you need to authorize usage for you Fiken.no user.  Your app needs to be configured with a redirect URL for this documentation, add `https://api.fiken.no/api/v2/docs/oauth2-redirect.html` to the list of redirect URLs for your app.  Click the padlock symbol on any of the endpoints and enter your `client_id` and `client_secret` and then press *Authorize* to start the OAuth2 authorization flow, then click *Close*.  Enter the required parameters for the endpoint, such as `company_slug`, and then press *Execute* to test.  ## Request  We recommend sending the `X-Request-ID` header with all requests.  ### Request Headers | Request  Header           | Format   | Description                                                       | | - -- -- -- -- -- -- -- -          | - -- -- -- - | - -- -- -- -- -- -- -- -- -- -- -- -- -- --                                     | | `X-Request-ID`            | UUID     | UUID used to identify the request                                 |    ## Response ### Response code All HTTP codes should be expected with their normal semantics. These are some of the common ones:  * **200** for successful GET * **201** for successful POST where you get a Location-header for the created content * **400** when invalid content has be sent (for instance a required field is missing, unexpected fields, wrong format, etc) * **401** when the user is not authenticated * **403** when the user does not have the proper authorization * **404** when the requested content is not found * **405** When you are trying a method to a resource which doesn't support it (i.e. DELETE on an account). * **415** Wrong media type. we accept application/json only.  ### Response Content The default content type on the result of GET requests is application/json. On successful POSTs/PUTs/PATCHs and DELETEs an empty body is returned.  For successful POSTs/PUTs/PATCHs a Location header is given in all cases.  ## Pagination, Sorting & Filtering Pagination, sorting and filtering query parameters are all optional.   | URI                                                                     | Pagination? | Sortable? | Sortable Fields                       | Filterable? | Filtered Fields                                                                                                                         | | :- -- -- -- --                                                              |:- -- -- -- -- -- | :- -- -- -- - | :- -- -- -- -- -- --                        | :- --        | :- --                                                                                                                                    | | https://api.fiken.no/api/v2/companies                                  | Yes         | Yes       | createdDate, name, organizationNumber | No          |                                                                                                                                         | | https://api.fiken.no/api/v2/companies/{companySlug}/accounts           | No          | No        |                                       | Yes         | fromAccount, toAccount                                                                                                                  | | https://api.fiken.no/api/v2/companies/{companySlug}/accountBalances    | Yes         | No        |                                       | Yes         | fromAccount, toAccount                                                                                                                  | | https://api.fiken.no/api/v2/companies/{companySlug}/bankAccounts       | Yes         | No        |                                       | Yes         | inactive                                                                                                                                | | https://api.fiken.no/api/v2/companies/{companySlug}/contacts           | Yes         | Yes       | createdDate, lastModified             | Yes         | supplierNumber, customerNumber, memberNumber, memberNumberString, name, organizationNumber, email, group, lastModified, createdDate, inactive, phoneNumber  | | https://api.fiken.no/api/v2/companies/{companySlug}/creditNotes        | Yes         | No        |                                       | Yes         | issueDate, lastModified, settled, customerId                                                                                            | | https://api.fiken.no/api/v2/companies/{companySlug}/inbox              | Yes         | Yes       | createdDate, name                     | Yes         | status, name                                                                                                                            | | https://api.fiken.no/api/v2/companies/{companySlug}/invoices           | Yes         | No        |                                       | Yes         | issueDate, lastModified, dueDate, settled, customerId, orderReference, invoiceDraftUuid                                                 | | https://api.fiken.no/api/v2/companies/{companySlug}/invoices/drafts    | Yes         | No        |                                       | No          |                                                                                                                                         | | https://api.fiken.no/api/v2/companies/{companySlug}/journalEntries     | Yes         | No        |                                       | Yes         | date                                                                                                                                    | | https://api.fiken.no/api/v2/companies/{companySlug}/offers             | Yes         | No        |                                       | No          |                                                                                                                                         | | https://api.fiken.no/api/v2/companies/{companySlug}/orderConfirmations | Yes         | No        |                                       | No          |                                                                                                                                         | | https://api.fiken.no/api/v2/companies/{companySlug}/products           | Yes         | No        |                                       | Yes         | name, productNumber, active, createdDate, lastModified                                                                                  | | https://api.fiken.no/api/v2/companies/{companySlug}/projects           | Yes         | No        |                                       | Yes         | completed                                                                                                                               | | https://api.fiken.no/api/v2/companies/{companySlug}/purchases          | Yes         | Yes       | createdDate                           | No          | date                                                                                                                                    | | https://api.fiken.no/api/v2/companies/{companySlug}/purchases/drafts   | Yes         | No        |                                       | No          |                                                                                                                                         | | https://api.fiken.no/api/v2/companies/{companySlug}/sales              | Yes         | No        |                                       | Yes         | saleNumber, lastModified, date, contactId                                                                                               | | https://api.fiken.no/api/v2/companies/{companySlug}/sales/drafts       | Yes         | No        |                                       | No          |                                                                                                                                         | | https://api.fiken.no/api/v2/companies/{companySlug}/transactions       | Yes         | No        |                                       | Yes         | createdDate, lastModified                                                                                                               |  ### Pagination By default the API sets `page=0` and `pageSize=25` and returns the first 25 elements in a collection resource, if nothing else is specified. PageSize has a maximum value of 100 meaning that you can only access at most 100 elements at once.  To request a collection resource with pagination, query the resource with the query filters page and pageSize, note that both query parameters need to be set to enable pagination. The page counter starts at 0. The response will contain up to Fiken-Api-Page-Size elements and the response headers below, detailing how many elements the resource has in total and the total number of pages as well.  By default the API returns the resources in the order they were created, if nothing else is specified in the documentation.  #### Pagination Response Headers | Response Header           | Format   | Description                                                       | | - -- -- -- -- -- -- -- -          | - -- -- -- - | - -- -- -- -- -- -- -- -- -- -- -- -- -- --                                     | | `Fiken-Api-Page`          | integer  | From the request header                                           | | `Fiken-Api-Page-Size`     | integer  | From the request header                                           | | `Fiken-Api-Page-Count`    | integer  | The total number of pages in this resource with this page size    | | `Fiken-Api-Result-Count`  | integer  | The total number of elements in this resource                     |  ### Sorting To change the sort order for a resource, set the sortBy query parameter to a sort field in either ascending or descending order. Ex: `https://api.fiken.no/api/v2/companies?sortBy=name%20asc`  ### Filtering Some collections support filtering, and depending on the type of field, different filters can be used. Dates are the most complex, and allow you do apply different filters with different parameter names. For instance, for a field called date, the following mutations are available:  | Parameter | Field | Format    | Description                                   | | - --       |- --    | - --       |- --                                            | |  `date`   |date |yyyy-MM-dd |date equal to parameter value                  | |  `dateLe` |date |yyyy-MM-dd |date less than or equal to parameter value     | |  `dateLt` |date |yyyy-MM-dd |date less than parameter value                 | |  `dateGe` |date |yyyy-MM-dd |date greater than or equal to parameter value  | |  `dateGt` |date |yyyy-MM-dd |date greater than parameter value              |  All date-fields will have these mutations of parameter name that applies  ## Data Types These are simple data-types that are used in several of our objects.  ### Date Dates are represented as strings formatted as yyyy-MM-dd. \"Last modified\" returns the date of last modification of the object.  If the object was never modified after creation, last modified date is equal to created date.   ##### Examples: January 2nd, 1970: \"1970-01-02\"  ### Amount Amounts are always represented as a number, and specifies the number of cents in the amount. Fractions will be ignored.  ##### Examples: One thousand: 100000  One hundred and twelve cents: 10012  ### Account An account is a string with either four digits, or four digits, a colon and five digits (\"reskontro\").  ##### Examples: 3020  1500:10001  ### VAT Code Fiken's VAT codes are based upon Sticos mvakoder. To see all VAT codes go to Fiken support, check the \"Mva kode\"-selector in the Fiken web interface while creating a genereal ledger item (\"Fri postering\").  See below the mapping between VAT codes and types (codes are used at the transaction level while types are used for sales and purchases).  | Vat Code | Vat Type                                                                                                                                 | Valid for Purchases/Sales    |  | - --      |- --                                                                                                                                       | - --                          |                                          |  0/7     |NONE (Ingen - KJÃP_INGEN_MVABEHANDLING/SALG_INNTEKTER_UTEN_MVABEHANDLING)                                                               |Both                          | |  1/3    |HIGH (HÃ¸y - KJÃP/SALG_MED_HÃY_SATS)                                                                                                       |Both                          | |  11/31   |MEDIUM (Middels - KJÃP/SALG_MED_MIDDELS_SATS)                                                                                           |Both                       | |  12/32   |RAW_FISH (RÃ¥fisk - KJÃP/SALG_MED_RÃFISK_SATS)                                                                                           |Both                         | |  13/33   |LOW (Lav - KJÃP/SALG_MED_LAV_SATS)                                                                                                       |Both                          | |  52    |EXEMPT_IMPORT_EXPORT (Fritatt import/export - SALG_UTFÃRSEL_AV_VARER_OG_TJENESTER)                                                        |Sales                      | |  5    |EXEMPT (Fritatt - SALG_FRITATT_FOR_MVA_AVGIFTSFRITT)                                                                                   |Sales                        | |  6    |OUTSIDE (Utenfor - SALG_FRITATT_FOR_MVA_UTENFOR_AVGIFTSOMRÃDET)                                                                           |Sales                      | |  51    |EXEMPT_REVERSE (Fritatt omvendt - SALG_INNENLANDSK_OMSETNING_MED_OMVENDT_AVGIFTPLIKT)                                                   |Sales                      | |  14    |HIGH_DIRECT (HÃ¸y direkt - KUN_KJÃPSMVA_HÃY_SATS)                                                                                       |Purchases                  | |  21    |HIGH_BASIS (HÃ¸y grunnlag - KUN_GRUNNLAG_KJÃPSMVA_HÃY_SATS)                                                                               |Purchases                  | |  15    |MEDIUM_DIRECT (Middels direkte - KUN_KJÃPSMVA_MIDDELS_SATS)                                                                               |Purchases                  | |  22    |MEDIUM_BASIS (Middels grunnlag - KUN_GRUNNLAG_KJÃPSMVA_MIDDELS_SATS)                                                                   |Purchases                  | |  23    |NONE_IMPORT_BASIS (Ingen import grunnlag - KUN_GRUNNLAG_KJÃPSMVA_INGEN_SATS)                                                           |Purchases                  | |  86    |HIGH_FOREIGN_SERVICE_DEDUCTIBLE (Tjeneste utlandet - TJENESTER_KJÃPT_FRA_UTLANDET_MED_FRADRAG_FOR_HÃY_MVA)                               |Purchases                  | |  87    |HIGH_FOREIGN_SERVICE_NONDEDUCTIBLE (Tjeneste utlandet uten fradrag - TJENESTER_KJÃPT_FRA_UTLANDET_UTEN_FRADRAG_FOR_HÃY_MVA)               |Purchases                  | |  88    |LOW_FOREIGN_SERVICE_DEDUCTIBLE (Lav tjeneste utlandet - TJENESTER_KJÃPT_FRA_UTLANDET_MED_FRADRAG_FOR_LAV_MVA)                           |Purchases                  | |  89    |LOW_FOREIGN_SERVICE_NONDEDUCTIBLE (Lav tjeneste utlandet uten fradrag - TJENESTER_KJÃPT_FRA_UTLANDET_UTEN_FRADRAG_FOR_LAV_MVA)           |Purchases                  | |  91    |HIGH_PURCHASE_OF_EMISSIONSTRADING_OR_GOLD_DEDUCTIBLE (Gull - KJÃP_AV_KLIMAKVOTER_ELLER_GULL_MED_FRADRAG_FOR_MVA)                       |Purchases                  | |  92    |HIGH_PURCHASE_OF_EMISSIONSTRADING_OR_GOLD_NONDEDUCTIBLE (Gull uten fradrag - KJÃP_AV_KLIMAKVOTER_ELLER_GULL_UTEN_FRADRAG_FOR_MVA)       |Purchases                  | 
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using Fiken.Client;
using Fiken.Model;
using System.Diagnostics.CodeAnalysis;

namespace Fiken.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IJournalEntriesApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        JournalEntriesApiEvents Events { get; }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates and adds a new attachment to a Journal Entry
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="journalEntryId"></param>
        /// <param name="filename">Required. The filename. Must end with either .png, .jpeg, .jpg, .gif or .pdf (optional)</param>
        /// <param name="file"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAddAttachmentToJournalEntryApiResponse"/>&gt;</returns>
        Task<IAddAttachmentToJournalEntryApiResponse> AddAttachmentToJournalEntryAsync(string companySlug, long journalEntryId, Option<string> filename = default, Option<System.IO.Stream> file = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates and adds a new attachment to a Journal Entry
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="journalEntryId"></param>
        /// <param name="filename">Required. The filename. Must end with either .png, .jpeg, .jpg, .gif or .pdf (optional)</param>
        /// <param name="file"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAddAttachmentToJournalEntryApiResponse"/>?&gt;</returns>
        Task<IAddAttachmentToJournalEntryApiResponse?> AddAttachmentToJournalEntryOrDefaultAsync(string companySlug, long journalEntryId, Option<string> filename = default, Option<System.IO.Stream> file = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a new general journal entry (fri postering).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="generalJournalEntryRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateGeneralJournalEntryApiResponse"/>&gt;</returns>
        Task<ICreateGeneralJournalEntryApiResponse> CreateGeneralJournalEntryAsync(string companySlug, GeneralJournalEntryRequest generalJournalEntryRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a new general journal entry (fri postering).
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="generalJournalEntryRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateGeneralJournalEntryApiResponse"/>?&gt;</returns>
        Task<ICreateGeneralJournalEntryApiResponse?> CreateGeneralJournalEntryOrDefaultAsync(string companySlug, GeneralJournalEntryRequest generalJournalEntryRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns all general journal entries (posteringer) for the specified company.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="page">Returns the number of the page to return. Valid page values are integers from 0 to the total number of pages. Default value is 0.  (optional, default to 0)</param>
        /// <param name="pageSize">Defines the number of entries to return on each page. Maximum number of results that can be returned at one time are 100. Default value is 25.  (optional, default to 25)</param>
        /// <param name="date">Dates are represented as strings formatted as YYYY-MM-DD. Example: January 1st, 1970: \&quot;1970-01-01\&quot;  (optional)</param>
        /// <param name="dateLe">Filter based on date less than or equal to parameter value. Dates are represented as strings formatted as YYYY-MM-DD. Example: January 1st, 1970: \&quot;1970-01-01\&quot;  (optional)</param>
        /// <param name="dateLt">Filter based on date strictly less than parameter value. Dates are represented as strings formatted as YYYY-MM-DD. Example: January 1st, 1970: \&quot;1970-01-01\&quot;  (optional)</param>
        /// <param name="dateGe">Filter based on date greater than or equal to parameter value. Dates are represented as strings formatted as YYYY-MM-DD. Example: January 1st, 1970: \&quot;1970-01-01\&quot;  (optional)</param>
        /// <param name="dateGt">Filter based on date strictly greater than parameter value Dates are represented as strings formatted as YYYY-MM-DD. Example: January 1st, 1970: \&quot;1970-01-01\&quot;  (optional)</param>
        /// <param name="lastModified">Filter based on date of last modification. Returns results that were last modified on the date provided as a parameter value. Dates are represented as strings formatted as YYYY-MM-DD. Example: January 1st, 1970: \&quot;1970-01-01\&quot;  (optional)</param>
        /// <param name="lastModifiedLe">Returns results that have been last modified before or on the date provided as a parameter value. Dates are represented as strings formatted as YYYY-MM-DD. Example: January 1st, 1970: \&quot;1970-01-01\&quot;  (optional)</param>
        /// <param name="lastModifiedLt">Returns results that have been last modified strictly before the date provided as a parameter value. Dates are represented as strings formatted as YYYY-MM-DD. Example: January 1st, 1970: \&quot;1970-01-01\&quot;  (optional)</param>
        /// <param name="lastModifiedGe">Returns results that have been last modified after or on the date provided as a parameter value. Dates are represented as strings formatted as YYYY-MM-DD. Example: January 1st, 1970: \&quot;1970-01-01\&quot;  (optional)</param>
        /// <param name="lastModifiedGt">Returns results that have been last modified strictly after the date provided as a parameter value. Dates are represented as strings formatted as YYYY-MM-DD. Example: January 1st, 1970: \&quot;1970-01-01\&quot;  (optional)</param>
        /// <param name="createdDate">Dates are represented as strings formatted as YYYY-MM-DD. Example: January 1st, 1970: \&quot;1970-01-01\&quot;  (optional)</param>
        /// <param name="createdDateLe">Returns results that were created before or on the date provided as a parameter value. Dates are represented as strings formatted as YYYY-MM-DD. Example: January 1st, 1970: \&quot;1970-01-01\&quot;  (optional)</param>
        /// <param name="createdDateLt">Returns results that were created strictly before the date provided as a parameter value. Dates are represented as strings formatted as YYYY-MM-DD. Example: January 1st, 1970: \&quot;1970-01-01\&quot;  (optional)</param>
        /// <param name="createdDateGe">Returns results that were created after or on the date provided as a parameter value. Dates are represented as strings formatted as YYYY-MM-DD. Example: January 1st, 1970: \&quot;1970-01-01\&quot;  (optional)</param>
        /// <param name="createdDateGt">Returns results that were created strictly after the date provided as a parameter value. Dates are represented as strings formatted as YYYY-MM-DD. Example: January 1st, 1970: \&quot;1970-01-01\&quot;  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetJournalEntriesApiResponse"/>&gt;</returns>
        Task<IGetJournalEntriesApiResponse> GetJournalEntriesAsync(string companySlug, Option<int> page = default, Option<int> pageSize = default, Option<DateOnly> date = default, Option<DateOnly> dateLe = default, Option<DateOnly> dateLt = default, Option<DateOnly> dateGe = default, Option<DateOnly> dateGt = default, Option<DateOnly> lastModified = default, Option<DateOnly> lastModifiedLe = default, Option<DateOnly> lastModifiedLt = default, Option<DateOnly> lastModifiedGe = default, Option<DateOnly> lastModifiedGt = default, Option<DateOnly> createdDate = default, Option<DateOnly> createdDateLe = default, Option<DateOnly> createdDateLt = default, Option<DateOnly> createdDateGe = default, Option<DateOnly> createdDateGt = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns all general journal entries (posteringer) for the specified company.
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="page">Returns the number of the page to return. Valid page values are integers from 0 to the total number of pages. Default value is 0.  (optional, default to 0)</param>
        /// <param name="pageSize">Defines the number of entries to return on each page. Maximum number of results that can be returned at one time are 100. Default value is 25.  (optional, default to 25)</param>
        /// <param name="date">Dates are represented as strings formatted as YYYY-MM-DD. Example: January 1st, 1970: \&quot;1970-01-01\&quot;  (optional)</param>
        /// <param name="dateLe">Filter based on date less than or equal to parameter value. Dates are represented as strings formatted as YYYY-MM-DD. Example: January 1st, 1970: \&quot;1970-01-01\&quot;  (optional)</param>
        /// <param name="dateLt">Filter based on date strictly less than parameter value. Dates are represented as strings formatted as YYYY-MM-DD. Example: January 1st, 1970: \&quot;1970-01-01\&quot;  (optional)</param>
        /// <param name="dateGe">Filter based on date greater than or equal to parameter value. Dates are represented as strings formatted as YYYY-MM-DD. Example: January 1st, 1970: \&quot;1970-01-01\&quot;  (optional)</param>
        /// <param name="dateGt">Filter based on date strictly greater than parameter value Dates are represented as strings formatted as YYYY-MM-DD. Example: January 1st, 1970: \&quot;1970-01-01\&quot;  (optional)</param>
        /// <param name="lastModified">Filter based on date of last modification. Returns results that were last modified on the date provided as a parameter value. Dates are represented as strings formatted as YYYY-MM-DD. Example: January 1st, 1970: \&quot;1970-01-01\&quot;  (optional)</param>
        /// <param name="lastModifiedLe">Returns results that have been last modified before or on the date provided as a parameter value. Dates are represented as strings formatted as YYYY-MM-DD. Example: January 1st, 1970: \&quot;1970-01-01\&quot;  (optional)</param>
        /// <param name="lastModifiedLt">Returns results that have been last modified strictly before the date provided as a parameter value. Dates are represented as strings formatted as YYYY-MM-DD. Example: January 1st, 1970: \&quot;1970-01-01\&quot;  (optional)</param>
        /// <param name="lastModifiedGe">Returns results that have been last modified after or on the date provided as a parameter value. Dates are represented as strings formatted as YYYY-MM-DD. Example: January 1st, 1970: \&quot;1970-01-01\&quot;  (optional)</param>
        /// <param name="lastModifiedGt">Returns results that have been last modified strictly after the date provided as a parameter value. Dates are represented as strings formatted as YYYY-MM-DD. Example: January 1st, 1970: \&quot;1970-01-01\&quot;  (optional)</param>
        /// <param name="createdDate">Dates are represented as strings formatted as YYYY-MM-DD. Example: January 1st, 1970: \&quot;1970-01-01\&quot;  (optional)</param>
        /// <param name="createdDateLe">Returns results that were created before or on the date provided as a parameter value. Dates are represented as strings formatted as YYYY-MM-DD. Example: January 1st, 1970: \&quot;1970-01-01\&quot;  (optional)</param>
        /// <param name="createdDateLt">Returns results that were created strictly before the date provided as a parameter value. Dates are represented as strings formatted as YYYY-MM-DD. Example: January 1st, 1970: \&quot;1970-01-01\&quot;  (optional)</param>
        /// <param name="createdDateGe">Returns results that were created after or on the date provided as a parameter value. Dates are represented as strings formatted as YYYY-MM-DD. Example: January 1st, 1970: \&quot;1970-01-01\&quot;  (optional)</param>
        /// <param name="createdDateGt">Returns results that were created strictly after the date provided as a parameter value. Dates are represented as strings formatted as YYYY-MM-DD. Example: January 1st, 1970: \&quot;1970-01-01\&quot;  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetJournalEntriesApiResponse"/>?&gt;</returns>
        Task<IGetJournalEntriesApiResponse?> GetJournalEntriesOrDefaultAsync(string companySlug, Option<int> page = default, Option<int> pageSize = default, Option<DateOnly> date = default, Option<DateOnly> dateLe = default, Option<DateOnly> dateLt = default, Option<DateOnly> dateGe = default, Option<DateOnly> dateGt = default, Option<DateOnly> lastModified = default, Option<DateOnly> lastModifiedLe = default, Option<DateOnly> lastModifiedLt = default, Option<DateOnly> lastModifiedGe = default, Option<DateOnly> lastModifiedGt = default, Option<DateOnly> createdDate = default, Option<DateOnly> createdDateLe = default, Option<DateOnly> createdDateLt = default, Option<DateOnly> createdDateGe = default, Option<DateOnly> createdDateGt = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns all journal entries within a given company&#39;s Journal Entry Service
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="journalEntryId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetJournalEntryApiResponse"/>&gt;</returns>
        Task<IGetJournalEntryApiResponse> GetJournalEntryAsync(string companySlug, long journalEntryId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns all journal entries within a given company&#39;s Journal Entry Service
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="journalEntryId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetJournalEntryApiResponse"/>?&gt;</returns>
        Task<IGetJournalEntryApiResponse?> GetJournalEntryOrDefaultAsync(string companySlug, long journalEntryId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns all attachments for a given Journal Entry
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="journalEntryId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetJournalEntryAttachmentsApiResponse"/>&gt;</returns>
        Task<IGetJournalEntryAttachmentsApiResponse> GetJournalEntryAttachmentsAsync(string companySlug, long journalEntryId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns all attachments for a given Journal Entry
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="journalEntryId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetJournalEntryAttachmentsApiResponse"/>?&gt;</returns>
        Task<IGetJournalEntryAttachmentsApiResponse?> GetJournalEntryAttachmentsOrDefaultAsync(string companySlug, long journalEntryId, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IAddAttachmentToJournalEntryApiResponse"/>
    /// </summary>
    public interface IAddAttachmentToJournalEntryApiResponse : Fiken.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 201 Created
        /// </summary>
        /// <returns></returns>
        bool IsCreated { get; }
    }

    /// <summary>
    /// The <see cref="ICreateGeneralJournalEntryApiResponse"/>
    /// </summary>
    public interface ICreateGeneralJournalEntryApiResponse : Fiken.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 201 Created
        /// </summary>
        /// <returns></returns>
        bool IsCreated { get; }
    }

    /// <summary>
    /// The <see cref="IGetJournalEntriesApiResponse"/>
    /// </summary>
    public interface IGetJournalEntriesApiResponse : Fiken.Client.IApiResponse, IOk<List<JournalEntry>?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetJournalEntryApiResponse"/>
    /// </summary>
    public interface IGetJournalEntryApiResponse : Fiken.Client.IApiResponse, IOk<Fiken.Model.JournalEntry?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetJournalEntryAttachmentsApiResponse"/>
    /// </summary>
    public interface IGetJournalEntryAttachmentsApiResponse : Fiken.Client.IApiResponse, IOk<List<Attachment>?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class JournalEntriesApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnAddAttachmentToJournalEntry;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorAddAttachmentToJournalEntry;

        internal void ExecuteOnAddAttachmentToJournalEntry(JournalEntriesApi.AddAttachmentToJournalEntryApiResponse apiResponse)
        {
            OnAddAttachmentToJournalEntry?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorAddAttachmentToJournalEntry(Exception exception)
        {
            OnErrorAddAttachmentToJournalEntry?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnCreateGeneralJournalEntry;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorCreateGeneralJournalEntry;

        internal void ExecuteOnCreateGeneralJournalEntry(JournalEntriesApi.CreateGeneralJournalEntryApiResponse apiResponse)
        {
            OnCreateGeneralJournalEntry?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorCreateGeneralJournalEntry(Exception exception)
        {
            OnErrorCreateGeneralJournalEntry?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetJournalEntries;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetJournalEntries;

        internal void ExecuteOnGetJournalEntries(JournalEntriesApi.GetJournalEntriesApiResponse apiResponse)
        {
            OnGetJournalEntries?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetJournalEntries(Exception exception)
        {
            OnErrorGetJournalEntries?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetJournalEntry;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetJournalEntry;

        internal void ExecuteOnGetJournalEntry(JournalEntriesApi.GetJournalEntryApiResponse apiResponse)
        {
            OnGetJournalEntry?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetJournalEntry(Exception exception)
        {
            OnErrorGetJournalEntry?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetJournalEntryAttachments;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetJournalEntryAttachments;

        internal void ExecuteOnGetJournalEntryAttachments(JournalEntriesApi.GetJournalEntryAttachmentsApiResponse apiResponse)
        {
            OnGetJournalEntryAttachments?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetJournalEntryAttachments(Exception exception)
        {
            OnErrorGetJournalEntryAttachments?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class JournalEntriesApi : IJournalEntriesApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<JournalEntriesApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public JournalEntriesApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="OauthTokenProvider"/>
        /// </summary>
        public TokenProvider<OAuthToken> OauthTokenProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="JournalEntriesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public JournalEntriesApi(ILogger<JournalEntriesApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, JournalEntriesApiEvents journalEntriesApiEvents,
            TokenProvider<OAuthToken> oauthTokenProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<JournalEntriesApi>();
            HttpClient = httpClient;
            Events = journalEntriesApiEvents;
            OauthTokenProvider = oauthTokenProvider;
        }

        partial void FormatAddAttachmentToJournalEntry(ref string companySlug, ref long journalEntryId, ref Option<string> filename, ref Option<System.IO.Stream> file);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="companySlug"></param>
        /// <param name="filename"></param>
        /// <param name="file"></param>
        /// <returns></returns>
        private void ValidateAddAttachmentToJournalEntry(string companySlug, Option<string> filename, Option<System.IO.Stream> file)
        {
            if (companySlug == null)
                throw new ArgumentNullException(nameof(companySlug));

            if (filename.IsSet && filename.Value == null)
                throw new ArgumentNullException(nameof(filename));

            if (file.IsSet && file.Value == null)
                throw new ArgumentNullException(nameof(file));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="journalEntryId"></param>
        /// <param name="filename"></param>
        /// <param name="file"></param>
        private void AfterAddAttachmentToJournalEntryDefaultImplementation(IAddAttachmentToJournalEntryApiResponse apiResponseLocalVar, string companySlug, long journalEntryId, Option<string> filename, Option<System.IO.Stream> file)
        {
            bool suppressDefaultLog = false;
            AfterAddAttachmentToJournalEntry(ref suppressDefaultLog, apiResponseLocalVar, companySlug, journalEntryId, filename, file);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="journalEntryId"></param>
        /// <param name="filename"></param>
        /// <param name="file"></param>
        partial void AfterAddAttachmentToJournalEntry(ref bool suppressDefaultLog, IAddAttachmentToJournalEntryApiResponse apiResponseLocalVar, string companySlug, long journalEntryId, Option<string> filename, Option<System.IO.Stream> file);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="journalEntryId"></param>
        /// <param name="filename"></param>
        /// <param name="file"></param>
        private void OnErrorAddAttachmentToJournalEntryDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string companySlug, long journalEntryId, Option<string> filename, Option<System.IO.Stream> file)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorAddAttachmentToJournalEntry(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, companySlug, journalEntryId, filename, file);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="journalEntryId"></param>
        /// <param name="filename"></param>
        /// <param name="file"></param>
        partial void OnErrorAddAttachmentToJournalEntry(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string companySlug, long journalEntryId, Option<string> filename, Option<System.IO.Stream> file);

        /// <summary>
        ///  Creates and adds a new attachment to a Journal Entry
        /// </summary>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="journalEntryId"></param>
        /// <param name="filename">Required. The filename. Must end with either .png, .jpeg, .jpg, .gif or .pdf (optional)</param>
        /// <param name="file"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAddAttachmentToJournalEntryApiResponse"/>&gt;</returns>
        public async Task<IAddAttachmentToJournalEntryApiResponse?> AddAttachmentToJournalEntryOrDefaultAsync(string companySlug, long journalEntryId, Option<string> filename = default, Option<System.IO.Stream> file = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await AddAttachmentToJournalEntryAsync(companySlug, journalEntryId, filename, file, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  Creates and adds a new attachment to a Journal Entry
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="journalEntryId"></param>
        /// <param name="filename">Required. The filename. Must end with either .png, .jpeg, .jpg, .gif or .pdf (optional)</param>
        /// <param name="file"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAddAttachmentToJournalEntryApiResponse"/>&gt;</returns>
        public async Task<IAddAttachmentToJournalEntryApiResponse> AddAttachmentToJournalEntryAsync(string companySlug, long journalEntryId, Option<string> filename = default, Option<System.IO.Stream> file = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateAddAttachmentToJournalEntry(companySlug, filename, file);

                FormatAddAttachmentToJournalEntry(ref companySlug, ref journalEntryId, ref filename, ref file);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/companies/{companySlug}/journalEntries/{journalEntryId}/attachments";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BcompanySlug%7D", Uri.EscapeDataString(companySlug.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BjournalEntryId%7D", Uri.EscapeDataString(journalEntryId.ToString()));

                    MultipartContent multipartContentLocalVar = new MultipartContent();

                    httpRequestMessageLocalVar.Content = multipartContentLocalVar;

                    List<KeyValuePair<string?, string?>> formParameterLocalVars = new List<KeyValuePair<string?, string?>>();

                    multipartContentLocalVar.Add(new FormUrlEncodedContent(formParameterLocalVars));                    if (filename.IsSet)
                        formParameterLocalVars.Add(new KeyValuePair<string?, string?>("filename", ClientUtils.ParameterToString(filename.Value)));

                    if (file.IsSet)
                        multipartContentLocalVar.Add(new StreamContent(file.Value));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "multipart/form-data"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<AddAttachmentToJournalEntryApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<AddAttachmentToJournalEntryApiResponse>();

                        AddAttachmentToJournalEntryApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/companies/{companySlug}/journalEntries/{journalEntryId}/attachments", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterAddAttachmentToJournalEntryDefaultImplementation(apiResponseLocalVar, companySlug, journalEntryId, filename, file);

                        Events.ExecuteOnAddAttachmentToJournalEntry(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorAddAttachmentToJournalEntryDefaultImplementation(e, "/companies/{companySlug}/journalEntries/{journalEntryId}/attachments", uriBuilderLocalVar.Path, companySlug, journalEntryId, filename, file);
                Events.ExecuteOnErrorAddAttachmentToJournalEntry(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="AddAttachmentToJournalEntryApiResponse"/>
        /// </summary>
        public partial class AddAttachmentToJournalEntryApiResponse : Fiken.Client.ApiResponse, IAddAttachmentToJournalEntryApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<AddAttachmentToJournalEntryApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="AddAttachmentToJournalEntryApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public AddAttachmentToJournalEntryApiResponse(ILogger<AddAttachmentToJournalEntryApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public bool IsCreated => 201 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatCreateGeneralJournalEntry(ref string companySlug, GeneralJournalEntryRequest generalJournalEntryRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="companySlug"></param>
        /// <param name="generalJournalEntryRequest"></param>
        /// <returns></returns>
        private void ValidateCreateGeneralJournalEntry(string companySlug, GeneralJournalEntryRequest generalJournalEntryRequest)
        {
            if (companySlug == null)
                throw new ArgumentNullException(nameof(companySlug));

            if (generalJournalEntryRequest == null)
                throw new ArgumentNullException(nameof(generalJournalEntryRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="generalJournalEntryRequest"></param>
        private void AfterCreateGeneralJournalEntryDefaultImplementation(ICreateGeneralJournalEntryApiResponse apiResponseLocalVar, string companySlug, GeneralJournalEntryRequest generalJournalEntryRequest)
        {
            bool suppressDefaultLog = false;
            AfterCreateGeneralJournalEntry(ref suppressDefaultLog, apiResponseLocalVar, companySlug, generalJournalEntryRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="generalJournalEntryRequest"></param>
        partial void AfterCreateGeneralJournalEntry(ref bool suppressDefaultLog, ICreateGeneralJournalEntryApiResponse apiResponseLocalVar, string companySlug, GeneralJournalEntryRequest generalJournalEntryRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="generalJournalEntryRequest"></param>
        private void OnErrorCreateGeneralJournalEntryDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string companySlug, GeneralJournalEntryRequest generalJournalEntryRequest)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorCreateGeneralJournalEntry(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, companySlug, generalJournalEntryRequest);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="generalJournalEntryRequest"></param>
        partial void OnErrorCreateGeneralJournalEntry(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string companySlug, GeneralJournalEntryRequest generalJournalEntryRequest);

        /// <summary>
        ///  Creates a new general journal entry (fri postering).
        /// </summary>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="generalJournalEntryRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateGeneralJournalEntryApiResponse"/>&gt;</returns>
        public async Task<ICreateGeneralJournalEntryApiResponse?> CreateGeneralJournalEntryOrDefaultAsync(string companySlug, GeneralJournalEntryRequest generalJournalEntryRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await CreateGeneralJournalEntryAsync(companySlug, generalJournalEntryRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  Creates a new general journal entry (fri postering).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="generalJournalEntryRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateGeneralJournalEntryApiResponse"/>&gt;</returns>
        public async Task<ICreateGeneralJournalEntryApiResponse> CreateGeneralJournalEntryAsync(string companySlug, GeneralJournalEntryRequest generalJournalEntryRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateCreateGeneralJournalEntry(companySlug, generalJournalEntryRequest);

                FormatCreateGeneralJournalEntry(ref companySlug, generalJournalEntryRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/companies/{companySlug}/generalJournalEntries";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BcompanySlug%7D", Uri.EscapeDataString(companySlug.ToString()));

                    httpRequestMessageLocalVar.Content = (generalJournalEntryRequest as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(generalJournalEntryRequest, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<CreateGeneralJournalEntryApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<CreateGeneralJournalEntryApiResponse>();

                        CreateGeneralJournalEntryApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/companies/{companySlug}/generalJournalEntries", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterCreateGeneralJournalEntryDefaultImplementation(apiResponseLocalVar, companySlug, generalJournalEntryRequest);

                        Events.ExecuteOnCreateGeneralJournalEntry(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorCreateGeneralJournalEntryDefaultImplementation(e, "/companies/{companySlug}/generalJournalEntries", uriBuilderLocalVar.Path, companySlug, generalJournalEntryRequest);
                Events.ExecuteOnErrorCreateGeneralJournalEntry(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="CreateGeneralJournalEntryApiResponse"/>
        /// </summary>
        public partial class CreateGeneralJournalEntryApiResponse : Fiken.Client.ApiResponse, ICreateGeneralJournalEntryApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<CreateGeneralJournalEntryApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="CreateGeneralJournalEntryApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public CreateGeneralJournalEntryApiResponse(ILogger<CreateGeneralJournalEntryApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public bool IsCreated => 201 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetJournalEntries(ref string companySlug, ref Option<int> page, ref Option<int> pageSize, ref Option<DateOnly> date, ref Option<DateOnly> dateLe, ref Option<DateOnly> dateLt, ref Option<DateOnly> dateGe, ref Option<DateOnly> dateGt, ref Option<DateOnly> lastModified, ref Option<DateOnly> lastModifiedLe, ref Option<DateOnly> lastModifiedLt, ref Option<DateOnly> lastModifiedGe, ref Option<DateOnly> lastModifiedGt, ref Option<DateOnly> createdDate, ref Option<DateOnly> createdDateLe, ref Option<DateOnly> createdDateLt, ref Option<DateOnly> createdDateGe, ref Option<DateOnly> createdDateGt);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="companySlug"></param>
        /// <returns></returns>
        private void ValidateGetJournalEntries(string companySlug)
        {
            if (companySlug == null)
                throw new ArgumentNullException(nameof(companySlug));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="date"></param>
        /// <param name="dateLe"></param>
        /// <param name="dateLt"></param>
        /// <param name="dateGe"></param>
        /// <param name="dateGt"></param>
        /// <param name="lastModified"></param>
        /// <param name="lastModifiedLe"></param>
        /// <param name="lastModifiedLt"></param>
        /// <param name="lastModifiedGe"></param>
        /// <param name="lastModifiedGt"></param>
        /// <param name="createdDate"></param>
        /// <param name="createdDateLe"></param>
        /// <param name="createdDateLt"></param>
        /// <param name="createdDateGe"></param>
        /// <param name="createdDateGt"></param>
        private void AfterGetJournalEntriesDefaultImplementation(IGetJournalEntriesApiResponse apiResponseLocalVar, string companySlug, Option<int> page, Option<int> pageSize, Option<DateOnly> date, Option<DateOnly> dateLe, Option<DateOnly> dateLt, Option<DateOnly> dateGe, Option<DateOnly> dateGt, Option<DateOnly> lastModified, Option<DateOnly> lastModifiedLe, Option<DateOnly> lastModifiedLt, Option<DateOnly> lastModifiedGe, Option<DateOnly> lastModifiedGt, Option<DateOnly> createdDate, Option<DateOnly> createdDateLe, Option<DateOnly> createdDateLt, Option<DateOnly> createdDateGe, Option<DateOnly> createdDateGt)
        {
            bool suppressDefaultLog = false;
            AfterGetJournalEntries(ref suppressDefaultLog, apiResponseLocalVar, companySlug, page, pageSize, date, dateLe, dateLt, dateGe, dateGt, lastModified, lastModifiedLe, lastModifiedLt, lastModifiedGe, lastModifiedGt, createdDate, createdDateLe, createdDateLt, createdDateGe, createdDateGt);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="date"></param>
        /// <param name="dateLe"></param>
        /// <param name="dateLt"></param>
        /// <param name="dateGe"></param>
        /// <param name="dateGt"></param>
        /// <param name="lastModified"></param>
        /// <param name="lastModifiedLe"></param>
        /// <param name="lastModifiedLt"></param>
        /// <param name="lastModifiedGe"></param>
        /// <param name="lastModifiedGt"></param>
        /// <param name="createdDate"></param>
        /// <param name="createdDateLe"></param>
        /// <param name="createdDateLt"></param>
        /// <param name="createdDateGe"></param>
        /// <param name="createdDateGt"></param>
        partial void AfterGetJournalEntries(ref bool suppressDefaultLog, IGetJournalEntriesApiResponse apiResponseLocalVar, string companySlug, Option<int> page, Option<int> pageSize, Option<DateOnly> date, Option<DateOnly> dateLe, Option<DateOnly> dateLt, Option<DateOnly> dateGe, Option<DateOnly> dateGt, Option<DateOnly> lastModified, Option<DateOnly> lastModifiedLe, Option<DateOnly> lastModifiedLt, Option<DateOnly> lastModifiedGe, Option<DateOnly> lastModifiedGt, Option<DateOnly> createdDate, Option<DateOnly> createdDateLe, Option<DateOnly> createdDateLt, Option<DateOnly> createdDateGe, Option<DateOnly> createdDateGt);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="date"></param>
        /// <param name="dateLe"></param>
        /// <param name="dateLt"></param>
        /// <param name="dateGe"></param>
        /// <param name="dateGt"></param>
        /// <param name="lastModified"></param>
        /// <param name="lastModifiedLe"></param>
        /// <param name="lastModifiedLt"></param>
        /// <param name="lastModifiedGe"></param>
        /// <param name="lastModifiedGt"></param>
        /// <param name="createdDate"></param>
        /// <param name="createdDateLe"></param>
        /// <param name="createdDateLt"></param>
        /// <param name="createdDateGe"></param>
        /// <param name="createdDateGt"></param>
        private void OnErrorGetJournalEntriesDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string companySlug, Option<int> page, Option<int> pageSize, Option<DateOnly> date, Option<DateOnly> dateLe, Option<DateOnly> dateLt, Option<DateOnly> dateGe, Option<DateOnly> dateGt, Option<DateOnly> lastModified, Option<DateOnly> lastModifiedLe, Option<DateOnly> lastModifiedLt, Option<DateOnly> lastModifiedGe, Option<DateOnly> lastModifiedGt, Option<DateOnly> createdDate, Option<DateOnly> createdDateLe, Option<DateOnly> createdDateLt, Option<DateOnly> createdDateGe, Option<DateOnly> createdDateGt)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetJournalEntries(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, companySlug, page, pageSize, date, dateLe, dateLt, dateGe, dateGt, lastModified, lastModifiedLe, lastModifiedLt, lastModifiedGe, lastModifiedGt, createdDate, createdDateLe, createdDateLt, createdDateGe, createdDateGt);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="date"></param>
        /// <param name="dateLe"></param>
        /// <param name="dateLt"></param>
        /// <param name="dateGe"></param>
        /// <param name="dateGt"></param>
        /// <param name="lastModified"></param>
        /// <param name="lastModifiedLe"></param>
        /// <param name="lastModifiedLt"></param>
        /// <param name="lastModifiedGe"></param>
        /// <param name="lastModifiedGt"></param>
        /// <param name="createdDate"></param>
        /// <param name="createdDateLe"></param>
        /// <param name="createdDateLt"></param>
        /// <param name="createdDateGe"></param>
        /// <param name="createdDateGt"></param>
        partial void OnErrorGetJournalEntries(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string companySlug, Option<int> page, Option<int> pageSize, Option<DateOnly> date, Option<DateOnly> dateLe, Option<DateOnly> dateLt, Option<DateOnly> dateGe, Option<DateOnly> dateGt, Option<DateOnly> lastModified, Option<DateOnly> lastModifiedLe, Option<DateOnly> lastModifiedLt, Option<DateOnly> lastModifiedGe, Option<DateOnly> lastModifiedGt, Option<DateOnly> createdDate, Option<DateOnly> createdDateLe, Option<DateOnly> createdDateLt, Option<DateOnly> createdDateGe, Option<DateOnly> createdDateGt);

        /// <summary>
        ///  Returns all general journal entries (posteringer) for the specified company.
        /// </summary>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="page">Returns the number of the page to return. Valid page values are integers from 0 to the total number of pages. Default value is 0.  (optional, default to 0)</param>
        /// <param name="pageSize">Defines the number of entries to return on each page. Maximum number of results that can be returned at one time are 100. Default value is 25.  (optional, default to 25)</param>
        /// <param name="date">Dates are represented as strings formatted as YYYY-MM-DD. Example: January 1st, 1970: \&quot;1970-01-01\&quot;  (optional)</param>
        /// <param name="dateLe">Filter based on date less than or equal to parameter value. Dates are represented as strings formatted as YYYY-MM-DD. Example: January 1st, 1970: \&quot;1970-01-01\&quot;  (optional)</param>
        /// <param name="dateLt">Filter based on date strictly less than parameter value. Dates are represented as strings formatted as YYYY-MM-DD. Example: January 1st, 1970: \&quot;1970-01-01\&quot;  (optional)</param>
        /// <param name="dateGe">Filter based on date greater than or equal to parameter value. Dates are represented as strings formatted as YYYY-MM-DD. Example: January 1st, 1970: \&quot;1970-01-01\&quot;  (optional)</param>
        /// <param name="dateGt">Filter based on date strictly greater than parameter value Dates are represented as strings formatted as YYYY-MM-DD. Example: January 1st, 1970: \&quot;1970-01-01\&quot;  (optional)</param>
        /// <param name="lastModified">Filter based on date of last modification. Returns results that were last modified on the date provided as a parameter value. Dates are represented as strings formatted as YYYY-MM-DD. Example: January 1st, 1970: \&quot;1970-01-01\&quot;  (optional)</param>
        /// <param name="lastModifiedLe">Returns results that have been last modified before or on the date provided as a parameter value. Dates are represented as strings formatted as YYYY-MM-DD. Example: January 1st, 1970: \&quot;1970-01-01\&quot;  (optional)</param>
        /// <param name="lastModifiedLt">Returns results that have been last modified strictly before the date provided as a parameter value. Dates are represented as strings formatted as YYYY-MM-DD. Example: January 1st, 1970: \&quot;1970-01-01\&quot;  (optional)</param>
        /// <param name="lastModifiedGe">Returns results that have been last modified after or on the date provided as a parameter value. Dates are represented as strings formatted as YYYY-MM-DD. Example: January 1st, 1970: \&quot;1970-01-01\&quot;  (optional)</param>
        /// <param name="lastModifiedGt">Returns results that have been last modified strictly after the date provided as a parameter value. Dates are represented as strings formatted as YYYY-MM-DD. Example: January 1st, 1970: \&quot;1970-01-01\&quot;  (optional)</param>
        /// <param name="createdDate">Dates are represented as strings formatted as YYYY-MM-DD. Example: January 1st, 1970: \&quot;1970-01-01\&quot;  (optional)</param>
        /// <param name="createdDateLe">Returns results that were created before or on the date provided as a parameter value. Dates are represented as strings formatted as YYYY-MM-DD. Example: January 1st, 1970: \&quot;1970-01-01\&quot;  (optional)</param>
        /// <param name="createdDateLt">Returns results that were created strictly before the date provided as a parameter value. Dates are represented as strings formatted as YYYY-MM-DD. Example: January 1st, 1970: \&quot;1970-01-01\&quot;  (optional)</param>
        /// <param name="createdDateGe">Returns results that were created after or on the date provided as a parameter value. Dates are represented as strings formatted as YYYY-MM-DD. Example: January 1st, 1970: \&quot;1970-01-01\&quot;  (optional)</param>
        /// <param name="createdDateGt">Returns results that were created strictly after the date provided as a parameter value. Dates are represented as strings formatted as YYYY-MM-DD. Example: January 1st, 1970: \&quot;1970-01-01\&quot;  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetJournalEntriesApiResponse"/>&gt;</returns>
        public async Task<IGetJournalEntriesApiResponse?> GetJournalEntriesOrDefaultAsync(string companySlug, Option<int> page = default, Option<int> pageSize = default, Option<DateOnly> date = default, Option<DateOnly> dateLe = default, Option<DateOnly> dateLt = default, Option<DateOnly> dateGe = default, Option<DateOnly> dateGt = default, Option<DateOnly> lastModified = default, Option<DateOnly> lastModifiedLe = default, Option<DateOnly> lastModifiedLt = default, Option<DateOnly> lastModifiedGe = default, Option<DateOnly> lastModifiedGt = default, Option<DateOnly> createdDate = default, Option<DateOnly> createdDateLe = default, Option<DateOnly> createdDateLt = default, Option<DateOnly> createdDateGe = default, Option<DateOnly> createdDateGt = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetJournalEntriesAsync(companySlug, page, pageSize, date, dateLe, dateLt, dateGe, dateGt, lastModified, lastModifiedLe, lastModifiedLt, lastModifiedGe, lastModifiedGt, createdDate, createdDateLe, createdDateLt, createdDateGe, createdDateGt, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  Returns all general journal entries (posteringer) for the specified company.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="page">Returns the number of the page to return. Valid page values are integers from 0 to the total number of pages. Default value is 0.  (optional, default to 0)</param>
        /// <param name="pageSize">Defines the number of entries to return on each page. Maximum number of results that can be returned at one time are 100. Default value is 25.  (optional, default to 25)</param>
        /// <param name="date">Dates are represented as strings formatted as YYYY-MM-DD. Example: January 1st, 1970: \&quot;1970-01-01\&quot;  (optional)</param>
        /// <param name="dateLe">Filter based on date less than or equal to parameter value. Dates are represented as strings formatted as YYYY-MM-DD. Example: January 1st, 1970: \&quot;1970-01-01\&quot;  (optional)</param>
        /// <param name="dateLt">Filter based on date strictly less than parameter value. Dates are represented as strings formatted as YYYY-MM-DD. Example: January 1st, 1970: \&quot;1970-01-01\&quot;  (optional)</param>
        /// <param name="dateGe">Filter based on date greater than or equal to parameter value. Dates are represented as strings formatted as YYYY-MM-DD. Example: January 1st, 1970: \&quot;1970-01-01\&quot;  (optional)</param>
        /// <param name="dateGt">Filter based on date strictly greater than parameter value Dates are represented as strings formatted as YYYY-MM-DD. Example: January 1st, 1970: \&quot;1970-01-01\&quot;  (optional)</param>
        /// <param name="lastModified">Filter based on date of last modification. Returns results that were last modified on the date provided as a parameter value. Dates are represented as strings formatted as YYYY-MM-DD. Example: January 1st, 1970: \&quot;1970-01-01\&quot;  (optional)</param>
        /// <param name="lastModifiedLe">Returns results that have been last modified before or on the date provided as a parameter value. Dates are represented as strings formatted as YYYY-MM-DD. Example: January 1st, 1970: \&quot;1970-01-01\&quot;  (optional)</param>
        /// <param name="lastModifiedLt">Returns results that have been last modified strictly before the date provided as a parameter value. Dates are represented as strings formatted as YYYY-MM-DD. Example: January 1st, 1970: \&quot;1970-01-01\&quot;  (optional)</param>
        /// <param name="lastModifiedGe">Returns results that have been last modified after or on the date provided as a parameter value. Dates are represented as strings formatted as YYYY-MM-DD. Example: January 1st, 1970: \&quot;1970-01-01\&quot;  (optional)</param>
        /// <param name="lastModifiedGt">Returns results that have been last modified strictly after the date provided as a parameter value. Dates are represented as strings formatted as YYYY-MM-DD. Example: January 1st, 1970: \&quot;1970-01-01\&quot;  (optional)</param>
        /// <param name="createdDate">Dates are represented as strings formatted as YYYY-MM-DD. Example: January 1st, 1970: \&quot;1970-01-01\&quot;  (optional)</param>
        /// <param name="createdDateLe">Returns results that were created before or on the date provided as a parameter value. Dates are represented as strings formatted as YYYY-MM-DD. Example: January 1st, 1970: \&quot;1970-01-01\&quot;  (optional)</param>
        /// <param name="createdDateLt">Returns results that were created strictly before the date provided as a parameter value. Dates are represented as strings formatted as YYYY-MM-DD. Example: January 1st, 1970: \&quot;1970-01-01\&quot;  (optional)</param>
        /// <param name="createdDateGe">Returns results that were created after or on the date provided as a parameter value. Dates are represented as strings formatted as YYYY-MM-DD. Example: January 1st, 1970: \&quot;1970-01-01\&quot;  (optional)</param>
        /// <param name="createdDateGt">Returns results that were created strictly after the date provided as a parameter value. Dates are represented as strings formatted as YYYY-MM-DD. Example: January 1st, 1970: \&quot;1970-01-01\&quot;  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetJournalEntriesApiResponse"/>&gt;</returns>
        public async Task<IGetJournalEntriesApiResponse> GetJournalEntriesAsync(string companySlug, Option<int> page = default, Option<int> pageSize = default, Option<DateOnly> date = default, Option<DateOnly> dateLe = default, Option<DateOnly> dateLt = default, Option<DateOnly> dateGe = default, Option<DateOnly> dateGt = default, Option<DateOnly> lastModified = default, Option<DateOnly> lastModifiedLe = default, Option<DateOnly> lastModifiedLt = default, Option<DateOnly> lastModifiedGe = default, Option<DateOnly> lastModifiedGt = default, Option<DateOnly> createdDate = default, Option<DateOnly> createdDateLe = default, Option<DateOnly> createdDateLt = default, Option<DateOnly> createdDateGe = default, Option<DateOnly> createdDateGt = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetJournalEntries(companySlug);

                FormatGetJournalEntries(ref companySlug, ref page, ref pageSize, ref date, ref dateLe, ref dateLt, ref dateGe, ref dateGt, ref lastModified, ref lastModifiedLe, ref lastModifiedLt, ref lastModifiedGe, ref lastModifiedGt, ref createdDate, ref createdDateLe, ref createdDateLt, ref createdDateGe, ref createdDateGt);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/companies/{companySlug}/journalEntries";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BcompanySlug%7D", Uri.EscapeDataString(companySlug.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (page.IsSet)
                        parseQueryStringLocalVar["page"] = ClientUtils.ParameterToString(page.Value);

                    if (pageSize.IsSet)
                        parseQueryStringLocalVar["pageSize"] = ClientUtils.ParameterToString(pageSize.Value);

                    if (date.IsSet)
                        parseQueryStringLocalVar["date"] = ClientUtils.ParameterToString(date.Value);

                    if (dateLe.IsSet)
                        parseQueryStringLocalVar["dateLe"] = ClientUtils.ParameterToString(dateLe.Value);

                    if (dateLt.IsSet)
                        parseQueryStringLocalVar["dateLt"] = ClientUtils.ParameterToString(dateLt.Value);

                    if (dateGe.IsSet)
                        parseQueryStringLocalVar["dateGe"] = ClientUtils.ParameterToString(dateGe.Value);

                    if (dateGt.IsSet)
                        parseQueryStringLocalVar["dateGt"] = ClientUtils.ParameterToString(dateGt.Value);

                    if (lastModified.IsSet)
                        parseQueryStringLocalVar["lastModified"] = ClientUtils.ParameterToString(lastModified.Value);

                    if (lastModifiedLe.IsSet)
                        parseQueryStringLocalVar["lastModifiedLe"] = ClientUtils.ParameterToString(lastModifiedLe.Value);

                    if (lastModifiedLt.IsSet)
                        parseQueryStringLocalVar["lastModifiedLt"] = ClientUtils.ParameterToString(lastModifiedLt.Value);

                    if (lastModifiedGe.IsSet)
                        parseQueryStringLocalVar["lastModifiedGe"] = ClientUtils.ParameterToString(lastModifiedGe.Value);

                    if (lastModifiedGt.IsSet)
                        parseQueryStringLocalVar["lastModifiedGt"] = ClientUtils.ParameterToString(lastModifiedGt.Value);

                    if (createdDate.IsSet)
                        parseQueryStringLocalVar["createdDate"] = ClientUtils.ParameterToString(createdDate.Value);

                    if (createdDateLe.IsSet)
                        parseQueryStringLocalVar["createdDateLe"] = ClientUtils.ParameterToString(createdDateLe.Value);

                    if (createdDateLt.IsSet)
                        parseQueryStringLocalVar["createdDateLt"] = ClientUtils.ParameterToString(createdDateLt.Value);

                    if (createdDateGe.IsSet)
                        parseQueryStringLocalVar["createdDateGe"] = ClientUtils.ParameterToString(createdDateGe.Value);

                    if (createdDateGt.IsSet)
                        parseQueryStringLocalVar["createdDateGt"] = ClientUtils.ParameterToString(createdDateGt.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetJournalEntriesApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetJournalEntriesApiResponse>();

                        GetJournalEntriesApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/companies/{companySlug}/journalEntries", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetJournalEntriesDefaultImplementation(apiResponseLocalVar, companySlug, page, pageSize, date, dateLe, dateLt, dateGe, dateGt, lastModified, lastModifiedLe, lastModifiedLt, lastModifiedGe, lastModifiedGt, createdDate, createdDateLe, createdDateLt, createdDateGe, createdDateGt);

                        Events.ExecuteOnGetJournalEntries(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetJournalEntriesDefaultImplementation(e, "/companies/{companySlug}/journalEntries", uriBuilderLocalVar.Path, companySlug, page, pageSize, date, dateLe, dateLt, dateGe, dateGt, lastModified, lastModifiedLe, lastModifiedLt, lastModifiedGe, lastModifiedGt, createdDate, createdDateLe, createdDateLt, createdDateGe, createdDateGt);
                Events.ExecuteOnErrorGetJournalEntries(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetJournalEntriesApiResponse"/>
        /// </summary>
        public partial class GetJournalEntriesApiResponse : Fiken.Client.ApiResponse, IGetJournalEntriesApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetJournalEntriesApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetJournalEntriesApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetJournalEntriesApiResponse(ILogger<GetJournalEntriesApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<JournalEntry>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<JournalEntry>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<JournalEntry>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetJournalEntry(ref string companySlug, ref long journalEntryId);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="companySlug"></param>
        /// <returns></returns>
        private void ValidateGetJournalEntry(string companySlug)
        {
            if (companySlug == null)
                throw new ArgumentNullException(nameof(companySlug));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="journalEntryId"></param>
        private void AfterGetJournalEntryDefaultImplementation(IGetJournalEntryApiResponse apiResponseLocalVar, string companySlug, long journalEntryId)
        {
            bool suppressDefaultLog = false;
            AfterGetJournalEntry(ref suppressDefaultLog, apiResponseLocalVar, companySlug, journalEntryId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="journalEntryId"></param>
        partial void AfterGetJournalEntry(ref bool suppressDefaultLog, IGetJournalEntryApiResponse apiResponseLocalVar, string companySlug, long journalEntryId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="journalEntryId"></param>
        private void OnErrorGetJournalEntryDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string companySlug, long journalEntryId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetJournalEntry(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, companySlug, journalEntryId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="journalEntryId"></param>
        partial void OnErrorGetJournalEntry(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string companySlug, long journalEntryId);

        /// <summary>
        ///  Returns all journal entries within a given company&#39;s Journal Entry Service
        /// </summary>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="journalEntryId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetJournalEntryApiResponse"/>&gt;</returns>
        public async Task<IGetJournalEntryApiResponse?> GetJournalEntryOrDefaultAsync(string companySlug, long journalEntryId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetJournalEntryAsync(companySlug, journalEntryId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  Returns all journal entries within a given company&#39;s Journal Entry Service
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="journalEntryId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetJournalEntryApiResponse"/>&gt;</returns>
        public async Task<IGetJournalEntryApiResponse> GetJournalEntryAsync(string companySlug, long journalEntryId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetJournalEntry(companySlug);

                FormatGetJournalEntry(ref companySlug, ref journalEntryId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/companies/{companySlug}/journalEntries/{journalEntryId}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BcompanySlug%7D", Uri.EscapeDataString(companySlug.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BjournalEntryId%7D", Uri.EscapeDataString(journalEntryId.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetJournalEntryApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetJournalEntryApiResponse>();

                        GetJournalEntryApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/companies/{companySlug}/journalEntries/{journalEntryId}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetJournalEntryDefaultImplementation(apiResponseLocalVar, companySlug, journalEntryId);

                        Events.ExecuteOnGetJournalEntry(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetJournalEntryDefaultImplementation(e, "/companies/{companySlug}/journalEntries/{journalEntryId}", uriBuilderLocalVar.Path, companySlug, journalEntryId);
                Events.ExecuteOnErrorGetJournalEntry(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetJournalEntryApiResponse"/>
        /// </summary>
        public partial class GetJournalEntryApiResponse : Fiken.Client.ApiResponse, IGetJournalEntryApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetJournalEntryApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetJournalEntryApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetJournalEntryApiResponse(ILogger<GetJournalEntryApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Fiken.Model.JournalEntry? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Fiken.Model.JournalEntry>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Fiken.Model.JournalEntry? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetJournalEntryAttachments(ref string companySlug, ref long journalEntryId);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="companySlug"></param>
        /// <returns></returns>
        private void ValidateGetJournalEntryAttachments(string companySlug)
        {
            if (companySlug == null)
                throw new ArgumentNullException(nameof(companySlug));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="journalEntryId"></param>
        private void AfterGetJournalEntryAttachmentsDefaultImplementation(IGetJournalEntryAttachmentsApiResponse apiResponseLocalVar, string companySlug, long journalEntryId)
        {
            bool suppressDefaultLog = false;
            AfterGetJournalEntryAttachments(ref suppressDefaultLog, apiResponseLocalVar, companySlug, journalEntryId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="journalEntryId"></param>
        partial void AfterGetJournalEntryAttachments(ref bool suppressDefaultLog, IGetJournalEntryAttachmentsApiResponse apiResponseLocalVar, string companySlug, long journalEntryId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="journalEntryId"></param>
        private void OnErrorGetJournalEntryAttachmentsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string companySlug, long journalEntryId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetJournalEntryAttachments(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, companySlug, journalEntryId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="journalEntryId"></param>
        partial void OnErrorGetJournalEntryAttachments(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string companySlug, long journalEntryId);

        /// <summary>
        ///  Returns all attachments for a given Journal Entry
        /// </summary>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="journalEntryId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetJournalEntryAttachmentsApiResponse"/>&gt;</returns>
        public async Task<IGetJournalEntryAttachmentsApiResponse?> GetJournalEntryAttachmentsOrDefaultAsync(string companySlug, long journalEntryId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetJournalEntryAttachmentsAsync(companySlug, journalEntryId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  Returns all attachments for a given Journal Entry
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="journalEntryId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetJournalEntryAttachmentsApiResponse"/>&gt;</returns>
        public async Task<IGetJournalEntryAttachmentsApiResponse> GetJournalEntryAttachmentsAsync(string companySlug, long journalEntryId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetJournalEntryAttachments(companySlug);

                FormatGetJournalEntryAttachments(ref companySlug, ref journalEntryId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/companies/{companySlug}/journalEntries/{journalEntryId}/attachments";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BcompanySlug%7D", Uri.EscapeDataString(companySlug.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BjournalEntryId%7D", Uri.EscapeDataString(journalEntryId.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetJournalEntryAttachmentsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetJournalEntryAttachmentsApiResponse>();

                        GetJournalEntryAttachmentsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/companies/{companySlug}/journalEntries/{journalEntryId}/attachments", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetJournalEntryAttachmentsDefaultImplementation(apiResponseLocalVar, companySlug, journalEntryId);

                        Events.ExecuteOnGetJournalEntryAttachments(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetJournalEntryAttachmentsDefaultImplementation(e, "/companies/{companySlug}/journalEntries/{journalEntryId}/attachments", uriBuilderLocalVar.Path, companySlug, journalEntryId);
                Events.ExecuteOnErrorGetJournalEntryAttachments(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetJournalEntryAttachmentsApiResponse"/>
        /// </summary>
        public partial class GetJournalEntryAttachmentsApiResponse : Fiken.Client.ApiResponse, IGetJournalEntryAttachmentsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetJournalEntryAttachmentsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetJournalEntryAttachmentsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetJournalEntryAttachmentsApiResponse(ILogger<GetJournalEntryAttachmentsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<Attachment>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<Attachment>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<Attachment>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}

// <auto-generated>
/*
 * Fiken API
 *
 *  ## Introduction [Fiken.no](https://fiken.no) is an online accounting system aimed at making accounting easy for small businesses. The API Module allows other systems to integrate with Fiken. This document describes Fiken's API.  ## Using the API Use of this API in production environments on live data is normally associated with a fee for the end user (company). API access costs 99kr per month and can be ordered through the Module access page under Settings in your Fiken account. If you have any questions regarding the API pricing, contact us at <api@fiken.no>.  The API provides two different ways of authorizing requests.    1. OAuth2   2. Personal API tokens  Third parties that wish to integrate with Fiken on behalf of their customers should use the OAuth2 authorization method. In order to develop OAuth2 applications that integrate with this API you must log into your Fiken account and check the box saying that you are a developer (**Rediger konto -> Profil -> Andre innstillinger**). This will allow you to create an App by clicking on the \"API\" tab under Brukerinnstillinger. If you don't have an existing Fiken account you can create a new user and demo company (demoforetak) at no charge. Send an email to <api@fiken.no> to get free access to Fiken for longer than the included 30 day free trial period.   Upon creation of the new App you will be provided a Client ID and Client Secret that are needed for the OAuth2 authorization flow.  This will allow you to use the API during development with up to 5 users. If you would like to use the API with more than 5 users and gain production status, you will need to send an email to <api@fiken.no> to gain full access to the API module.  Fiken customers that wish to integrate their own solutions with this API can use personal API tokens. Personal API tokens can be created in **Rediger konto -> API -> Personlige API-nÃ¸kler**. Note that personal API tokens do not expire.  ## Base URL All URLs start with https://api.fiken.no/api/v2. Note that TLS is required, unencrypted HTTP is not supported. Although we currently redirect HTTP requests to HTTPS, you are not allowed to this with your application as using HTTP is a security risk. In the future we might respond with 403 Forbidden instead.  ## Concurrent requests / rate limiting You are only allowed to make a single concurrent API-request. Sending multiple requests concurrently may result in a 429 error response. If you break this rule you might be banned. In case of a ban please contact us to be unbanned.  API calls may be slowed if you execute more than 4 requests per second.  ## Personal API tokens  Personal API tokens can be created in **Rediger konto -> API**. Personal API tokens never expire and can be revoked from the same place.  To use a personal API token simply send it as a bearer token in the `Authorization` header:      GET https://api.fiken.no/api/v2/companies     Authorization: Bearer <api token>  ## Authorization with OAuth2 Fiken API V2 uses OAuth 2.0 for authorizing API requests. Authorized requests to the API should use an `Authorization` header with the value `Bearer <TOKEN>` where `<TOKEN>` is an access token obtained through the OAuth flow.  ### Authorize Endpoint  To start the OAuth flow in order to obtain an access token for a user, you will first have to get consent from the user. To do this, direct your user to the authorization endpoint:      GET https://fiken.no/oauth/authorize?response_type=code&client_id=CLIENT_ID&redirect_uri=REDIRECT_URI&state=STATE  If the user is logged in and accepts your request, the user is redirected back to your redirect url. If the user is not logged in, the regular Fiken.no login form is presented first, requiring the user to authenticate before accepting or rejecting your request.  If the user rejects the request or if there is an error in your request, the user is redirected back to your redirect url with the parameters `error` and `error_description`. If the user rejected the request the error code will be `access_denied`.  #### Parameters  | Name          | Description                                                                                                      | | :- -- -- -- -- -- - | :- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- | | response_type | **Required** Should always be the value `code`                                                     | | client_id     | **Required** The client id you received from Fiken when you registered your application                          | | redirect_uri  | **Required** The URL in your application where users will be sent with an authorization code after authorization | | state         | **Required** An unguessable random string, used to protect against CSRF attacks                                  |   ### Token Endpoint  If the user accepts your request, Fiken redirects the user back to your `redirect_uri` with a parameter named `code` as well as the state you provided in the previous step in the `state` parameter. This temporary code will expire after a short while.  The temporary authorization code can be exchanged for an access token at the token endpoint.  The token endpoint is protected with Http Basic Authentication and you should use your application client id and client secret as credentials to authenticate.      POST https://fiken.no/oauth/token     Content-Type: application/x-www-form-urlencoded     Authorization: Basic dXNlIHlvdXIgY2xpZW50IGlkOmFuZCBjbGllbnQgc2VjcmV0      grant_type=authorization_code&code=AUTHCODE&redirect_uri=REDIRECT_URI&state=STATE  The response will contain the access token, a refresh token (see below) as well as information about the expiry time for the token.      {       \"access_token\": \"K2QwoFp4ZfugWLWk7Ipu9kni5cyv3luXKQ-GDShvV2g=\",       \"refresh_token\": \"naFOD_j8m6PFGcP0pfImVZlSxKklHLbgj9Hzao4rhg8=\",       \"token_type\": \"bearer\",       \"expires_in\": 86157     }  If an error occurs during the token exchange request, an error object is returned with an error and an error description.      {         \"error\": \"invalid_grant\",         \"error_description\": \"The authorization code is invalid or expired.\"     }  #### Parameters  | Name         | Description                                                                                                      | | :- -- -- -- -- -- | :- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- | | grant_type   | **Required** Should be the value `authorization_code`                                                            | | code         | **Required** The authorization code that was received in the redirect from the authorize endpoint                | | redirect_uri | **Required** The URL in your application where users will be sent with an authorization code after authorization | | state        | **Required** An unguessable random string, used to protect against CSRF attacks                                  |  ### Refresh Tokens  If an access token has expired you can use the refresh token that was sent in the response from the token endpoint to get a new access token.  Note that if the user has revoked the consent to your app, the refresh token will no longer be valid.  To get a new access token from the refresh token, use the token endpoint with the grant type `refresh_token`:      POST https://fiken.no/oauth/token     Content-Type: application/x-www-form-urlencoded     Authorization: Basic dXNlIHlvdXIgY2xpZW50IGlkOmFuZCBjbGllbnQgc2VjcmV0      grant_type=refresh_token&refresh_token=REFRESH_TOKEN  The response contains a fresh access token along with a possibly updated refresh token:      {       \"access_token\": \"K2QwoFp4ZfugWLWk7Ipu9kni5cyv3luXKQ-GDShvV2g=\",       \"refresh_token\": \"naFOD_j8m6PFGcP0pfImVZlSxKklHLbgj9Hzao4rhg8=\",       \"token_type\": \"bearer\",       \"expires_in\": 86157     }  #### Parameters  | Name         | Description                                                                                                      | | :- -- -- -- -- -- | :- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- | | grant_type   | **Required** Should be the value `refresh_token`                                                                 | | refresh_token| **Required** The refresh token last returned for this user from the token endpoint                               |  ### Using Access Tokens in API Requests  To execute API requests on behalf of the end user, send the access token obtained at the token endpoint as a bearer token, as in this example:      GET https://api.fiken.no/api/v2/companies     Authorization: Bearer <access_token_value>  ### Revoking tokens  To revoke an access token and refresh token use the Revoke Token endpoint.  The Revoke Token endpoint disables the application grant, the access token and the corresponding refresh token used to authenticate the call. Other access tokens obtained from the same refresh token are also revoked.      POST https://fiken.no/oauth/revoke     Authorization: Bearer <access_token_value>  The response for a successful revocation is 200/OK.  ### Managing access  The end user can manage which companies a given app has access to under **Rediger konto -> Sikkerhet -> Apper du har gitt tilgang til**.  All companies created after the initial consent has been given need to be actively added so that the app will have access to their information.  Additionally the end user can revoke access to any of their companies' data as well.   ## Try It Out  For each endpoint in the documentation below there is a button *Try It Out*. To invoke the API from this documentation you need an app and you need to authorize usage for you Fiken.no user.  Your app needs to be configured with a redirect URL for this documentation, add `https://api.fiken.no/api/v2/docs/oauth2-redirect.html` to the list of redirect URLs for your app.  Click the padlock symbol on any of the endpoints and enter your `client_id` and `client_secret` and then press *Authorize* to start the OAuth2 authorization flow, then click *Close*.  Enter the required parameters for the endpoint, such as `company_slug`, and then press *Execute* to test.  ## Request  We recommend sending the `X-Request-ID` header with all requests.  ### Request Headers | Request  Header           | Format   | Description                                                       | | - -- -- -- -- -- -- -- -          | - -- -- -- - | - -- -- -- -- -- -- -- -- -- -- -- -- -- --                                     | | `X-Request-ID`            | UUID     | UUID used to identify the request                                 |    ## Response ### Response code All HTTP codes should be expected with their normal semantics. These are some of the common ones:  * **200** for successful GET * **201** for successful POST where you get a Location-header for the created content * **400** when invalid content has be sent (for instance a required field is missing, unexpected fields, wrong format, etc) * **401** when the user is not authenticated * **403** when the user does not have the proper authorization * **404** when the requested content is not found * **405** When you are trying a method to a resource which doesn't support it (i.e. DELETE on an account). * **415** Wrong media type. we accept application/json only.  ### Response Content The default content type on the result of GET requests is application/json. On successful POSTs/PUTs/PATCHs and DELETEs an empty body is returned.  For successful POSTs/PUTs/PATCHs a Location header is given in all cases.  ## Pagination, Sorting & Filtering Pagination, sorting and filtering query parameters are all optional.   | URI                                                                     | Pagination? | Sortable? | Sortable Fields                       | Filterable? | Filtered Fields                                                                                                                         | | :- -- -- -- --                                                              |:- -- -- -- -- -- | :- -- -- -- - | :- -- -- -- -- -- --                        | :- --        | :- --                                                                                                                                    | | https://api.fiken.no/api/v2/companies                                  | Yes         | Yes       | createdDate, name, organizationNumber | No          |                                                                                                                                         | | https://api.fiken.no/api/v2/companies/{companySlug}/accounts           | No          | No        |                                       | Yes         | fromAccount, toAccount                                                                                                                  | | https://api.fiken.no/api/v2/companies/{companySlug}/accountBalances    | Yes         | No        |                                       | Yes         | fromAccount, toAccount                                                                                                                  | | https://api.fiken.no/api/v2/companies/{companySlug}/bankAccounts       | Yes         | No        |                                       | Yes         | inactive                                                                                                                                | | https://api.fiken.no/api/v2/companies/{companySlug}/contacts           | Yes         | Yes       | createdDate, lastModified             | Yes         | supplierNumber, customerNumber, memberNumber, memberNumberString, name, organizationNumber, email, group, lastModified, createdDate, inactive, phoneNumber  | | https://api.fiken.no/api/v2/companies/{companySlug}/creditNotes        | Yes         | No        |                                       | Yes         | issueDate, lastModified, settled, customerId                                                                                            | | https://api.fiken.no/api/v2/companies/{companySlug}/inbox              | Yes         | Yes       | createdDate, name                     | Yes         | status, name                                                                                                                            | | https://api.fiken.no/api/v2/companies/{companySlug}/invoices           | Yes         | No        |                                       | Yes         | issueDate, lastModified, dueDate, settled, customerId, orderReference, invoiceDraftUuid                                                 | | https://api.fiken.no/api/v2/companies/{companySlug}/invoices/drafts    | Yes         | No        |                                       | No          |                                                                                                                                         | | https://api.fiken.no/api/v2/companies/{companySlug}/journalEntries     | Yes         | No        |                                       | Yes         | date                                                                                                                                    | | https://api.fiken.no/api/v2/companies/{companySlug}/offers             | Yes         | No        |                                       | No          |                                                                                                                                         | | https://api.fiken.no/api/v2/companies/{companySlug}/orderConfirmations | Yes         | No        |                                       | No          |                                                                                                                                         | | https://api.fiken.no/api/v2/companies/{companySlug}/products           | Yes         | No        |                                       | Yes         | name, productNumber, active, createdDate, lastModified                                                                                  | | https://api.fiken.no/api/v2/companies/{companySlug}/projects           | Yes         | No        |                                       | Yes         | completed                                                                                                                               | | https://api.fiken.no/api/v2/companies/{companySlug}/purchases          | Yes         | Yes       | createdDate                           | No          | date                                                                                                                                    | | https://api.fiken.no/api/v2/companies/{companySlug}/purchases/drafts   | Yes         | No        |                                       | No          |                                                                                                                                         | | https://api.fiken.no/api/v2/companies/{companySlug}/sales              | Yes         | No        |                                       | Yes         | saleNumber, lastModified, date, contactId                                                                                               | | https://api.fiken.no/api/v2/companies/{companySlug}/sales/drafts       | Yes         | No        |                                       | No          |                                                                                                                                         | | https://api.fiken.no/api/v2/companies/{companySlug}/transactions       | Yes         | No        |                                       | Yes         | createdDate, lastModified                                                                                                               |  ### Pagination By default the API sets `page=0` and `pageSize=25` and returns the first 25 elements in a collection resource, if nothing else is specified. PageSize has a maximum value of 100 meaning that you can only access at most 100 elements at once.  To request a collection resource with pagination, query the resource with the query filters page and pageSize, note that both query parameters need to be set to enable pagination. The page counter starts at 0. The response will contain up to Fiken-Api-Page-Size elements and the response headers below, detailing how many elements the resource has in total and the total number of pages as well.  By default the API returns the resources in the order they were created, if nothing else is specified in the documentation.  #### Pagination Response Headers | Response Header           | Format   | Description                                                       | | - -- -- -- -- -- -- -- -          | - -- -- -- - | - -- -- -- -- -- -- -- -- -- -- -- -- -- --                                     | | `Fiken-Api-Page`          | integer  | From the request header                                           | | `Fiken-Api-Page-Size`     | integer  | From the request header                                           | | `Fiken-Api-Page-Count`    | integer  | The total number of pages in this resource with this page size    | | `Fiken-Api-Result-Count`  | integer  | The total number of elements in this resource                     |  ### Sorting To change the sort order for a resource, set the sortBy query parameter to a sort field in either ascending or descending order. Ex: `https://api.fiken.no/api/v2/companies?sortBy=name%20asc`  ### Filtering Some collections support filtering, and depending on the type of field, different filters can be used. Dates are the most complex, and allow you do apply different filters with different parameter names. For instance, for a field called date, the following mutations are available:  | Parameter | Field | Format    | Description                                   | | - --       |- --    | - --       |- --                                            | |  `date`   |date |yyyy-MM-dd |date equal to parameter value                  | |  `dateLe` |date |yyyy-MM-dd |date less than or equal to parameter value     | |  `dateLt` |date |yyyy-MM-dd |date less than parameter value                 | |  `dateGe` |date |yyyy-MM-dd |date greater than or equal to parameter value  | |  `dateGt` |date |yyyy-MM-dd |date greater than parameter value              |  All date-fields will have these mutations of parameter name that applies  ## Data Types These are simple data-types that are used in several of our objects.  ### Date Dates are represented as strings formatted as yyyy-MM-dd. \"Last modified\" returns the date of last modification of the object.  If the object was never modified after creation, last modified date is equal to created date.   ##### Examples: January 2nd, 1970: \"1970-01-02\"  ### Amount Amounts are always represented as a number, and specifies the number of cents in the amount. Fractions will be ignored.  ##### Examples: One thousand: 100000  One hundred and twelve cents: 10012  ### Account An account is a string with either four digits, or four digits, a colon and five digits (\"reskontro\").  ##### Examples: 3020  1500:10001  ### VAT Code Fiken's VAT codes are based upon Sticos mvakoder. To see all VAT codes go to Fiken support, check the \"Mva kode\"-selector in the Fiken web interface while creating a genereal ledger item (\"Fri postering\").  See below the mapping between VAT codes and types (codes are used at the transaction level while types are used for sales and purchases).  | Vat Code | Vat Type                                                                                                                                 | Valid for Purchases/Sales    |  | - --      |- --                                                                                                                                       | - --                          |                                          |  0/7     |NONE (Ingen - KJÃP_INGEN_MVABEHANDLING/SALG_INNTEKTER_UTEN_MVABEHANDLING)                                                               |Both                          | |  1/3    |HIGH (HÃ¸y - KJÃP/SALG_MED_HÃY_SATS)                                                                                                       |Both                          | |  11/31   |MEDIUM (Middels - KJÃP/SALG_MED_MIDDELS_SATS)                                                                                           |Both                       | |  12/32   |RAW_FISH (RÃ¥fisk - KJÃP/SALG_MED_RÃFISK_SATS)                                                                                           |Both                         | |  13/33   |LOW (Lav - KJÃP/SALG_MED_LAV_SATS)                                                                                                       |Both                          | |  52    |EXEMPT_IMPORT_EXPORT (Fritatt import/export - SALG_UTFÃRSEL_AV_VARER_OG_TJENESTER)                                                        |Sales                      | |  5    |EXEMPT (Fritatt - SALG_FRITATT_FOR_MVA_AVGIFTSFRITT)                                                                                   |Sales                        | |  6    |OUTSIDE (Utenfor - SALG_FRITATT_FOR_MVA_UTENFOR_AVGIFTSOMRÃDET)                                                                           |Sales                      | |  51    |EXEMPT_REVERSE (Fritatt omvendt - SALG_INNENLANDSK_OMSETNING_MED_OMVENDT_AVGIFTPLIKT)                                                   |Sales                      | |  14    |HIGH_DIRECT (HÃ¸y direkt - KUN_KJÃPSMVA_HÃY_SATS)                                                                                       |Purchases                  | |  21    |HIGH_BASIS (HÃ¸y grunnlag - KUN_GRUNNLAG_KJÃPSMVA_HÃY_SATS)                                                                               |Purchases                  | |  15    |MEDIUM_DIRECT (Middels direkte - KUN_KJÃPSMVA_MIDDELS_SATS)                                                                               |Purchases                  | |  22    |MEDIUM_BASIS (Middels grunnlag - KUN_GRUNNLAG_KJÃPSMVA_MIDDELS_SATS)                                                                   |Purchases                  | |  23    |NONE_IMPORT_BASIS (Ingen import grunnlag - KUN_GRUNNLAG_KJÃPSMVA_INGEN_SATS)                                                           |Purchases                  | |  86    |HIGH_FOREIGN_SERVICE_DEDUCTIBLE (Tjeneste utlandet - TJENESTER_KJÃPT_FRA_UTLANDET_MED_FRADRAG_FOR_HÃY_MVA)                               |Purchases                  | |  87    |HIGH_FOREIGN_SERVICE_NONDEDUCTIBLE (Tjeneste utlandet uten fradrag - TJENESTER_KJÃPT_FRA_UTLANDET_UTEN_FRADRAG_FOR_HÃY_MVA)               |Purchases                  | |  88    |LOW_FOREIGN_SERVICE_DEDUCTIBLE (Lav tjeneste utlandet - TJENESTER_KJÃPT_FRA_UTLANDET_MED_FRADRAG_FOR_LAV_MVA)                           |Purchases                  | |  89    |LOW_FOREIGN_SERVICE_NONDEDUCTIBLE (Lav tjeneste utlandet uten fradrag - TJENESTER_KJÃPT_FRA_UTLANDET_UTEN_FRADRAG_FOR_LAV_MVA)           |Purchases                  | |  91    |HIGH_PURCHASE_OF_EMISSIONSTRADING_OR_GOLD_DEDUCTIBLE (Gull - KJÃP_AV_KLIMAKVOTER_ELLER_GULL_MED_FRADRAG_FOR_MVA)                       |Purchases                  | |  92    |HIGH_PURCHASE_OF_EMISSIONSTRADING_OR_GOLD_NONDEDUCTIBLE (Gull uten fradrag - KJÃP_AV_KLIMAKVOTER_ELLER_GULL_UTEN_FRADRAG_FOR_MVA)       |Purchases                  | 
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using Fiken.Client;
using Fiken.Model;
using System.Diagnostics.CodeAnalysis;

namespace Fiken.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IOffersApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        OffersApiEvents Events { get; }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates and adds a new attachment to an offer draft
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="draftId">The draftId (primary key of the returned object) is returned in the GET all drafts call. </param>
        /// <param name="filename">Required. The filename. Must end with either .png, .jpeg, .jpg, .gif or .pdf (optional)</param>
        /// <param name="comment">Not required. (optional)</param>
        /// <param name="file"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAddAttachmentToOfferDraftApiResponse"/>&gt;</returns>
        Task<IAddAttachmentToOfferDraftApiResponse> AddAttachmentToOfferDraftAsync(string companySlug, long draftId, Option<string> filename = default, Option<string> comment = default, Option<System.IO.Stream> file = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates and adds a new attachment to an offer draft
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="draftId">The draftId (primary key of the returned object) is returned in the GET all drafts call. </param>
        /// <param name="filename">Required. The filename. Must end with either .png, .jpeg, .jpg, .gif or .pdf (optional)</param>
        /// <param name="comment">Not required. (optional)</param>
        /// <param name="file"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAddAttachmentToOfferDraftApiResponse"/>?&gt;</returns>
        Task<IAddAttachmentToOfferDraftApiResponse?> AddAttachmentToOfferDraftOrDefaultAsync(string companySlug, long draftId, Option<string> filename = default, Option<string> comment = default, Option<System.IO.Stream> file = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates the first offer number which is then increased by one with every new offer. By sending an empty request body the default is base number (the first offer number will thus be 10001), but can be specified to another starting value.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="counter"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateOfferCounterApiResponse"/>&gt;</returns>
        Task<ICreateOfferCounterApiResponse> CreateOfferCounterAsync(string companySlug, Option<Counter> counter = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates the first offer number which is then increased by one with every new offer. By sending an empty request body the default is base number (the first offer number will thus be 10001), but can be specified to another starting value.
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="counter"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateOfferCounterApiResponse"/>?&gt;</returns>
        Task<ICreateOfferCounterApiResponse?> CreateOfferCounterOrDefaultAsync(string companySlug, Option<Counter> counter = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates an offer draft.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="invoiceishDraftRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateOfferDraftApiResponse"/>&gt;</returns>
        Task<ICreateOfferDraftApiResponse> CreateOfferDraftAsync(string companySlug, InvoiceishDraftRequest invoiceishDraftRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates an offer draft.
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="invoiceishDraftRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateOfferDraftApiResponse"/>?&gt;</returns>
        Task<ICreateOfferDraftApiResponse?> CreateOfferDraftOrDefaultAsync(string companySlug, InvoiceishDraftRequest invoiceishDraftRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates an offer from an already created draft.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="draftId">The draftId (primary key of the returned object) is returned in the GET all drafts call. </param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateOfferFromDraftApiResponse"/>&gt;</returns>
        Task<ICreateOfferFromDraftApiResponse> CreateOfferFromDraftAsync(string companySlug, long draftId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates an offer from an already created draft.
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="draftId">The draftId (primary key of the returned object) is returned in the GET all drafts call. </param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateOfferFromDraftApiResponse"/>?&gt;</returns>
        Task<ICreateOfferFromDraftApiResponse?> CreateOfferFromDraftOrDefaultAsync(string companySlug, long draftId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete offer draft with specified id.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="draftId">The draftId (primary key of the returned object) is returned in the GET all drafts call. </param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteOfferDraftApiResponse"/>&gt;</returns>
        Task<IDeleteOfferDraftApiResponse> DeleteOfferDraftAsync(string companySlug, long draftId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete offer draft with specified id.
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="draftId">The draftId (primary key of the returned object) is returned in the GET all drafts call. </param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteOfferDraftApiResponse"/>?&gt;</returns>
        Task<IDeleteOfferDraftApiResponse?> DeleteOfferDraftOrDefaultAsync(string companySlug, long draftId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns offer with specified id.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="offerId">The offerId (primary key of the returned object) is returned as the first field in the GET all offers call </param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetOfferApiResponse"/>&gt;</returns>
        Task<IGetOfferApiResponse> GetOfferAsync(string companySlug, string offerId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns offer with specified id.
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="offerId">The offerId (primary key of the returned object) is returned as the first field in the GET all offers call </param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetOfferApiResponse"/>?&gt;</returns>
        Task<IGetOfferApiResponse?> GetOfferOrDefaultAsync(string companySlug, string offerId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves the counter for offers if it has been created 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetOfferCounterApiResponse"/>&gt;</returns>
        Task<IGetOfferCounterApiResponse> GetOfferCounterAsync(string companySlug, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves the counter for offers if it has been created 
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetOfferCounterApiResponse"/>?&gt;</returns>
        Task<IGetOfferCounterApiResponse?> GetOfferCounterOrDefaultAsync(string companySlug, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns offer draft with specified id.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="draftId">The draftId (primary key of the returned object) is returned in the GET all drafts call. </param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetOfferDraftApiResponse"/>&gt;</returns>
        Task<IGetOfferDraftApiResponse> GetOfferDraftAsync(string companySlug, long draftId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns offer draft with specified id.
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="draftId">The draftId (primary key of the returned object) is returned in the GET all drafts call. </param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetOfferDraftApiResponse"/>?&gt;</returns>
        Task<IGetOfferDraftApiResponse?> GetOfferDraftOrDefaultAsync(string companySlug, long draftId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns all attachments for specified draft.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="draftId">The draftId (primary key of the returned object) is returned in the GET all drafts call. </param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetOfferDraftAttachmentsApiResponse"/>&gt;</returns>
        Task<IGetOfferDraftAttachmentsApiResponse> GetOfferDraftAttachmentsAsync(string companySlug, long draftId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns all attachments for specified draft.
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="draftId">The draftId (primary key of the returned object) is returned in the GET all drafts call. </param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetOfferDraftAttachmentsApiResponse"/>?&gt;</returns>
        Task<IGetOfferDraftAttachmentsApiResponse?> GetOfferDraftAttachmentsOrDefaultAsync(string companySlug, long draftId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns all offer drafts for given company.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="page">Returns the number of the page to return. Valid page values are integers from 0 to the total number of pages. Default value is 0.  (optional, default to 0)</param>
        /// <param name="pageSize">Defines the number of entries to return on each page. Maximum number of results that can be returned at one time are 100. Default value is 25.  (optional, default to 25)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetOfferDraftsApiResponse"/>&gt;</returns>
        Task<IGetOfferDraftsApiResponse> GetOfferDraftsAsync(string companySlug, Option<int> page = default, Option<int> pageSize = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns all offer drafts for given company.
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="page">Returns the number of the page to return. Valid page values are integers from 0 to the total number of pages. Default value is 0.  (optional, default to 0)</param>
        /// <param name="pageSize">Defines the number of entries to return on each page. Maximum number of results that can be returned at one time are 100. Default value is 25.  (optional, default to 25)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetOfferDraftsApiResponse"/>?&gt;</returns>
        Task<IGetOfferDraftsApiResponse?> GetOfferDraftsOrDefaultAsync(string companySlug, Option<int> page = default, Option<int> pageSize = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns all offers for given company
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="page">Returns the number of the page to return. Valid page values are integers from 0 to the total number of pages. Default value is 0.  (optional, default to 0)</param>
        /// <param name="pageSize">Defines the number of entries to return on each page. Maximum number of results that can be returned at one time are 100. Default value is 25.  (optional, default to 25)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetOffersApiResponse"/>&gt;</returns>
        Task<IGetOffersApiResponse> GetOffersAsync(string companySlug, Option<int> page = default, Option<int> pageSize = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns all offers for given company
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="page">Returns the number of the page to return. Valid page values are integers from 0 to the total number of pages. Default value is 0.  (optional, default to 0)</param>
        /// <param name="pageSize">Defines the number of entries to return on each page. Maximum number of results that can be returned at one time are 100. Default value is 25.  (optional, default to 25)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetOffersApiResponse"/>?&gt;</returns>
        Task<IGetOffersApiResponse?> GetOffersOrDefaultAsync(string companySlug, Option<int> page = default, Option<int> pageSize = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates offer draft with provided id. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="draftId">The draftId (primary key of the returned object) is returned in the GET all drafts call. </param>
        /// <param name="invoiceishDraftRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateOfferDraftApiResponse"/>&gt;</returns>
        Task<IUpdateOfferDraftApiResponse> UpdateOfferDraftAsync(string companySlug, long draftId, InvoiceishDraftRequest invoiceishDraftRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates offer draft with provided id. 
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="draftId">The draftId (primary key of the returned object) is returned in the GET all drafts call. </param>
        /// <param name="invoiceishDraftRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateOfferDraftApiResponse"/>?&gt;</returns>
        Task<IUpdateOfferDraftApiResponse?> UpdateOfferDraftOrDefaultAsync(string companySlug, long draftId, InvoiceishDraftRequest invoiceishDraftRequest, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IAddAttachmentToOfferDraftApiResponse"/>
    /// </summary>
    public interface IAddAttachmentToOfferDraftApiResponse : Fiken.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 201 Created
        /// </summary>
        /// <returns></returns>
        bool IsCreated { get; }
    }

    /// <summary>
    /// The <see cref="ICreateOfferCounterApiResponse"/>
    /// </summary>
    public interface ICreateOfferCounterApiResponse : Fiken.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 201 Created
        /// </summary>
        /// <returns></returns>
        bool IsCreated { get; }
    }

    /// <summary>
    /// The <see cref="ICreateOfferDraftApiResponse"/>
    /// </summary>
    public interface ICreateOfferDraftApiResponse : Fiken.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 201 Created
        /// </summary>
        /// <returns></returns>
        bool IsCreated { get; }
    }

    /// <summary>
    /// The <see cref="ICreateOfferFromDraftApiResponse"/>
    /// </summary>
    public interface ICreateOfferFromDraftApiResponse : Fiken.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 201 Created
        /// </summary>
        /// <returns></returns>
        bool IsCreated { get; }
    }

    /// <summary>
    /// The <see cref="IDeleteOfferDraftApiResponse"/>
    /// </summary>
    public interface IDeleteOfferDraftApiResponse : Fiken.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 204 NoContent
        /// </summary>
        /// <returns></returns>
        bool IsNoContent { get; }
    }

    /// <summary>
    /// The <see cref="IGetOfferApiResponse"/>
    /// </summary>
    public interface IGetOfferApiResponse : Fiken.Client.IApiResponse, IOk<Fiken.Model.Offer?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetOfferCounterApiResponse"/>
    /// </summary>
    public interface IGetOfferCounterApiResponse : Fiken.Client.IApiResponse, IOk<Fiken.Model.Counter?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetOfferDraftApiResponse"/>
    /// </summary>
    public interface IGetOfferDraftApiResponse : Fiken.Client.IApiResponse, IOk<Fiken.Model.InvoiceishDraftResult?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetOfferDraftAttachmentsApiResponse"/>
    /// </summary>
    public interface IGetOfferDraftAttachmentsApiResponse : Fiken.Client.IApiResponse, IOk<List<Attachment>?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetOfferDraftsApiResponse"/>
    /// </summary>
    public interface IGetOfferDraftsApiResponse : Fiken.Client.IApiResponse, IOk<List<InvoiceishDraftResult>?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetOffersApiResponse"/>
    /// </summary>
    public interface IGetOffersApiResponse : Fiken.Client.IApiResponse, IOk<List<Offer>?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IUpdateOfferDraftApiResponse"/>
    /// </summary>
    public interface IUpdateOfferDraftApiResponse : Fiken.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 201 Created
        /// </summary>
        /// <returns></returns>
        bool IsCreated { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class OffersApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnAddAttachmentToOfferDraft;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorAddAttachmentToOfferDraft;

        internal void ExecuteOnAddAttachmentToOfferDraft(OffersApi.AddAttachmentToOfferDraftApiResponse apiResponse)
        {
            OnAddAttachmentToOfferDraft?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorAddAttachmentToOfferDraft(Exception exception)
        {
            OnErrorAddAttachmentToOfferDraft?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnCreateOfferCounter;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorCreateOfferCounter;

        internal void ExecuteOnCreateOfferCounter(OffersApi.CreateOfferCounterApiResponse apiResponse)
        {
            OnCreateOfferCounter?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorCreateOfferCounter(Exception exception)
        {
            OnErrorCreateOfferCounter?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnCreateOfferDraft;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorCreateOfferDraft;

        internal void ExecuteOnCreateOfferDraft(OffersApi.CreateOfferDraftApiResponse apiResponse)
        {
            OnCreateOfferDraft?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorCreateOfferDraft(Exception exception)
        {
            OnErrorCreateOfferDraft?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnCreateOfferFromDraft;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorCreateOfferFromDraft;

        internal void ExecuteOnCreateOfferFromDraft(OffersApi.CreateOfferFromDraftApiResponse apiResponse)
        {
            OnCreateOfferFromDraft?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorCreateOfferFromDraft(Exception exception)
        {
            OnErrorCreateOfferFromDraft?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnDeleteOfferDraft;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorDeleteOfferDraft;

        internal void ExecuteOnDeleteOfferDraft(OffersApi.DeleteOfferDraftApiResponse apiResponse)
        {
            OnDeleteOfferDraft?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDeleteOfferDraft(Exception exception)
        {
            OnErrorDeleteOfferDraft?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetOffer;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetOffer;

        internal void ExecuteOnGetOffer(OffersApi.GetOfferApiResponse apiResponse)
        {
            OnGetOffer?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetOffer(Exception exception)
        {
            OnErrorGetOffer?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetOfferCounter;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetOfferCounter;

        internal void ExecuteOnGetOfferCounter(OffersApi.GetOfferCounterApiResponse apiResponse)
        {
            OnGetOfferCounter?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetOfferCounter(Exception exception)
        {
            OnErrorGetOfferCounter?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetOfferDraft;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetOfferDraft;

        internal void ExecuteOnGetOfferDraft(OffersApi.GetOfferDraftApiResponse apiResponse)
        {
            OnGetOfferDraft?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetOfferDraft(Exception exception)
        {
            OnErrorGetOfferDraft?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetOfferDraftAttachments;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetOfferDraftAttachments;

        internal void ExecuteOnGetOfferDraftAttachments(OffersApi.GetOfferDraftAttachmentsApiResponse apiResponse)
        {
            OnGetOfferDraftAttachments?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetOfferDraftAttachments(Exception exception)
        {
            OnErrorGetOfferDraftAttachments?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetOfferDrafts;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetOfferDrafts;

        internal void ExecuteOnGetOfferDrafts(OffersApi.GetOfferDraftsApiResponse apiResponse)
        {
            OnGetOfferDrafts?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetOfferDrafts(Exception exception)
        {
            OnErrorGetOfferDrafts?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetOffers;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetOffers;

        internal void ExecuteOnGetOffers(OffersApi.GetOffersApiResponse apiResponse)
        {
            OnGetOffers?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetOffers(Exception exception)
        {
            OnErrorGetOffers?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnUpdateOfferDraft;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorUpdateOfferDraft;

        internal void ExecuteOnUpdateOfferDraft(OffersApi.UpdateOfferDraftApiResponse apiResponse)
        {
            OnUpdateOfferDraft?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorUpdateOfferDraft(Exception exception)
        {
            OnErrorUpdateOfferDraft?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class OffersApi : IOffersApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<OffersApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public OffersApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="OauthTokenProvider"/>
        /// </summary>
        public TokenProvider<OAuthToken> OauthTokenProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="OffersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public OffersApi(ILogger<OffersApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, OffersApiEvents offersApiEvents,
            TokenProvider<OAuthToken> oauthTokenProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<OffersApi>();
            HttpClient = httpClient;
            Events = offersApiEvents;
            OauthTokenProvider = oauthTokenProvider;
        }

        partial void FormatAddAttachmentToOfferDraft(ref string companySlug, ref long draftId, ref Option<string> filename, ref Option<string> comment, ref Option<System.IO.Stream> file);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="companySlug"></param>
        /// <param name="filename"></param>
        /// <param name="comment"></param>
        /// <param name="file"></param>
        /// <returns></returns>
        private void ValidateAddAttachmentToOfferDraft(string companySlug, Option<string> filename, Option<string> comment, Option<System.IO.Stream> file)
        {
            if (companySlug == null)
                throw new ArgumentNullException(nameof(companySlug));

            if (filename.IsSet && filename.Value == null)
                throw new ArgumentNullException(nameof(filename));

            if (comment.IsSet && comment.Value == null)
                throw new ArgumentNullException(nameof(comment));

            if (file.IsSet && file.Value == null)
                throw new ArgumentNullException(nameof(file));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="draftId"></param>
        /// <param name="filename"></param>
        /// <param name="comment"></param>
        /// <param name="file"></param>
        private void AfterAddAttachmentToOfferDraftDefaultImplementation(IAddAttachmentToOfferDraftApiResponse apiResponseLocalVar, string companySlug, long draftId, Option<string> filename, Option<string> comment, Option<System.IO.Stream> file)
        {
            bool suppressDefaultLog = false;
            AfterAddAttachmentToOfferDraft(ref suppressDefaultLog, apiResponseLocalVar, companySlug, draftId, filename, comment, file);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="draftId"></param>
        /// <param name="filename"></param>
        /// <param name="comment"></param>
        /// <param name="file"></param>
        partial void AfterAddAttachmentToOfferDraft(ref bool suppressDefaultLog, IAddAttachmentToOfferDraftApiResponse apiResponseLocalVar, string companySlug, long draftId, Option<string> filename, Option<string> comment, Option<System.IO.Stream> file);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="draftId"></param>
        /// <param name="filename"></param>
        /// <param name="comment"></param>
        /// <param name="file"></param>
        private void OnErrorAddAttachmentToOfferDraftDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string companySlug, long draftId, Option<string> filename, Option<string> comment, Option<System.IO.Stream> file)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorAddAttachmentToOfferDraft(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, companySlug, draftId, filename, comment, file);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="draftId"></param>
        /// <param name="filename"></param>
        /// <param name="comment"></param>
        /// <param name="file"></param>
        partial void OnErrorAddAttachmentToOfferDraft(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string companySlug, long draftId, Option<string> filename, Option<string> comment, Option<System.IO.Stream> file);

        /// <summary>
        ///  Creates and adds a new attachment to an offer draft
        /// </summary>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="draftId">The draftId (primary key of the returned object) is returned in the GET all drafts call. </param>
        /// <param name="filename">Required. The filename. Must end with either .png, .jpeg, .jpg, .gif or .pdf (optional)</param>
        /// <param name="comment">Not required. (optional)</param>
        /// <param name="file"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAddAttachmentToOfferDraftApiResponse"/>&gt;</returns>
        public async Task<IAddAttachmentToOfferDraftApiResponse?> AddAttachmentToOfferDraftOrDefaultAsync(string companySlug, long draftId, Option<string> filename = default, Option<string> comment = default, Option<System.IO.Stream> file = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await AddAttachmentToOfferDraftAsync(companySlug, draftId, filename, comment, file, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  Creates and adds a new attachment to an offer draft
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="draftId">The draftId (primary key of the returned object) is returned in the GET all drafts call. </param>
        /// <param name="filename">Required. The filename. Must end with either .png, .jpeg, .jpg, .gif or .pdf (optional)</param>
        /// <param name="comment">Not required. (optional)</param>
        /// <param name="file"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAddAttachmentToOfferDraftApiResponse"/>&gt;</returns>
        public async Task<IAddAttachmentToOfferDraftApiResponse> AddAttachmentToOfferDraftAsync(string companySlug, long draftId, Option<string> filename = default, Option<string> comment = default, Option<System.IO.Stream> file = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateAddAttachmentToOfferDraft(companySlug, filename, comment, file);

                FormatAddAttachmentToOfferDraft(ref companySlug, ref draftId, ref filename, ref comment, ref file);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/companies/{companySlug}/offers/drafts/{draftId}/attachments";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BcompanySlug%7D", Uri.EscapeDataString(companySlug.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BdraftId%7D", Uri.EscapeDataString(draftId.ToString()));

                    MultipartContent multipartContentLocalVar = new MultipartContent();

                    httpRequestMessageLocalVar.Content = multipartContentLocalVar;

                    List<KeyValuePair<string?, string?>> formParameterLocalVars = new List<KeyValuePair<string?, string?>>();

                    multipartContentLocalVar.Add(new FormUrlEncodedContent(formParameterLocalVars));                    if (filename.IsSet)
                        formParameterLocalVars.Add(new KeyValuePair<string?, string?>("filename", ClientUtils.ParameterToString(filename.Value)));

                    if (comment.IsSet)
                        formParameterLocalVars.Add(new KeyValuePair<string?, string?>("comment", ClientUtils.ParameterToString(comment.Value)));

                    if (file.IsSet)
                        multipartContentLocalVar.Add(new StreamContent(file.Value));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "multipart/form-data"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<AddAttachmentToOfferDraftApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<AddAttachmentToOfferDraftApiResponse>();

                        AddAttachmentToOfferDraftApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/companies/{companySlug}/offers/drafts/{draftId}/attachments", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterAddAttachmentToOfferDraftDefaultImplementation(apiResponseLocalVar, companySlug, draftId, filename, comment, file);

                        Events.ExecuteOnAddAttachmentToOfferDraft(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorAddAttachmentToOfferDraftDefaultImplementation(e, "/companies/{companySlug}/offers/drafts/{draftId}/attachments", uriBuilderLocalVar.Path, companySlug, draftId, filename, comment, file);
                Events.ExecuteOnErrorAddAttachmentToOfferDraft(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="AddAttachmentToOfferDraftApiResponse"/>
        /// </summary>
        public partial class AddAttachmentToOfferDraftApiResponse : Fiken.Client.ApiResponse, IAddAttachmentToOfferDraftApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<AddAttachmentToOfferDraftApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="AddAttachmentToOfferDraftApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public AddAttachmentToOfferDraftApiResponse(ILogger<AddAttachmentToOfferDraftApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public bool IsCreated => 201 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatCreateOfferCounter(ref string companySlug, Option<Counter> counter);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="companySlug"></param>
        /// <param name="counter"></param>
        /// <returns></returns>
        private void ValidateCreateOfferCounter(string companySlug, Option<Counter> counter)
        {
            if (companySlug == null)
                throw new ArgumentNullException(nameof(companySlug));

            if (counter.IsSet && counter.Value == null)
                throw new ArgumentNullException(nameof(counter));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="counter"></param>
        private void AfterCreateOfferCounterDefaultImplementation(ICreateOfferCounterApiResponse apiResponseLocalVar, string companySlug, Option<Counter> counter)
        {
            bool suppressDefaultLog = false;
            AfterCreateOfferCounter(ref suppressDefaultLog, apiResponseLocalVar, companySlug, counter);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="counter"></param>
        partial void AfterCreateOfferCounter(ref bool suppressDefaultLog, ICreateOfferCounterApiResponse apiResponseLocalVar, string companySlug, Option<Counter> counter);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="counter"></param>
        private void OnErrorCreateOfferCounterDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string companySlug, Option<Counter> counter)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorCreateOfferCounter(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, companySlug, counter);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="counter"></param>
        partial void OnErrorCreateOfferCounter(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string companySlug, Option<Counter> counter);

        /// <summary>
        ///  Creates the first offer number which is then increased by one with every new offer. By sending an empty request body the default is base number (the first offer number will thus be 10001), but can be specified to another starting value.
        /// </summary>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="counter"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateOfferCounterApiResponse"/>&gt;</returns>
        public async Task<ICreateOfferCounterApiResponse?> CreateOfferCounterOrDefaultAsync(string companySlug, Option<Counter> counter = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await CreateOfferCounterAsync(companySlug, counter, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  Creates the first offer number which is then increased by one with every new offer. By sending an empty request body the default is base number (the first offer number will thus be 10001), but can be specified to another starting value.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="counter"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateOfferCounterApiResponse"/>&gt;</returns>
        public async Task<ICreateOfferCounterApiResponse> CreateOfferCounterAsync(string companySlug, Option<Counter> counter = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateCreateOfferCounter(companySlug, counter);

                FormatCreateOfferCounter(ref companySlug, counter);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/companies/{companySlug}/offers/counter";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BcompanySlug%7D", Uri.EscapeDataString(companySlug.ToString()));

                    if (counter.IsSet)
                        httpRequestMessageLocalVar.Content = (counter.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(counter.Value, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<CreateOfferCounterApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<CreateOfferCounterApiResponse>();

                        CreateOfferCounterApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/companies/{companySlug}/offers/counter", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterCreateOfferCounterDefaultImplementation(apiResponseLocalVar, companySlug, counter);

                        Events.ExecuteOnCreateOfferCounter(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorCreateOfferCounterDefaultImplementation(e, "/companies/{companySlug}/offers/counter", uriBuilderLocalVar.Path, companySlug, counter);
                Events.ExecuteOnErrorCreateOfferCounter(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="CreateOfferCounterApiResponse"/>
        /// </summary>
        public partial class CreateOfferCounterApiResponse : Fiken.Client.ApiResponse, ICreateOfferCounterApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<CreateOfferCounterApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="CreateOfferCounterApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public CreateOfferCounterApiResponse(ILogger<CreateOfferCounterApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public bool IsCreated => 201 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatCreateOfferDraft(ref string companySlug, InvoiceishDraftRequest invoiceishDraftRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="companySlug"></param>
        /// <param name="invoiceishDraftRequest"></param>
        /// <returns></returns>
        private void ValidateCreateOfferDraft(string companySlug, InvoiceishDraftRequest invoiceishDraftRequest)
        {
            if (companySlug == null)
                throw new ArgumentNullException(nameof(companySlug));

            if (invoiceishDraftRequest == null)
                throw new ArgumentNullException(nameof(invoiceishDraftRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="invoiceishDraftRequest"></param>
        private void AfterCreateOfferDraftDefaultImplementation(ICreateOfferDraftApiResponse apiResponseLocalVar, string companySlug, InvoiceishDraftRequest invoiceishDraftRequest)
        {
            bool suppressDefaultLog = false;
            AfterCreateOfferDraft(ref suppressDefaultLog, apiResponseLocalVar, companySlug, invoiceishDraftRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="invoiceishDraftRequest"></param>
        partial void AfterCreateOfferDraft(ref bool suppressDefaultLog, ICreateOfferDraftApiResponse apiResponseLocalVar, string companySlug, InvoiceishDraftRequest invoiceishDraftRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="invoiceishDraftRequest"></param>
        private void OnErrorCreateOfferDraftDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string companySlug, InvoiceishDraftRequest invoiceishDraftRequest)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorCreateOfferDraft(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, companySlug, invoiceishDraftRequest);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="invoiceishDraftRequest"></param>
        partial void OnErrorCreateOfferDraft(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string companySlug, InvoiceishDraftRequest invoiceishDraftRequest);

        /// <summary>
        ///  Creates an offer draft.
        /// </summary>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="invoiceishDraftRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateOfferDraftApiResponse"/>&gt;</returns>
        public async Task<ICreateOfferDraftApiResponse?> CreateOfferDraftOrDefaultAsync(string companySlug, InvoiceishDraftRequest invoiceishDraftRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await CreateOfferDraftAsync(companySlug, invoiceishDraftRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  Creates an offer draft.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="invoiceishDraftRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateOfferDraftApiResponse"/>&gt;</returns>
        public async Task<ICreateOfferDraftApiResponse> CreateOfferDraftAsync(string companySlug, InvoiceishDraftRequest invoiceishDraftRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateCreateOfferDraft(companySlug, invoiceishDraftRequest);

                FormatCreateOfferDraft(ref companySlug, invoiceishDraftRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/companies/{companySlug}/offers/drafts";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BcompanySlug%7D", Uri.EscapeDataString(companySlug.ToString()));

                    httpRequestMessageLocalVar.Content = (invoiceishDraftRequest as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(invoiceishDraftRequest, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<CreateOfferDraftApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<CreateOfferDraftApiResponse>();

                        CreateOfferDraftApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/companies/{companySlug}/offers/drafts", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterCreateOfferDraftDefaultImplementation(apiResponseLocalVar, companySlug, invoiceishDraftRequest);

                        Events.ExecuteOnCreateOfferDraft(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorCreateOfferDraftDefaultImplementation(e, "/companies/{companySlug}/offers/drafts", uriBuilderLocalVar.Path, companySlug, invoiceishDraftRequest);
                Events.ExecuteOnErrorCreateOfferDraft(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="CreateOfferDraftApiResponse"/>
        /// </summary>
        public partial class CreateOfferDraftApiResponse : Fiken.Client.ApiResponse, ICreateOfferDraftApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<CreateOfferDraftApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="CreateOfferDraftApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public CreateOfferDraftApiResponse(ILogger<CreateOfferDraftApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public bool IsCreated => 201 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatCreateOfferFromDraft(ref string companySlug, ref long draftId);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="companySlug"></param>
        /// <returns></returns>
        private void ValidateCreateOfferFromDraft(string companySlug)
        {
            if (companySlug == null)
                throw new ArgumentNullException(nameof(companySlug));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="draftId"></param>
        private void AfterCreateOfferFromDraftDefaultImplementation(ICreateOfferFromDraftApiResponse apiResponseLocalVar, string companySlug, long draftId)
        {
            bool suppressDefaultLog = false;
            AfterCreateOfferFromDraft(ref suppressDefaultLog, apiResponseLocalVar, companySlug, draftId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="draftId"></param>
        partial void AfterCreateOfferFromDraft(ref bool suppressDefaultLog, ICreateOfferFromDraftApiResponse apiResponseLocalVar, string companySlug, long draftId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="draftId"></param>
        private void OnErrorCreateOfferFromDraftDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string companySlug, long draftId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorCreateOfferFromDraft(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, companySlug, draftId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="draftId"></param>
        partial void OnErrorCreateOfferFromDraft(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string companySlug, long draftId);

        /// <summary>
        ///  Creates an offer from an already created draft.
        /// </summary>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="draftId">The draftId (primary key of the returned object) is returned in the GET all drafts call. </param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateOfferFromDraftApiResponse"/>&gt;</returns>
        public async Task<ICreateOfferFromDraftApiResponse?> CreateOfferFromDraftOrDefaultAsync(string companySlug, long draftId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await CreateOfferFromDraftAsync(companySlug, draftId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  Creates an offer from an already created draft.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="draftId">The draftId (primary key of the returned object) is returned in the GET all drafts call. </param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateOfferFromDraftApiResponse"/>&gt;</returns>
        public async Task<ICreateOfferFromDraftApiResponse> CreateOfferFromDraftAsync(string companySlug, long draftId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateCreateOfferFromDraft(companySlug);

                FormatCreateOfferFromDraft(ref companySlug, ref draftId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/companies/{companySlug}/offers/drafts/{draftId}/createOffer";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BcompanySlug%7D", Uri.EscapeDataString(companySlug.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BdraftId%7D", Uri.EscapeDataString(draftId.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<CreateOfferFromDraftApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<CreateOfferFromDraftApiResponse>();

                        CreateOfferFromDraftApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/companies/{companySlug}/offers/drafts/{draftId}/createOffer", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterCreateOfferFromDraftDefaultImplementation(apiResponseLocalVar, companySlug, draftId);

                        Events.ExecuteOnCreateOfferFromDraft(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorCreateOfferFromDraftDefaultImplementation(e, "/companies/{companySlug}/offers/drafts/{draftId}/createOffer", uriBuilderLocalVar.Path, companySlug, draftId);
                Events.ExecuteOnErrorCreateOfferFromDraft(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="CreateOfferFromDraftApiResponse"/>
        /// </summary>
        public partial class CreateOfferFromDraftApiResponse : Fiken.Client.ApiResponse, ICreateOfferFromDraftApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<CreateOfferFromDraftApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="CreateOfferFromDraftApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public CreateOfferFromDraftApiResponse(ILogger<CreateOfferFromDraftApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public bool IsCreated => 201 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatDeleteOfferDraft(ref string companySlug, ref long draftId);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="companySlug"></param>
        /// <returns></returns>
        private void ValidateDeleteOfferDraft(string companySlug)
        {
            if (companySlug == null)
                throw new ArgumentNullException(nameof(companySlug));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="draftId"></param>
        private void AfterDeleteOfferDraftDefaultImplementation(IDeleteOfferDraftApiResponse apiResponseLocalVar, string companySlug, long draftId)
        {
            bool suppressDefaultLog = false;
            AfterDeleteOfferDraft(ref suppressDefaultLog, apiResponseLocalVar, companySlug, draftId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="draftId"></param>
        partial void AfterDeleteOfferDraft(ref bool suppressDefaultLog, IDeleteOfferDraftApiResponse apiResponseLocalVar, string companySlug, long draftId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="draftId"></param>
        private void OnErrorDeleteOfferDraftDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string companySlug, long draftId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorDeleteOfferDraft(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, companySlug, draftId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="draftId"></param>
        partial void OnErrorDeleteOfferDraft(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string companySlug, long draftId);

        /// <summary>
        ///  Delete offer draft with specified id.
        /// </summary>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="draftId">The draftId (primary key of the returned object) is returned in the GET all drafts call. </param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteOfferDraftApiResponse"/>&gt;</returns>
        public async Task<IDeleteOfferDraftApiResponse?> DeleteOfferDraftOrDefaultAsync(string companySlug, long draftId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DeleteOfferDraftAsync(companySlug, draftId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  Delete offer draft with specified id.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="draftId">The draftId (primary key of the returned object) is returned in the GET all drafts call. </param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteOfferDraftApiResponse"/>&gt;</returns>
        public async Task<IDeleteOfferDraftApiResponse> DeleteOfferDraftAsync(string companySlug, long draftId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateDeleteOfferDraft(companySlug);

                FormatDeleteOfferDraft(ref companySlug, ref draftId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/companies/{companySlug}/offers/drafts/{draftId}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BcompanySlug%7D", Uri.EscapeDataString(companySlug.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BdraftId%7D", Uri.EscapeDataString(draftId.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    httpRequestMessageLocalVar.Method = HttpMethod.Delete;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<DeleteOfferDraftApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DeleteOfferDraftApiResponse>();

                        DeleteOfferDraftApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/companies/{companySlug}/offers/drafts/{draftId}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterDeleteOfferDraftDefaultImplementation(apiResponseLocalVar, companySlug, draftId);

                        Events.ExecuteOnDeleteOfferDraft(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDeleteOfferDraftDefaultImplementation(e, "/companies/{companySlug}/offers/drafts/{draftId}", uriBuilderLocalVar.Path, companySlug, draftId);
                Events.ExecuteOnErrorDeleteOfferDraft(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DeleteOfferDraftApiResponse"/>
        /// </summary>
        public partial class DeleteOfferDraftApiResponse : Fiken.Client.ApiResponse, IDeleteOfferDraftApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DeleteOfferDraftApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DeleteOfferDraftApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeleteOfferDraftApiResponse(ILogger<DeleteOfferDraftApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 204 NoContent
            /// </summary>
            /// <returns></returns>
            public bool IsNoContent => 204 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetOffer(ref string companySlug, ref string offerId);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="companySlug"></param>
        /// <param name="offerId"></param>
        /// <returns></returns>
        private void ValidateGetOffer(string companySlug, string offerId)
        {
            if (companySlug == null)
                throw new ArgumentNullException(nameof(companySlug));

            if (offerId == null)
                throw new ArgumentNullException(nameof(offerId));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="offerId"></param>
        private void AfterGetOfferDefaultImplementation(IGetOfferApiResponse apiResponseLocalVar, string companySlug, string offerId)
        {
            bool suppressDefaultLog = false;
            AfterGetOffer(ref suppressDefaultLog, apiResponseLocalVar, companySlug, offerId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="offerId"></param>
        partial void AfterGetOffer(ref bool suppressDefaultLog, IGetOfferApiResponse apiResponseLocalVar, string companySlug, string offerId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="offerId"></param>
        private void OnErrorGetOfferDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string companySlug, string offerId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetOffer(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, companySlug, offerId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="offerId"></param>
        partial void OnErrorGetOffer(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string companySlug, string offerId);

        /// <summary>
        ///  Returns offer with specified id.
        /// </summary>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="offerId">The offerId (primary key of the returned object) is returned as the first field in the GET all offers call </param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetOfferApiResponse"/>&gt;</returns>
        public async Task<IGetOfferApiResponse?> GetOfferOrDefaultAsync(string companySlug, string offerId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetOfferAsync(companySlug, offerId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  Returns offer with specified id.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="offerId">The offerId (primary key of the returned object) is returned as the first field in the GET all offers call </param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetOfferApiResponse"/>&gt;</returns>
        public async Task<IGetOfferApiResponse> GetOfferAsync(string companySlug, string offerId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetOffer(companySlug, offerId);

                FormatGetOffer(ref companySlug, ref offerId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/companies/{companySlug}/offers/{offerId}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BcompanySlug%7D", Uri.EscapeDataString(companySlug.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BofferId%7D", Uri.EscapeDataString(offerId.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetOfferApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetOfferApiResponse>();

                        GetOfferApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/companies/{companySlug}/offers/{offerId}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetOfferDefaultImplementation(apiResponseLocalVar, companySlug, offerId);

                        Events.ExecuteOnGetOffer(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetOfferDefaultImplementation(e, "/companies/{companySlug}/offers/{offerId}", uriBuilderLocalVar.Path, companySlug, offerId);
                Events.ExecuteOnErrorGetOffer(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetOfferApiResponse"/>
        /// </summary>
        public partial class GetOfferApiResponse : Fiken.Client.ApiResponse, IGetOfferApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetOfferApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetOfferApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetOfferApiResponse(ILogger<GetOfferApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Fiken.Model.Offer? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Fiken.Model.Offer>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Fiken.Model.Offer? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetOfferCounter(ref string companySlug);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="companySlug"></param>
        /// <returns></returns>
        private void ValidateGetOfferCounter(string companySlug)
        {
            if (companySlug == null)
                throw new ArgumentNullException(nameof(companySlug));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companySlug"></param>
        private void AfterGetOfferCounterDefaultImplementation(IGetOfferCounterApiResponse apiResponseLocalVar, string companySlug)
        {
            bool suppressDefaultLog = false;
            AfterGetOfferCounter(ref suppressDefaultLog, apiResponseLocalVar, companySlug);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companySlug"></param>
        partial void AfterGetOfferCounter(ref bool suppressDefaultLog, IGetOfferCounterApiResponse apiResponseLocalVar, string companySlug);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companySlug"></param>
        private void OnErrorGetOfferCounterDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string companySlug)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetOfferCounter(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, companySlug);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companySlug"></param>
        partial void OnErrorGetOfferCounter(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string companySlug);

        /// <summary>
        ///  Retrieves the counter for offers if it has been created 
        /// </summary>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetOfferCounterApiResponse"/>&gt;</returns>
        public async Task<IGetOfferCounterApiResponse?> GetOfferCounterOrDefaultAsync(string companySlug, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetOfferCounterAsync(companySlug, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  Retrieves the counter for offers if it has been created 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetOfferCounterApiResponse"/>&gt;</returns>
        public async Task<IGetOfferCounterApiResponse> GetOfferCounterAsync(string companySlug, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetOfferCounter(companySlug);

                FormatGetOfferCounter(ref companySlug);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/companies/{companySlug}/offers/counter";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BcompanySlug%7D", Uri.EscapeDataString(companySlug.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetOfferCounterApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetOfferCounterApiResponse>();

                        GetOfferCounterApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/companies/{companySlug}/offers/counter", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetOfferCounterDefaultImplementation(apiResponseLocalVar, companySlug);

                        Events.ExecuteOnGetOfferCounter(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetOfferCounterDefaultImplementation(e, "/companies/{companySlug}/offers/counter", uriBuilderLocalVar.Path, companySlug);
                Events.ExecuteOnErrorGetOfferCounter(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetOfferCounterApiResponse"/>
        /// </summary>
        public partial class GetOfferCounterApiResponse : Fiken.Client.ApiResponse, IGetOfferCounterApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetOfferCounterApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetOfferCounterApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetOfferCounterApiResponse(ILogger<GetOfferCounterApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Fiken.Model.Counter? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Fiken.Model.Counter>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Fiken.Model.Counter? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetOfferDraft(ref string companySlug, ref long draftId);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="companySlug"></param>
        /// <returns></returns>
        private void ValidateGetOfferDraft(string companySlug)
        {
            if (companySlug == null)
                throw new ArgumentNullException(nameof(companySlug));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="draftId"></param>
        private void AfterGetOfferDraftDefaultImplementation(IGetOfferDraftApiResponse apiResponseLocalVar, string companySlug, long draftId)
        {
            bool suppressDefaultLog = false;
            AfterGetOfferDraft(ref suppressDefaultLog, apiResponseLocalVar, companySlug, draftId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="draftId"></param>
        partial void AfterGetOfferDraft(ref bool suppressDefaultLog, IGetOfferDraftApiResponse apiResponseLocalVar, string companySlug, long draftId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="draftId"></param>
        private void OnErrorGetOfferDraftDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string companySlug, long draftId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetOfferDraft(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, companySlug, draftId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="draftId"></param>
        partial void OnErrorGetOfferDraft(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string companySlug, long draftId);

        /// <summary>
        ///  Returns offer draft with specified id.
        /// </summary>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="draftId">The draftId (primary key of the returned object) is returned in the GET all drafts call. </param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetOfferDraftApiResponse"/>&gt;</returns>
        public async Task<IGetOfferDraftApiResponse?> GetOfferDraftOrDefaultAsync(string companySlug, long draftId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetOfferDraftAsync(companySlug, draftId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  Returns offer draft with specified id.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="draftId">The draftId (primary key of the returned object) is returned in the GET all drafts call. </param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetOfferDraftApiResponse"/>&gt;</returns>
        public async Task<IGetOfferDraftApiResponse> GetOfferDraftAsync(string companySlug, long draftId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetOfferDraft(companySlug);

                FormatGetOfferDraft(ref companySlug, ref draftId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/companies/{companySlug}/offers/drafts/{draftId}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BcompanySlug%7D", Uri.EscapeDataString(companySlug.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BdraftId%7D", Uri.EscapeDataString(draftId.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetOfferDraftApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetOfferDraftApiResponse>();

                        GetOfferDraftApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/companies/{companySlug}/offers/drafts/{draftId}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetOfferDraftDefaultImplementation(apiResponseLocalVar, companySlug, draftId);

                        Events.ExecuteOnGetOfferDraft(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetOfferDraftDefaultImplementation(e, "/companies/{companySlug}/offers/drafts/{draftId}", uriBuilderLocalVar.Path, companySlug, draftId);
                Events.ExecuteOnErrorGetOfferDraft(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetOfferDraftApiResponse"/>
        /// </summary>
        public partial class GetOfferDraftApiResponse : Fiken.Client.ApiResponse, IGetOfferDraftApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetOfferDraftApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetOfferDraftApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetOfferDraftApiResponse(ILogger<GetOfferDraftApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Fiken.Model.InvoiceishDraftResult? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Fiken.Model.InvoiceishDraftResult>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Fiken.Model.InvoiceishDraftResult? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetOfferDraftAttachments(ref string companySlug, ref long draftId);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="companySlug"></param>
        /// <returns></returns>
        private void ValidateGetOfferDraftAttachments(string companySlug)
        {
            if (companySlug == null)
                throw new ArgumentNullException(nameof(companySlug));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="draftId"></param>
        private void AfterGetOfferDraftAttachmentsDefaultImplementation(IGetOfferDraftAttachmentsApiResponse apiResponseLocalVar, string companySlug, long draftId)
        {
            bool suppressDefaultLog = false;
            AfterGetOfferDraftAttachments(ref suppressDefaultLog, apiResponseLocalVar, companySlug, draftId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="draftId"></param>
        partial void AfterGetOfferDraftAttachments(ref bool suppressDefaultLog, IGetOfferDraftAttachmentsApiResponse apiResponseLocalVar, string companySlug, long draftId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="draftId"></param>
        private void OnErrorGetOfferDraftAttachmentsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string companySlug, long draftId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetOfferDraftAttachments(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, companySlug, draftId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="draftId"></param>
        partial void OnErrorGetOfferDraftAttachments(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string companySlug, long draftId);

        /// <summary>
        ///  Returns all attachments for specified draft.
        /// </summary>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="draftId">The draftId (primary key of the returned object) is returned in the GET all drafts call. </param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetOfferDraftAttachmentsApiResponse"/>&gt;</returns>
        public async Task<IGetOfferDraftAttachmentsApiResponse?> GetOfferDraftAttachmentsOrDefaultAsync(string companySlug, long draftId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetOfferDraftAttachmentsAsync(companySlug, draftId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  Returns all attachments for specified draft.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="draftId">The draftId (primary key of the returned object) is returned in the GET all drafts call. </param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetOfferDraftAttachmentsApiResponse"/>&gt;</returns>
        public async Task<IGetOfferDraftAttachmentsApiResponse> GetOfferDraftAttachmentsAsync(string companySlug, long draftId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetOfferDraftAttachments(companySlug);

                FormatGetOfferDraftAttachments(ref companySlug, ref draftId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/companies/{companySlug}/offers/drafts/{draftId}/attachments";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BcompanySlug%7D", Uri.EscapeDataString(companySlug.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BdraftId%7D", Uri.EscapeDataString(draftId.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetOfferDraftAttachmentsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetOfferDraftAttachmentsApiResponse>();

                        GetOfferDraftAttachmentsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/companies/{companySlug}/offers/drafts/{draftId}/attachments", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetOfferDraftAttachmentsDefaultImplementation(apiResponseLocalVar, companySlug, draftId);

                        Events.ExecuteOnGetOfferDraftAttachments(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetOfferDraftAttachmentsDefaultImplementation(e, "/companies/{companySlug}/offers/drafts/{draftId}/attachments", uriBuilderLocalVar.Path, companySlug, draftId);
                Events.ExecuteOnErrorGetOfferDraftAttachments(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetOfferDraftAttachmentsApiResponse"/>
        /// </summary>
        public partial class GetOfferDraftAttachmentsApiResponse : Fiken.Client.ApiResponse, IGetOfferDraftAttachmentsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetOfferDraftAttachmentsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetOfferDraftAttachmentsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetOfferDraftAttachmentsApiResponse(ILogger<GetOfferDraftAttachmentsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<Attachment>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<Attachment>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<Attachment>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetOfferDrafts(ref string companySlug, ref Option<int> page, ref Option<int> pageSize);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="companySlug"></param>
        /// <returns></returns>
        private void ValidateGetOfferDrafts(string companySlug)
        {
            if (companySlug == null)
                throw new ArgumentNullException(nameof(companySlug));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        private void AfterGetOfferDraftsDefaultImplementation(IGetOfferDraftsApiResponse apiResponseLocalVar, string companySlug, Option<int> page, Option<int> pageSize)
        {
            bool suppressDefaultLog = false;
            AfterGetOfferDrafts(ref suppressDefaultLog, apiResponseLocalVar, companySlug, page, pageSize);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        partial void AfterGetOfferDrafts(ref bool suppressDefaultLog, IGetOfferDraftsApiResponse apiResponseLocalVar, string companySlug, Option<int> page, Option<int> pageSize);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        private void OnErrorGetOfferDraftsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string companySlug, Option<int> page, Option<int> pageSize)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetOfferDrafts(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, companySlug, page, pageSize);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        partial void OnErrorGetOfferDrafts(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string companySlug, Option<int> page, Option<int> pageSize);

        /// <summary>
        ///  Returns all offer drafts for given company.
        /// </summary>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="page">Returns the number of the page to return. Valid page values are integers from 0 to the total number of pages. Default value is 0.  (optional, default to 0)</param>
        /// <param name="pageSize">Defines the number of entries to return on each page. Maximum number of results that can be returned at one time are 100. Default value is 25.  (optional, default to 25)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetOfferDraftsApiResponse"/>&gt;</returns>
        public async Task<IGetOfferDraftsApiResponse?> GetOfferDraftsOrDefaultAsync(string companySlug, Option<int> page = default, Option<int> pageSize = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetOfferDraftsAsync(companySlug, page, pageSize, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  Returns all offer drafts for given company.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="page">Returns the number of the page to return. Valid page values are integers from 0 to the total number of pages. Default value is 0.  (optional, default to 0)</param>
        /// <param name="pageSize">Defines the number of entries to return on each page. Maximum number of results that can be returned at one time are 100. Default value is 25.  (optional, default to 25)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetOfferDraftsApiResponse"/>&gt;</returns>
        public async Task<IGetOfferDraftsApiResponse> GetOfferDraftsAsync(string companySlug, Option<int> page = default, Option<int> pageSize = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetOfferDrafts(companySlug);

                FormatGetOfferDrafts(ref companySlug, ref page, ref pageSize);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/companies/{companySlug}/offers/drafts";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BcompanySlug%7D", Uri.EscapeDataString(companySlug.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (page.IsSet)
                        parseQueryStringLocalVar["page"] = ClientUtils.ParameterToString(page.Value);

                    if (pageSize.IsSet)
                        parseQueryStringLocalVar["pageSize"] = ClientUtils.ParameterToString(pageSize.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetOfferDraftsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetOfferDraftsApiResponse>();

                        GetOfferDraftsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/companies/{companySlug}/offers/drafts", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetOfferDraftsDefaultImplementation(apiResponseLocalVar, companySlug, page, pageSize);

                        Events.ExecuteOnGetOfferDrafts(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetOfferDraftsDefaultImplementation(e, "/companies/{companySlug}/offers/drafts", uriBuilderLocalVar.Path, companySlug, page, pageSize);
                Events.ExecuteOnErrorGetOfferDrafts(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetOfferDraftsApiResponse"/>
        /// </summary>
        public partial class GetOfferDraftsApiResponse : Fiken.Client.ApiResponse, IGetOfferDraftsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetOfferDraftsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetOfferDraftsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetOfferDraftsApiResponse(ILogger<GetOfferDraftsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<InvoiceishDraftResult>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<InvoiceishDraftResult>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<InvoiceishDraftResult>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetOffers(ref string companySlug, ref Option<int> page, ref Option<int> pageSize);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="companySlug"></param>
        /// <returns></returns>
        private void ValidateGetOffers(string companySlug)
        {
            if (companySlug == null)
                throw new ArgumentNullException(nameof(companySlug));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        private void AfterGetOffersDefaultImplementation(IGetOffersApiResponse apiResponseLocalVar, string companySlug, Option<int> page, Option<int> pageSize)
        {
            bool suppressDefaultLog = false;
            AfterGetOffers(ref suppressDefaultLog, apiResponseLocalVar, companySlug, page, pageSize);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        partial void AfterGetOffers(ref bool suppressDefaultLog, IGetOffersApiResponse apiResponseLocalVar, string companySlug, Option<int> page, Option<int> pageSize);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        private void OnErrorGetOffersDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string companySlug, Option<int> page, Option<int> pageSize)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetOffers(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, companySlug, page, pageSize);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        partial void OnErrorGetOffers(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string companySlug, Option<int> page, Option<int> pageSize);

        /// <summary>
        ///  Returns all offers for given company
        /// </summary>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="page">Returns the number of the page to return. Valid page values are integers from 0 to the total number of pages. Default value is 0.  (optional, default to 0)</param>
        /// <param name="pageSize">Defines the number of entries to return on each page. Maximum number of results that can be returned at one time are 100. Default value is 25.  (optional, default to 25)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetOffersApiResponse"/>&gt;</returns>
        public async Task<IGetOffersApiResponse?> GetOffersOrDefaultAsync(string companySlug, Option<int> page = default, Option<int> pageSize = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetOffersAsync(companySlug, page, pageSize, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  Returns all offers for given company
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="page">Returns the number of the page to return. Valid page values are integers from 0 to the total number of pages. Default value is 0.  (optional, default to 0)</param>
        /// <param name="pageSize">Defines the number of entries to return on each page. Maximum number of results that can be returned at one time are 100. Default value is 25.  (optional, default to 25)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetOffersApiResponse"/>&gt;</returns>
        public async Task<IGetOffersApiResponse> GetOffersAsync(string companySlug, Option<int> page = default, Option<int> pageSize = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetOffers(companySlug);

                FormatGetOffers(ref companySlug, ref page, ref pageSize);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/companies/{companySlug}/offers";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BcompanySlug%7D", Uri.EscapeDataString(companySlug.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (page.IsSet)
                        parseQueryStringLocalVar["page"] = ClientUtils.ParameterToString(page.Value);

                    if (pageSize.IsSet)
                        parseQueryStringLocalVar["pageSize"] = ClientUtils.ParameterToString(pageSize.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetOffersApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetOffersApiResponse>();

                        GetOffersApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/companies/{companySlug}/offers", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetOffersDefaultImplementation(apiResponseLocalVar, companySlug, page, pageSize);

                        Events.ExecuteOnGetOffers(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetOffersDefaultImplementation(e, "/companies/{companySlug}/offers", uriBuilderLocalVar.Path, companySlug, page, pageSize);
                Events.ExecuteOnErrorGetOffers(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetOffersApiResponse"/>
        /// </summary>
        public partial class GetOffersApiResponse : Fiken.Client.ApiResponse, IGetOffersApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetOffersApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetOffersApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetOffersApiResponse(ILogger<GetOffersApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<Offer>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<Offer>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<Offer>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatUpdateOfferDraft(ref string companySlug, ref long draftId, InvoiceishDraftRequest invoiceishDraftRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="companySlug"></param>
        /// <param name="invoiceishDraftRequest"></param>
        /// <returns></returns>
        private void ValidateUpdateOfferDraft(string companySlug, InvoiceishDraftRequest invoiceishDraftRequest)
        {
            if (companySlug == null)
                throw new ArgumentNullException(nameof(companySlug));

            if (invoiceishDraftRequest == null)
                throw new ArgumentNullException(nameof(invoiceishDraftRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="draftId"></param>
        /// <param name="invoiceishDraftRequest"></param>
        private void AfterUpdateOfferDraftDefaultImplementation(IUpdateOfferDraftApiResponse apiResponseLocalVar, string companySlug, long draftId, InvoiceishDraftRequest invoiceishDraftRequest)
        {
            bool suppressDefaultLog = false;
            AfterUpdateOfferDraft(ref suppressDefaultLog, apiResponseLocalVar, companySlug, draftId, invoiceishDraftRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="draftId"></param>
        /// <param name="invoiceishDraftRequest"></param>
        partial void AfterUpdateOfferDraft(ref bool suppressDefaultLog, IUpdateOfferDraftApiResponse apiResponseLocalVar, string companySlug, long draftId, InvoiceishDraftRequest invoiceishDraftRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="draftId"></param>
        /// <param name="invoiceishDraftRequest"></param>
        private void OnErrorUpdateOfferDraftDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string companySlug, long draftId, InvoiceishDraftRequest invoiceishDraftRequest)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorUpdateOfferDraft(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, companySlug, draftId, invoiceishDraftRequest);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companySlug"></param>
        /// <param name="draftId"></param>
        /// <param name="invoiceishDraftRequest"></param>
        partial void OnErrorUpdateOfferDraft(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string companySlug, long draftId, InvoiceishDraftRequest invoiceishDraftRequest);

        /// <summary>
        ///  Updates offer draft with provided id. 
        /// </summary>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="draftId">The draftId (primary key of the returned object) is returned in the GET all drafts call. </param>
        /// <param name="invoiceishDraftRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateOfferDraftApiResponse"/>&gt;</returns>
        public async Task<IUpdateOfferDraftApiResponse?> UpdateOfferDraftOrDefaultAsync(string companySlug, long draftId, InvoiceishDraftRequest invoiceishDraftRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await UpdateOfferDraftAsync(companySlug, draftId, invoiceishDraftRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  Updates offer draft with provided id. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="draftId">The draftId (primary key of the returned object) is returned in the GET all drafts call. </param>
        /// <param name="invoiceishDraftRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateOfferDraftApiResponse"/>&gt;</returns>
        public async Task<IUpdateOfferDraftApiResponse> UpdateOfferDraftAsync(string companySlug, long draftId, InvoiceishDraftRequest invoiceishDraftRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateUpdateOfferDraft(companySlug, invoiceishDraftRequest);

                FormatUpdateOfferDraft(ref companySlug, ref draftId, invoiceishDraftRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/companies/{companySlug}/offers/drafts/{draftId}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BcompanySlug%7D", Uri.EscapeDataString(companySlug.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BdraftId%7D", Uri.EscapeDataString(draftId.ToString()));

                    httpRequestMessageLocalVar.Content = (invoiceishDraftRequest as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(invoiceishDraftRequest, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    httpRequestMessageLocalVar.Method = HttpMethod.Put;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<UpdateOfferDraftApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<UpdateOfferDraftApiResponse>();

                        UpdateOfferDraftApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/companies/{companySlug}/offers/drafts/{draftId}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterUpdateOfferDraftDefaultImplementation(apiResponseLocalVar, companySlug, draftId, invoiceishDraftRequest);

                        Events.ExecuteOnUpdateOfferDraft(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorUpdateOfferDraftDefaultImplementation(e, "/companies/{companySlug}/offers/drafts/{draftId}", uriBuilderLocalVar.Path, companySlug, draftId, invoiceishDraftRequest);
                Events.ExecuteOnErrorUpdateOfferDraft(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="UpdateOfferDraftApiResponse"/>
        /// </summary>
        public partial class UpdateOfferDraftApiResponse : Fiken.Client.ApiResponse, IUpdateOfferDraftApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<UpdateOfferDraftApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="UpdateOfferDraftApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public UpdateOfferDraftApiResponse(ILogger<UpdateOfferDraftApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public bool IsCreated => 201 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
